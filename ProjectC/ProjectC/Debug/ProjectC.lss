
ProjectC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000421a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006c  00800060  0000421a  000042ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000074a  008000cc  008000cc  0000431a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000431c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000049e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000158  00000000  00000000  00004a70  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a4f  00000000  00000000  00004bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000050e  00000000  00000000  00006617  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d80  00000000  00000000  00006b25  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e4  00000000  00000000  000078a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000538  00000000  00000000  00007e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016b0  00000000  00000000  000083c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00009a74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 11 02 	jmp	0x422	; 0x422 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e1       	ldi	r30, 0x1A	; 26
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3c       	cpi	r26, 0xCC	; 204
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	18 e0       	ldi	r17, 0x08	; 8
      78:	ac ec       	ldi	r26, 0xCC	; 204
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 31       	cpi	r26, 0x16	; 22
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <main>
      8a:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SetBit>:
//Functionality - Sets bit on a PORTx
//Parameter: Takes in a uChar for a PORTx, the pin number and the binary value 
//Returns: The new value of the PORTx
unsigned char SetBit(unsigned char pin, unsigned char number, unsigned char bin_value) 
{
	return (bin_value ? pin | (0x01 << number) : pin & ~(0x01 << number));
      92:	44 23       	and	r20, r20
      94:	51 f0       	breq	.+20     	; 0xaa <SetBit+0x18>
      96:	41 e0       	ldi	r20, 0x01	; 1
      98:	50 e0       	ldi	r21, 0x00	; 0
      9a:	9a 01       	movw	r18, r20
      9c:	02 c0       	rjmp	.+4      	; 0xa2 <SetBit+0x10>
      9e:	22 0f       	add	r18, r18
      a0:	33 1f       	adc	r19, r19
      a2:	6a 95       	dec	r22
      a4:	e2 f7       	brpl	.-8      	; 0x9e <SetBit+0xc>
      a6:	82 2b       	or	r24, r18
      a8:	08 95       	ret
      aa:	21 e0       	ldi	r18, 0x01	; 1
      ac:	30 e0       	ldi	r19, 0x00	; 0
      ae:	a9 01       	movw	r20, r18
      b0:	02 c0       	rjmp	.+4      	; 0xb6 <SetBit+0x24>
      b2:	44 0f       	add	r20, r20
      b4:	55 1f       	adc	r21, r21
      b6:	6a 95       	dec	r22
      b8:	e2 f7       	brpl	.-8      	; 0xb2 <SetBit+0x20>
      ba:	ba 01       	movw	r22, r20
      bc:	60 95       	com	r22
      be:	86 23       	and	r24, r22
}
      c0:	08 95       	ret

000000c2 <GetBit>:
//Functionality - Gets bit from a PINx
//Parameter: Takes in a uChar for a PINx and the pin number
//Returns: The value of the PINx
unsigned char GetBit(unsigned char port, unsigned char number) 
{
	return ( port & (0x01 << number) );
      c2:	21 e0       	ldi	r18, 0x01	; 1
      c4:	30 e0       	ldi	r19, 0x00	; 0
      c6:	a9 01       	movw	r20, r18
      c8:	02 c0       	rjmp	.+4      	; 0xce <GetBit+0xc>
      ca:	44 0f       	add	r20, r20
      cc:	55 1f       	adc	r21, r21
      ce:	6a 95       	dec	r22
      d0:	e2 f7       	brpl	.-8      	; 0xca <GetBit+0x8>
}
      d2:	84 23       	and	r24, r20
      d4:	08 95       	ret

000000d6 <GetKeypadKeyP2>:
//Parameter: None
//Returns: A keypad button press else '\0'
unsigned char GetKeypadKeyP2() {

	// Check keys in col 1
	KEYPADPORT = SetBit(0xFF,COL1,0); // Set Px4 to 0; others 1
      d6:	8f ef       	ldi	r24, 0xFF	; 255
      d8:	64 e0       	ldi	r22, 0x04	; 4
      da:	40 e0       	ldi	r20, 0x00	; 0
      dc:	0e 94 49 00 	call	0x92	; 0x92 <SetBit>
      e0:	85 bb       	out	0x15, r24	; 21
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
      e2:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '1'; }
      e4:	83 b3       	in	r24, 0x13	; 19
      e6:	80 95       	com	r24
      e8:	60 e0       	ldi	r22, 0x00	; 0
      ea:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
      ee:	88 23       	and	r24, r24
      f0:	09 f0       	breq	.+2      	; 0xf4 <GetKeypadKeyP2+0x1e>
      f2:	8a c0       	rjmp	.+276    	; 0x208 <GetKeypadKeyP2+0x132>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '2'; }
      f4:	83 b3       	in	r24, 0x13	; 19
      f6:	80 95       	com	r24
      f8:	61 e0       	ldi	r22, 0x01	; 1
      fa:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
      fe:	88 23       	and	r24, r24
     100:	09 f0       	breq	.+2      	; 0x104 <GetKeypadKeyP2+0x2e>
     102:	84 c0       	rjmp	.+264    	; 0x20c <GetKeypadKeyP2+0x136>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '3'; }
     104:	83 b3       	in	r24, 0x13	; 19
     106:	80 95       	com	r24
     108:	62 e0       	ldi	r22, 0x02	; 2
     10a:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
     10e:	88 23       	and	r24, r24
     110:	09 f0       	breq	.+2      	; 0x114 <GetKeypadKeyP2+0x3e>
     112:	7e c0       	rjmp	.+252    	; 0x210 <GetKeypadKeyP2+0x13a>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return 'A'; }
     114:	83 b3       	in	r24, 0x13	; 19
     116:	80 95       	com	r24
     118:	63 e0       	ldi	r22, 0x03	; 3
     11a:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
     11e:	88 23       	and	r24, r24
     120:	09 f0       	breq	.+2      	; 0x124 <GetKeypadKeyP2+0x4e>
     122:	78 c0       	rjmp	.+240    	; 0x214 <GetKeypadKeyP2+0x13e>

	// Check keys in col 2
	KEYPADPORT = SetBit(0xFF,COL2,0); // Set Px5 to 0; others 1
     124:	8f ef       	ldi	r24, 0xFF	; 255
     126:	65 e0       	ldi	r22, 0x05	; 5
     128:	40 e0       	ldi	r20, 0x00	; 0
     12a:	0e 94 49 00 	call	0x92	; 0x92 <SetBit>
     12e:	85 bb       	out	0x15, r24	; 21
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
     130:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '4'; }
     132:	83 b3       	in	r24, 0x13	; 19
     134:	80 95       	com	r24
     136:	60 e0       	ldi	r22, 0x00	; 0
     138:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
     13c:	88 23       	and	r24, r24
     13e:	09 f0       	breq	.+2      	; 0x142 <GetKeypadKeyP2+0x6c>
     140:	6b c0       	rjmp	.+214    	; 0x218 <GetKeypadKeyP2+0x142>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '5'; }
     142:	83 b3       	in	r24, 0x13	; 19
     144:	80 95       	com	r24
     146:	61 e0       	ldi	r22, 0x01	; 1
     148:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
     14c:	88 23       	and	r24, r24
     14e:	09 f0       	breq	.+2      	; 0x152 <GetKeypadKeyP2+0x7c>
     150:	65 c0       	rjmp	.+202    	; 0x21c <GetKeypadKeyP2+0x146>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '6'; }
     152:	83 b3       	in	r24, 0x13	; 19
     154:	80 95       	com	r24
     156:	62 e0       	ldi	r22, 0x02	; 2
     158:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
     15c:	88 23       	and	r24, r24
     15e:	09 f0       	breq	.+2      	; 0x162 <GetKeypadKeyP2+0x8c>
     160:	5f c0       	rjmp	.+190    	; 0x220 <GetKeypadKeyP2+0x14a>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return 'B'; }
     162:	83 b3       	in	r24, 0x13	; 19
     164:	80 95       	com	r24
     166:	63 e0       	ldi	r22, 0x03	; 3
     168:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
     16c:	88 23       	and	r24, r24
     16e:	09 f0       	breq	.+2      	; 0x172 <GetKeypadKeyP2+0x9c>
     170:	59 c0       	rjmp	.+178    	; 0x224 <GetKeypadKeyP2+0x14e>

	// Check keys in col 3
	KEYPADPORT = SetBit(0xFF,COL3,0); // Set Px6 to 0; others 1
     172:	8f ef       	ldi	r24, 0xFF	; 255
     174:	66 e0       	ldi	r22, 0x06	; 6
     176:	40 e0       	ldi	r20, 0x00	; 0
     178:	0e 94 49 00 	call	0x92	; 0x92 <SetBit>
     17c:	85 bb       	out	0x15, r24	; 21
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
     17e:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '7'; }
     180:	83 b3       	in	r24, 0x13	; 19
     182:	80 95       	com	r24
     184:	60 e0       	ldi	r22, 0x00	; 0
     186:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
     18a:	88 23       	and	r24, r24
     18c:	09 f0       	breq	.+2      	; 0x190 <GetKeypadKeyP2+0xba>
     18e:	4c c0       	rjmp	.+152    	; 0x228 <GetKeypadKeyP2+0x152>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '8'; }
     190:	83 b3       	in	r24, 0x13	; 19
     192:	80 95       	com	r24
     194:	61 e0       	ldi	r22, 0x01	; 1
     196:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
     19a:	88 23       	and	r24, r24
     19c:	09 f0       	breq	.+2      	; 0x1a0 <GetKeypadKeyP2+0xca>
     19e:	46 c0       	rjmp	.+140    	; 0x22c <GetKeypadKeyP2+0x156>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '9'; }
     1a0:	83 b3       	in	r24, 0x13	; 19
     1a2:	80 95       	com	r24
     1a4:	62 e0       	ldi	r22, 0x02	; 2
     1a6:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
     1aa:	88 23       	and	r24, r24
     1ac:	09 f0       	breq	.+2      	; 0x1b0 <GetKeypadKeyP2+0xda>
     1ae:	40 c0       	rjmp	.+128    	; 0x230 <GetKeypadKeyP2+0x15a>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return 'C'; }
     1b0:	83 b3       	in	r24, 0x13	; 19
     1b2:	80 95       	com	r24
     1b4:	63 e0       	ldi	r22, 0x03	; 3
     1b6:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
     1ba:	88 23       	and	r24, r24
     1bc:	d9 f5       	brne	.+118    	; 0x234 <GetKeypadKeyP2+0x15e>

	// Check keys in col 4
	KEYPADPORT = SetBit(0xFF,COL4,0); // Set Px7 to 0; others 1
     1be:	8f ef       	ldi	r24, 0xFF	; 255
     1c0:	67 e0       	ldi	r22, 0x07	; 7
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	0e 94 49 00 	call	0x92	; 0x92 <SetBit>
     1c8:	85 bb       	out	0x15, r24	; 21
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
     1ca:	00 00       	nop
	if (GetBit(~KEYPADPIN,ROW1) ) { return '*'; }
     1cc:	83 b3       	in	r24, 0x13	; 19
     1ce:	80 95       	com	r24
     1d0:	60 e0       	ldi	r22, 0x00	; 0
     1d2:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
     1d6:	88 23       	and	r24, r24
     1d8:	79 f5       	brne	.+94     	; 0x238 <GetKeypadKeyP2+0x162>
	if (GetBit(~KEYPADPIN,ROW2) ) { return '0'; }
     1da:	83 b3       	in	r24, 0x13	; 19
     1dc:	80 95       	com	r24
     1de:	61 e0       	ldi	r22, 0x01	; 1
     1e0:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
     1e4:	88 23       	and	r24, r24
     1e6:	51 f5       	brne	.+84     	; 0x23c <GetKeypadKeyP2+0x166>
	if (GetBit(~KEYPADPIN,ROW3) ) { return '#'; }
     1e8:	83 b3       	in	r24, 0x13	; 19
     1ea:	80 95       	com	r24
     1ec:	62 e0       	ldi	r22, 0x02	; 2
     1ee:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
     1f2:	88 23       	and	r24, r24
     1f4:	29 f5       	brne	.+74     	; 0x240 <GetKeypadKeyP2+0x16a>
	if (GetBit(~KEYPADPIN,ROW4) ) { return 'D'; }
     1f6:	83 b3       	in	r24, 0x13	; 19
     1f8:	80 95       	com	r24
     1fa:	63 e0       	ldi	r22, 0x03	; 3
     1fc:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
     200:	88 23       	and	r24, r24
     202:	01 f1       	breq	.+64     	; 0x244 <GetKeypadKeyP2+0x16e>
     204:	84 e4       	ldi	r24, 0x44	; 68
     206:	08 95       	ret
unsigned char GetKeypadKeyP2() {

	// Check keys in col 1
	KEYPADPORT = SetBit(0xFF,COL1,0); // Set Px4 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '1'; }
     208:	81 e3       	ldi	r24, 0x31	; 49
     20a:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '2'; }
     20c:	82 e3       	ldi	r24, 0x32	; 50
     20e:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '3'; }
     210:	83 e3       	ldi	r24, 0x33	; 51
     212:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return 'A'; }
     214:	81 e4       	ldi	r24, 0x41	; 65
     216:	08 95       	ret

	// Check keys in col 2
	KEYPADPORT = SetBit(0xFF,COL2,0); // Set Px5 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '4'; }
     218:	84 e3       	ldi	r24, 0x34	; 52
     21a:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '5'; }
     21c:	85 e3       	ldi	r24, 0x35	; 53
     21e:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '6'; }
     220:	86 e3       	ldi	r24, 0x36	; 54
     222:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return 'B'; }
     224:	82 e4       	ldi	r24, 0x42	; 66
     226:	08 95       	ret

	// Check keys in col 3
	KEYPADPORT = SetBit(0xFF,COL3,0); // Set Px6 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '7'; }
     228:	87 e3       	ldi	r24, 0x37	; 55
     22a:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '8'; }
     22c:	88 e3       	ldi	r24, 0x38	; 56
     22e:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '9'; }
     230:	89 e3       	ldi	r24, 0x39	; 57
     232:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return 'C'; }
     234:	83 e4       	ldi	r24, 0x43	; 67
     236:	08 95       	ret

	// Check keys in col 4
	KEYPADPORT = SetBit(0xFF,COL4,0); // Set Px7 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if (GetBit(~KEYPADPIN,ROW1) ) { return '*'; }
     238:	8a e2       	ldi	r24, 0x2A	; 42
     23a:	08 95       	ret
	if (GetBit(~KEYPADPIN,ROW2) ) { return '0'; }
     23c:	80 e3       	ldi	r24, 0x30	; 48
     23e:	08 95       	ret
	if (GetBit(~KEYPADPIN,ROW3) ) { return '#'; }
     240:	83 e2       	ldi	r24, 0x23	; 35
     242:	08 95       	ret
	if (GetBit(~KEYPADPIN,ROW4) ) { return 'D'; }
	
	return '\0';
     244:	80 e0       	ldi	r24, 0x00	; 0
}
     246:	08 95       	ret

00000248 <GetKeypadKeyP1>:

//Modification here
unsigned char GetKeypadKeyP1() {

	// Check keys in col 1
	PORTA = SetBit(0xFF,COL1,0); // Set Px4 to 0; others 1
     248:	8f ef       	ldi	r24, 0xFF	; 255
     24a:	64 e0       	ldi	r22, 0x04	; 4
     24c:	40 e0       	ldi	r20, 0x00	; 0
     24e:	0e 94 49 00 	call	0x92	; 0x92 <SetBit>
     252:	8b bb       	out	0x1b, r24	; 27
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
     254:	00 00       	nop
	if ( GetBit(~PINA,ROW1) ) { return '1'; }
     256:	89 b3       	in	r24, 0x19	; 25
     258:	80 95       	com	r24
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
     260:	88 23       	and	r24, r24
     262:	09 f0       	breq	.+2      	; 0x266 <GetKeypadKeyP1+0x1e>
     264:	8a c0       	rjmp	.+276    	; 0x37a <GetKeypadKeyP1+0x132>
	if ( GetBit(~PINA,ROW2) ) { return '2'; }
     266:	89 b3       	in	r24, 0x19	; 25
     268:	80 95       	com	r24
     26a:	61 e0       	ldi	r22, 0x01	; 1
     26c:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
     270:	88 23       	and	r24, r24
     272:	09 f0       	breq	.+2      	; 0x276 <GetKeypadKeyP1+0x2e>
     274:	84 c0       	rjmp	.+264    	; 0x37e <GetKeypadKeyP1+0x136>
	if ( GetBit(~PINA,ROW3) ) { return '3'; }
     276:	89 b3       	in	r24, 0x19	; 25
     278:	80 95       	com	r24
     27a:	62 e0       	ldi	r22, 0x02	; 2
     27c:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
     280:	88 23       	and	r24, r24
     282:	09 f0       	breq	.+2      	; 0x286 <GetKeypadKeyP1+0x3e>
     284:	7e c0       	rjmp	.+252    	; 0x382 <GetKeypadKeyP1+0x13a>
	if ( GetBit(~PINA,ROW4) ) { return 'A'; }
     286:	89 b3       	in	r24, 0x19	; 25
     288:	80 95       	com	r24
     28a:	63 e0       	ldi	r22, 0x03	; 3
     28c:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
     290:	88 23       	and	r24, r24
     292:	09 f0       	breq	.+2      	; 0x296 <GetKeypadKeyP1+0x4e>
     294:	78 c0       	rjmp	.+240    	; 0x386 <GetKeypadKeyP1+0x13e>

	// Check keys in col 2
	PORTA = SetBit(0xFF,COL2,0); // Set Px5 to 0; others 1
     296:	8f ef       	ldi	r24, 0xFF	; 255
     298:	65 e0       	ldi	r22, 0x05	; 5
     29a:	40 e0       	ldi	r20, 0x00	; 0
     29c:	0e 94 49 00 	call	0x92	; 0x92 <SetBit>
     2a0:	8b bb       	out	0x1b, r24	; 27
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
     2a2:	00 00       	nop
	if ( GetBit(~PINA,ROW1) ) { return '4'; }
     2a4:	89 b3       	in	r24, 0x19	; 25
     2a6:	80 95       	com	r24
     2a8:	60 e0       	ldi	r22, 0x00	; 0
     2aa:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
     2ae:	88 23       	and	r24, r24
     2b0:	09 f0       	breq	.+2      	; 0x2b4 <GetKeypadKeyP1+0x6c>
     2b2:	6b c0       	rjmp	.+214    	; 0x38a <GetKeypadKeyP1+0x142>
	if ( GetBit(~PINA,ROW2) ) { return '5'; }
     2b4:	89 b3       	in	r24, 0x19	; 25
     2b6:	80 95       	com	r24
     2b8:	61 e0       	ldi	r22, 0x01	; 1
     2ba:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
     2be:	88 23       	and	r24, r24
     2c0:	09 f0       	breq	.+2      	; 0x2c4 <GetKeypadKeyP1+0x7c>
     2c2:	65 c0       	rjmp	.+202    	; 0x38e <GetKeypadKeyP1+0x146>
	if ( GetBit(~PINA,ROW3) ) { return '6'; }
     2c4:	89 b3       	in	r24, 0x19	; 25
     2c6:	80 95       	com	r24
     2c8:	62 e0       	ldi	r22, 0x02	; 2
     2ca:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
     2ce:	88 23       	and	r24, r24
     2d0:	09 f0       	breq	.+2      	; 0x2d4 <GetKeypadKeyP1+0x8c>
     2d2:	5f c0       	rjmp	.+190    	; 0x392 <GetKeypadKeyP1+0x14a>
	if ( GetBit(~PINA,ROW4) ) { return 'B'; }
     2d4:	89 b3       	in	r24, 0x19	; 25
     2d6:	80 95       	com	r24
     2d8:	63 e0       	ldi	r22, 0x03	; 3
     2da:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
     2de:	88 23       	and	r24, r24
     2e0:	09 f0       	breq	.+2      	; 0x2e4 <GetKeypadKeyP1+0x9c>
     2e2:	59 c0       	rjmp	.+178    	; 0x396 <GetKeypadKeyP1+0x14e>

	// Check keys in col 3
	PORTA = SetBit(0xFF,COL3,0); // Set Px6 to 0; others 1
     2e4:	8f ef       	ldi	r24, 0xFF	; 255
     2e6:	66 e0       	ldi	r22, 0x06	; 6
     2e8:	40 e0       	ldi	r20, 0x00	; 0
     2ea:	0e 94 49 00 	call	0x92	; 0x92 <SetBit>
     2ee:	8b bb       	out	0x1b, r24	; 27
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
     2f0:	00 00       	nop
	if ( GetBit(~PINA,ROW1) ) { return '7'; }
     2f2:	89 b3       	in	r24, 0x19	; 25
     2f4:	80 95       	com	r24
     2f6:	60 e0       	ldi	r22, 0x00	; 0
     2f8:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
     2fc:	88 23       	and	r24, r24
     2fe:	09 f0       	breq	.+2      	; 0x302 <GetKeypadKeyP1+0xba>
     300:	4c c0       	rjmp	.+152    	; 0x39a <GetKeypadKeyP1+0x152>
	if ( GetBit(~PINA,ROW2) ) { return '8'; }
     302:	89 b3       	in	r24, 0x19	; 25
     304:	80 95       	com	r24
     306:	61 e0       	ldi	r22, 0x01	; 1
     308:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
     30c:	88 23       	and	r24, r24
     30e:	09 f0       	breq	.+2      	; 0x312 <GetKeypadKeyP1+0xca>
     310:	46 c0       	rjmp	.+140    	; 0x39e <GetKeypadKeyP1+0x156>
	if ( GetBit(~PINA,ROW3) ) { return '9'; }
     312:	89 b3       	in	r24, 0x19	; 25
     314:	80 95       	com	r24
     316:	62 e0       	ldi	r22, 0x02	; 2
     318:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
     31c:	88 23       	and	r24, r24
     31e:	09 f0       	breq	.+2      	; 0x322 <GetKeypadKeyP1+0xda>
     320:	40 c0       	rjmp	.+128    	; 0x3a2 <GetKeypadKeyP1+0x15a>
	if ( GetBit(~PINA,ROW4) ) { return 'C'; }
     322:	89 b3       	in	r24, 0x19	; 25
     324:	80 95       	com	r24
     326:	63 e0       	ldi	r22, 0x03	; 3
     328:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
     32c:	88 23       	and	r24, r24
     32e:	d9 f5       	brne	.+118    	; 0x3a6 <GetKeypadKeyP1+0x15e>

	// Check keys in col 4
	PORTA = SetBit(0xFF,COL4,0); // Set Px7 to 0; others 1
     330:	8f ef       	ldi	r24, 0xFF	; 255
     332:	67 e0       	ldi	r22, 0x07	; 7
     334:	40 e0       	ldi	r20, 0x00	; 0
     336:	0e 94 49 00 	call	0x92	; 0x92 <SetBit>
     33a:	8b bb       	out	0x1b, r24	; 27
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
     33c:	00 00       	nop
	if (GetBit(~PINA,ROW1) ) { return '*'; }
     33e:	89 b3       	in	r24, 0x19	; 25
     340:	80 95       	com	r24
     342:	60 e0       	ldi	r22, 0x00	; 0
     344:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
     348:	88 23       	and	r24, r24
     34a:	79 f5       	brne	.+94     	; 0x3aa <GetKeypadKeyP1+0x162>
	if (GetBit(~PINA,ROW2) ) { return '0'; }
     34c:	89 b3       	in	r24, 0x19	; 25
     34e:	80 95       	com	r24
     350:	61 e0       	ldi	r22, 0x01	; 1
     352:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
     356:	88 23       	and	r24, r24
     358:	51 f5       	brne	.+84     	; 0x3ae <GetKeypadKeyP1+0x166>
	if (GetBit(~PINA,ROW3) ) { return '#'; }
     35a:	89 b3       	in	r24, 0x19	; 25
     35c:	80 95       	com	r24
     35e:	62 e0       	ldi	r22, 0x02	; 2
     360:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
     364:	88 23       	and	r24, r24
     366:	29 f5       	brne	.+74     	; 0x3b2 <GetKeypadKeyP1+0x16a>
	if (GetBit(~PINA,ROW4) ) { return 'D'; }
     368:	89 b3       	in	r24, 0x19	; 25
     36a:	80 95       	com	r24
     36c:	63 e0       	ldi	r22, 0x03	; 3
     36e:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
     372:	88 23       	and	r24, r24
     374:	01 f1       	breq	.+64     	; 0x3b6 <GetKeypadKeyP1+0x16e>
     376:	84 e4       	ldi	r24, 0x44	; 68
     378:	08 95       	ret
unsigned char GetKeypadKeyP1() {

	// Check keys in col 1
	PORTA = SetBit(0xFF,COL1,0); // Set Px4 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~PINA,ROW1) ) { return '1'; }
     37a:	81 e3       	ldi	r24, 0x31	; 49
     37c:	08 95       	ret
	if ( GetBit(~PINA,ROW2) ) { return '2'; }
     37e:	82 e3       	ldi	r24, 0x32	; 50
     380:	08 95       	ret
	if ( GetBit(~PINA,ROW3) ) { return '3'; }
     382:	83 e3       	ldi	r24, 0x33	; 51
     384:	08 95       	ret
	if ( GetBit(~PINA,ROW4) ) { return 'A'; }
     386:	81 e4       	ldi	r24, 0x41	; 65
     388:	08 95       	ret

	// Check keys in col 2
	PORTA = SetBit(0xFF,COL2,0); // Set Px5 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~PINA,ROW1) ) { return '4'; }
     38a:	84 e3       	ldi	r24, 0x34	; 52
     38c:	08 95       	ret
	if ( GetBit(~PINA,ROW2) ) { return '5'; }
     38e:	85 e3       	ldi	r24, 0x35	; 53
     390:	08 95       	ret
	if ( GetBit(~PINA,ROW3) ) { return '6'; }
     392:	86 e3       	ldi	r24, 0x36	; 54
     394:	08 95       	ret
	if ( GetBit(~PINA,ROW4) ) { return 'B'; }
     396:	82 e4       	ldi	r24, 0x42	; 66
     398:	08 95       	ret

	// Check keys in col 3
	PORTA = SetBit(0xFF,COL3,0); // Set Px6 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~PINA,ROW1) ) { return '7'; }
     39a:	87 e3       	ldi	r24, 0x37	; 55
     39c:	08 95       	ret
	if ( GetBit(~PINA,ROW2) ) { return '8'; }
     39e:	88 e3       	ldi	r24, 0x38	; 56
     3a0:	08 95       	ret
	if ( GetBit(~PINA,ROW3) ) { return '9'; }
     3a2:	89 e3       	ldi	r24, 0x39	; 57
     3a4:	08 95       	ret
	if ( GetBit(~PINA,ROW4) ) { return 'C'; }
     3a6:	83 e4       	ldi	r24, 0x43	; 67
     3a8:	08 95       	ret

	// Check keys in col 4
	PORTA = SetBit(0xFF,COL4,0); // Set Px7 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if (GetBit(~PINA,ROW1) ) { return '*'; }
     3aa:	8a e2       	ldi	r24, 0x2A	; 42
     3ac:	08 95       	ret
	if (GetBit(~PINA,ROW2) ) { return '0'; }
     3ae:	80 e3       	ldi	r24, 0x30	; 48
     3b0:	08 95       	ret
	if (GetBit(~PINA,ROW3) ) { return '#'; }
     3b2:	83 e2       	ldi	r24, 0x23	; 35
     3b4:	08 95       	ret
	if (GetBit(~PINA,ROW4) ) { return 'D'; }
	
	return '\0';
     3b6:	80 e0       	ldi	r24, 0x00	; 0
}
     3b8:	08 95       	ret

000003ba <TimerSet>:
// Internal variables for mapping AVR's ISR to our cleaner TimerISR model.
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1ms
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
     3ba:	dc 01       	movw	r26, r24
     3bc:	cb 01       	movw	r24, r22
	_avr_timer_M = M;
     3be:	80 93 c4 00 	sts	0x00C4, r24
     3c2:	90 93 c5 00 	sts	0x00C5, r25
     3c6:	a0 93 c6 00 	sts	0x00C6, r26
     3ca:	b0 93 c7 00 	sts	0x00C7, r27
	_avr_timer_cntcurr = _avr_timer_M;
     3ce:	80 93 cc 00 	sts	0x00CC, r24
     3d2:	90 93 cd 00 	sts	0x00CD, r25
     3d6:	a0 93 ce 00 	sts	0x00CE, r26
     3da:	b0 93 cf 00 	sts	0x00CF, r27
}
     3de:	08 95       	ret

000003e0 <TimerOn>:

void TimerOn() {
	// AVR timer/counter controller register TCCR0
	TCCR0 	= 0x0B;	// bit3bit6=10: CTC mode (clear timer on compare)
     3e0:	8b e0       	ldi	r24, 0x0B	; 11
     3e2:	83 bf       	out	0x33, r24	; 51
	// 00001011: 0x0B
	// SO, 8 MHz clock or 8,000,000 /64 = 125,000 ticks/s
	// Thus, TCNT0 register will count at 125,000 ticks/s

	// AVR output compare register OCR0.
	OCR0 	= 125;	// Timer interrupt will be generated when TCNT0==OCR0
     3e4:	8d e7       	ldi	r24, 0x7D	; 125
     3e6:	8c bf       	out	0x3c, r24	; 60
	// We want a 1 ms tick. 0.001 s * 125,000 ticks/s = 125
	// So when TCNT0 register equals 125,
	// 1 ms has passed. Thus, we compare to 125.
	// AVR timer interrupt mask register

	TIMSK 	= 0x02; // bit1: OCIE0 -- enables compare match interrupt
     3e8:	82 e0       	ldi	r24, 0x02	; 2
     3ea:	89 bf       	out	0x39, r24	; 57

	//Initialize avr counter
	TCNT0 = 0;
     3ec:	12 be       	out	0x32, r1	; 50

	// TimerISR will be called every _avr_timer_cntcurr milliseconds
	_avr_timer_cntcurr = _avr_timer_M;
     3ee:	80 91 c4 00 	lds	r24, 0x00C4
     3f2:	90 91 c5 00 	lds	r25, 0x00C5
     3f6:	a0 91 c6 00 	lds	r26, 0x00C6
     3fa:	b0 91 c7 00 	lds	r27, 0x00C7
     3fe:	80 93 cc 00 	sts	0x00CC, r24
     402:	90 93 cd 00 	sts	0x00CD, r25
     406:	a0 93 ce 00 	sts	0x00CE, r26
     40a:	b0 93 cf 00 	sts	0x00CF, r27

	//Enable global interrupts
	SREG |= 0x80;	// 0x80: 1000000
     40e:	8f b7       	in	r24, 0x3f	; 63
     410:	80 68       	ori	r24, 0x80	; 128
     412:	8f bf       	out	0x3f, r24	; 63
}
     414:	08 95       	ret

00000416 <TimerOff>:

void TimerOff() {
	TCCR0 	= 0x00; // bit2bit1bit0=000: timer off
     416:	13 be       	out	0x33, r1	; 51
}
     418:	08 95       	ret

0000041a <TimerISR>:

void TimerISR() {
	TimerFlag = 1;
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	80 93 d0 00 	sts	0x00D0, r24
}
     420:	08 95       	ret

00000422 <__vector_10>:

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER0_COMP_vect)
{
     422:	1f 92       	push	r1
     424:	0f 92       	push	r0
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	0f 92       	push	r0
     42a:	11 24       	eor	r1, r1
     42c:	2f 93       	push	r18
     42e:	3f 93       	push	r19
     430:	4f 93       	push	r20
     432:	5f 93       	push	r21
     434:	6f 93       	push	r22
     436:	7f 93       	push	r23
     438:	8f 93       	push	r24
     43a:	9f 93       	push	r25
     43c:	af 93       	push	r26
     43e:	bf 93       	push	r27
     440:	ef 93       	push	r30
     442:	ff 93       	push	r31
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
     444:	80 91 cc 00 	lds	r24, 0x00CC
     448:	90 91 cd 00 	lds	r25, 0x00CD
     44c:	a0 91 ce 00 	lds	r26, 0x00CE
     450:	b0 91 cf 00 	lds	r27, 0x00CF
     454:	01 97       	sbiw	r24, 0x01	; 1
     456:	a1 09       	sbc	r26, r1
     458:	b1 09       	sbc	r27, r1
     45a:	80 93 cc 00 	sts	0x00CC, r24
     45e:	90 93 cd 00 	sts	0x00CD, r25
     462:	a0 93 ce 00 	sts	0x00CE, r26
     466:	b0 93 cf 00 	sts	0x00CF, r27
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
     46a:	00 97       	sbiw	r24, 0x00	; 0
     46c:	a1 05       	cpc	r26, r1
     46e:	b1 05       	cpc	r27, r1
     470:	91 f4       	brne	.+36     	; 0x496 <__vector_10+0x74>
	TimerISR(); 				// Call the ISR that the user uses
     472:	0e 94 0d 02 	call	0x41a	; 0x41a <TimerISR>
	_avr_timer_cntcurr = _avr_timer_M;
     476:	80 91 c4 00 	lds	r24, 0x00C4
     47a:	90 91 c5 00 	lds	r25, 0x00C5
     47e:	a0 91 c6 00 	lds	r26, 0x00C6
     482:	b0 91 c7 00 	lds	r27, 0x00C7
     486:	80 93 cc 00 	sts	0x00CC, r24
     48a:	90 93 cd 00 	sts	0x00CD, r25
     48e:	a0 93 ce 00 	sts	0x00CE, r26
     492:	b0 93 cf 00 	sts	0x00CF, r27
}
}
     496:	ff 91       	pop	r31
     498:	ef 91       	pop	r30
     49a:	bf 91       	pop	r27
     49c:	af 91       	pop	r26
     49e:	9f 91       	pop	r25
     4a0:	8f 91       	pop	r24
     4a2:	7f 91       	pop	r23
     4a4:	6f 91       	pop	r22
     4a6:	5f 91       	pop	r21
     4a8:	4f 91       	pop	r20
     4aa:	3f 91       	pop	r19
     4ac:	2f 91       	pop	r18
     4ae:	0f 90       	pop	r0
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	0f 90       	pop	r0
     4b4:	1f 90       	pop	r1
     4b6:	18 95       	reti

000004b8 <delay>:

//============================================================================================================================================
// Helper Functions/etc:

// Necessary delay, otherwise game would run too slowly in a SM based delay system
void delay(unsigned char a) {
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	0f 92       	push	r0
     4be:	cd b7       	in	r28, 0x3d	; 61
     4c0:	de b7       	in	r29, 0x3e	; 62
  for(volatile unsigned char i = 0; i < a ; ++i) {}
     4c2:	19 82       	std	Y+1, r1	; 0x01
     4c4:	99 81       	ldd	r25, Y+1	; 0x01
     4c6:	98 17       	cp	r25, r24
     4c8:	30 f4       	brcc	.+12     	; 0x4d6 <delay+0x1e>
     4ca:	99 81       	ldd	r25, Y+1	; 0x01
     4cc:	9f 5f       	subi	r25, 0xFF	; 255
     4ce:	99 83       	std	Y+1, r25	; 0x01
     4d0:	99 81       	ldd	r25, Y+1	; 0x01
     4d2:	98 17       	cp	r25, r24
     4d4:	d0 f3       	brcs	.-12     	; 0x4ca <delay+0x12>
}
     4d6:	0f 90       	pop	r0
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
     4dc:	08 95       	ret

000004de <cmdWrite>:

void cmdWrite(unsigned char cmd) {
     4de:	cf 93       	push	r28
     4e0:	c8 2f       	mov	r28, r24
  PORTB = SetBit(PORTB,3, 0);
     4e2:	88 b3       	in	r24, 0x18	; 24
     4e4:	63 e0       	ldi	r22, 0x03	; 3
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	0e 94 49 00 	call	0x92	; 0x92 <SetBit>
     4ec:	88 bb       	out	0x18, r24	; 24
  PORTD = cmd;
     4ee:	c2 bb       	out	0x12, r28	; 18
  PORTB = SetBit(PORTB,4, 1);
     4f0:	88 b3       	in	r24, 0x18	; 24
     4f2:	64 e0       	ldi	r22, 0x04	; 4
     4f4:	41 e0       	ldi	r20, 0x01	; 1
     4f6:	0e 94 49 00 	call	0x92	; 0x92 <SetBit>
     4fa:	88 bb       	out	0x18, r24	; 24
  delay(CMD_DELAY);
     4fc:	87 e0       	ldi	r24, 0x07	; 7
     4fe:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <delay>
  PORTB = SetBit(PORTB,4, 0);
     502:	88 b3       	in	r24, 0x18	; 24
     504:	64 e0       	ldi	r22, 0x04	; 4
     506:	40 e0       	ldi	r20, 0x00	; 0
     508:	0e 94 49 00 	call	0x92	; 0x92 <SetBit>
     50c:	88 bb       	out	0x18, r24	; 24
  delay(CMD_DELAY);    
     50e:	87 e0       	ldi	r24, 0x07	; 7
     510:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <delay>
}
     514:	cf 91       	pop	r28
     516:	08 95       	ret

00000518 <dataWrite>:

void dataWrite(unsigned char data) {
     518:	cf 93       	push	r28
     51a:	c8 2f       	mov	r28, r24
  PORTB = SetBit(PORTB,3,1);
     51c:	88 b3       	in	r24, 0x18	; 24
     51e:	63 e0       	ldi	r22, 0x03	; 3
     520:	41 e0       	ldi	r20, 0x01	; 1
     522:	0e 94 49 00 	call	0x92	; 0x92 <SetBit>
     526:	88 bb       	out	0x18, r24	; 24
  PORTD = data;
     528:	c2 bb       	out	0x12, r28	; 18
  PORTB = SetBit(PORTB,4, 1);
     52a:	88 b3       	in	r24, 0x18	; 24
     52c:	64 e0       	ldi	r22, 0x04	; 4
     52e:	41 e0       	ldi	r20, 0x01	; 1
     530:	0e 94 49 00 	call	0x92	; 0x92 <SetBit>
     534:	88 bb       	out	0x18, r24	; 24
  delay(CMD_DELAY);
     536:	87 e0       	ldi	r24, 0x07	; 7
     538:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <delay>
  PORTB = SetBit(PORTB,4, 0);
     53c:	88 b3       	in	r24, 0x18	; 24
     53e:	64 e0       	ldi	r22, 0x04	; 4
     540:	40 e0       	ldi	r20, 0x00	; 0
     542:	0e 94 49 00 	call	0x92	; 0x92 <SetBit>
     546:	88 bb       	out	0x18, r24	; 24
  delay(CMD_DELAY);
     548:	87 e0       	ldi	r24, 0x07	; 7
     54a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <delay>
}
     54e:	cf 91       	pop	r28
     550:	08 95       	ret

00000552 <setCursor>:

// sets the cursor position on the LCD
void setCursor(unsigned char col, unsigned char row) { 
  if(row == 0)
     552:	66 23       	and	r22, r22
     554:	21 f4       	brne	.+8      	; 0x55e <setCursor+0xc>
    cmdWrite(0x80 + col);
     556:	80 58       	subi	r24, 0x80	; 128
     558:	0e 94 6f 02 	call	0x4de	; 0x4de <cmdWrite>
     55c:	08 95       	ret
  else if(row == 1)
     55e:	61 30       	cpi	r22, 0x01	; 1
     560:	19 f4       	brne	.+6      	; 0x568 <setCursor+0x16>
    cmdWrite(0xC0 + col);
     562:	80 54       	subi	r24, 0x40	; 64
     564:	0e 94 6f 02 	call	0x4de	; 0x4de <cmdWrite>
     568:	08 95       	ret

0000056a <createChar>:
}

// writes character data to addr on LCD
void createChar(char addr, char arr[8]) {
     56a:	0f 93       	push	r16
     56c:	1f 93       	push	r17
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	06 2f       	mov	r16, r22
     574:	17 2f       	mov	r17, r23
  if(addr >= 8 || addr < 0) return;
     576:	88 30       	cpi	r24, 0x08	; 8
     578:	88 f4       	brcc	.+34     	; 0x59c <createChar+0x32>
  else if(addr < 8) {
    cmdWrite(0x40 + (addr * 8));
     57a:	88 0f       	add	r24, r24
     57c:	88 0f       	add	r24, r24
     57e:	88 0f       	add	r24, r24
     580:	80 5c       	subi	r24, 0xC0	; 192
     582:	0e 94 6f 02 	call	0x4de	; 0x4de <cmdWrite>
     586:	c0 2f       	mov	r28, r16
     588:	d1 2f       	mov	r29, r17
     58a:	18 e0       	ldi	r17, 0x08	; 8
    for(char i = 0; i < 8 ; ++i)
      dataWrite(arr[i]);
     58c:	89 91       	ld	r24, Y+
     58e:	0e 94 8c 02 	call	0x518	; 0x518 <dataWrite>
     592:	11 50       	subi	r17, 0x01	; 1
// writes character data to addr on LCD
void createChar(char addr, char arr[8]) {
  if(addr >= 8 || addr < 0) return;
  else if(addr < 8) {
    cmdWrite(0x40 + (addr * 8));
    for(char i = 0; i < 8 ; ++i)
     594:	d9 f7       	brne	.-10     	; 0x58c <createChar+0x22>
      dataWrite(arr[i]);
  }
  cmdWrite(0x80);
     596:	80 e8       	ldi	r24, 0x80	; 128
     598:	0e 94 6f 02 	call	0x4de	; 0x4de <cmdWrite>
}
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	1f 91       	pop	r17
     5a2:	0f 91       	pop	r16
     5a4:	08 95       	ret

000005a6 <write>:

// Printing functions do not handle overflow on a row
// Print used to address by ASCII value
void write(char ascii) {
  dataWrite(ascii);
     5a6:	0e 94 8c 02 	call	0x518	; 0x518 <dataWrite>
}
     5aa:	08 95       	ret

000005ac <print>:

// Print for cstrings
void print(char str[]) {
     5ac:	0f 93       	push	r16
     5ae:	1f 93       	push	r17
     5b0:	cf 93       	push	r28
     5b2:	8c 01       	movw	r16, r24
  for(char i = 0; str[i] != '\0'; ++i)
     5b4:	fc 01       	movw	r30, r24
     5b6:	80 81       	ld	r24, Z
     5b8:	88 23       	and	r24, r24
     5ba:	51 f0       	breq	.+20     	; 0x5d0 <print+0x24>
     5bc:	c0 e0       	ldi	r28, 0x00	; 0
    dataWrite(str[i]);
     5be:	0e 94 8c 02 	call	0x518	; 0x518 <dataWrite>
  dataWrite(ascii);
}

// Print for cstrings
void print(char str[]) {
  for(char i = 0; str[i] != '\0'; ++i)
     5c2:	cf 5f       	subi	r28, 0xFF	; 255
     5c4:	f8 01       	movw	r30, r16
     5c6:	ec 0f       	add	r30, r28
     5c8:	f1 1d       	adc	r31, r1
     5ca:	80 81       	ld	r24, Z
     5cc:	88 23       	and	r24, r24
     5ce:	b9 f7       	brne	.-18     	; 0x5be <print+0x12>
    dataWrite(str[i]);
}
     5d0:	cf 91       	pop	r28
     5d2:	1f 91       	pop	r17
     5d4:	0f 91       	pop	r16
     5d6:	08 95       	ret

000005d8 <initLCD>:

// Turns on the LCD, assumes you waited before calling this
void initLCD() {
  cmdWrite(0x38); // Fn Set
     5d8:	88 e3       	ldi	r24, 0x38	; 56
     5da:	0e 94 6f 02 	call	0x4de	; 0x4de <cmdWrite>
  cmdWrite(0x06); // Shift right
     5de:	86 e0       	ldi	r24, 0x06	; 6
     5e0:	0e 94 6f 02 	call	0x4de	; 0x4de <cmdWrite>
  cmdWrite(0x0C); // Disp on, cursor off, blink off
     5e4:	8c e0       	ldi	r24, 0x0C	; 12
     5e6:	0e 94 6f 02 	call	0x4de	; 0x4de <cmdWrite>
  cmdWrite(0x01); // Clear
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	0e 94 6f 02 	call	0x4de	; 0x4de <cmdWrite>
}
     5f0:	08 95       	ret

000005f2 <clearByte>:

//============================================================================================================================================

// Sets an entire byte array to 0
void clearByte( char arr[8] ) {
  for (int i = 0; i < 8; ++i)
     5f2:	e8 2f       	mov	r30, r24
     5f4:	f9 2f       	mov	r31, r25
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	90 e0       	ldi	r25, 0x00	; 0
    arr[i] = 0;
     5fa:	11 92       	st	Z+, r1

//============================================================================================================================================

// Sets an entire byte array to 0
void clearByte( char arr[8] ) {
  for (int i = 0; i < 8; ++i)
     5fc:	01 96       	adiw	r24, 0x01	; 1
     5fe:	88 30       	cpi	r24, 0x08	; 8
     600:	91 05       	cpc	r25, r1
     602:	d9 f7       	brne	.-10     	; 0x5fa <clearByte+0x8>
    arr[i] = 0;
  return;
}
     604:	08 95       	ret

00000606 <initObjs>:

// Sets all objs to not exist and empties out the field storage
void initObjs() {
     606:	0f 93       	push	r16
     608:	1f 93       	push	r17
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	e3 e8       	ldi	r30, 0x83	; 131
     610:	f1 e0       	ldi	r31, 0x01	; 1
     612:	83 e1       	ldi	r24, 0x13	; 19
     614:	98 e0       	ldi	r25, 0x08	; 8
  for (char i = 0; i < NUM_OBJ; ++i) 
    objs[i].exist = false;
     616:	10 82       	st	Z, r1
     618:	3e 96       	adiw	r30, 0x0e	; 14
  return;
}

// Sets all objs to not exist and empties out the field storage
void initObjs() {
  for (char i = 0; i < NUM_OBJ; ++i) 
     61a:	e8 17       	cp	r30, r24
     61c:	f9 07       	cpc	r31, r25
     61e:	d9 f7       	brne	.-10     	; 0x616 <initObjs+0x10>
     620:	c3 e4       	ldi	r28, 0x43	; 67
     622:	d1 e0       	ldi	r29, 0x01	; 1
    arr[i] = 0;
  return;
}

// Sets all objs to not exist and empties out the field storage
void initObjs() {
     624:	03 e8       	ldi	r16, 0x83	; 131
     626:	11 e0       	ldi	r17, 0x01	; 1
  for (char i = 0; i < NUM_OBJ; ++i) 
    objs[i].exist = false;
  for(char i = 0; i < COL_SPACE; ++i) 
    for(char j = 0; j < ROW_SPACE; ++j) 
      clearByte(field[i][j]);
     628:	ce 01       	movw	r24, r28
     62a:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <clearByte>
     62e:	28 96       	adiw	r28, 0x08	; 8

// Sets all objs to not exist and empties out the field storage
void initObjs() {
  for (char i = 0; i < NUM_OBJ; ++i) 
    objs[i].exist = false;
  for(char i = 0; i < COL_SPACE; ++i) 
     630:	c0 17       	cp	r28, r16
     632:	d1 07       	cpc	r29, r17
     634:	c9 f7       	brne	.-14     	; 0x628 <initObjs+0x22>
    for(char j = 0; j < ROW_SPACE; ++j) 
      clearByte(field[i][j]);
}
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	1f 91       	pop	r17
     63c:	0f 91       	pop	r16
     63e:	08 95       	ret

00000640 <initPlayers>:

// Sets initial stats of players
void initPlayers() {
  P1.who = 1;
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	80 93 0f 01 	sts	0x010F, r24
  P1.aimX = 1;
     646:	80 93 11 01 	sts	0x0111, r24
  P1.aimY = 0;
     64a:	10 92 12 01 	sts	0x0112, r1
  P1.pos[0] = 1;
     64e:	80 93 13 01 	sts	0x0113, r24
  P1.pos[1] = 4;
     652:	24 e0       	ldi	r18, 0x04	; 4
     654:	20 93 14 01 	sts	0x0114, r18
  P1.pos[2] = 7;
     658:	97 e0       	ldi	r25, 0x07	; 7
     65a:	90 93 15 01 	sts	0x0115, r25
  P1.pos[3] = ROW_SPACE - 1;
     65e:	10 92 16 01 	sts	0x0116, r1
  P1.life = LIVES;
  P1.period = PL_PER;
     662:	90 93 1d 01 	sts	0x011D, r25
  P1.elapsedTime = PL_PER;
     666:	90 93 1e 01 	sts	0x011E, r25
  P1.invul = 50;
     66a:	42 e3       	ldi	r20, 0x32	; 50
     66c:	40 93 19 01 	sts	0x0119, r20
  P1.cooldown = 0;
     670:	10 92 1b 01 	sts	0x011B, r1
  P1.equip = 0;
     674:	10 92 1f 01 	sts	0x011F, r1

  P2.who = 2;
     678:	82 e0       	ldi	r24, 0x02	; 2
     67a:	80 93 29 01 	sts	0x0129, r24
  P2.aimX = -1;
     67e:	3f ef       	ldi	r19, 0xFF	; 255
     680:	30 93 2b 01 	sts	0x012B, r19
  P2.aimY = 0;
     684:	10 92 2c 01 	sts	0x012C, r1
  P2.pos[0] = COL_SPACE-2;
     688:	66 e0       	ldi	r22, 0x06	; 6
     68a:	60 93 2d 01 	sts	0x012D, r22
  P2.pos[1] = 0;
     68e:	10 92 2e 01 	sts	0x012E, r1
  P2.pos[2] = 7;
     692:	90 93 2f 01 	sts	0x012F, r25
  P2.pos[3] = ROW_SPACE - 1;
     696:	10 92 30 01 	sts	0x0130, r1
  P2.life = LIVES;
  P2.period = PL_PER;
     69a:	90 93 37 01 	sts	0x0137, r25
  P2.elapsedTime = PL_PER;
     69e:	90 93 38 01 	sts	0x0138, r25
  P2.invul = 50;
     6a2:	40 93 33 01 	sts	0x0133, r20
  P2.cooldown = 0;
     6a6:	10 92 35 01 	sts	0x0135, r1
  P2.equip = 0;
     6aa:	10 92 39 01 	sts	0x0139, r1
  P2.inven[5] = 0;
  P2.inven[6] = 1;
  P2.inven[7] = 0;  
  */
  ///* High Ammo
  P1.life = 11;
     6ae:	9b e0       	ldi	r25, 0x0B	; 11
     6b0:	90 93 1c 01 	sts	0x011C, r25
  P2.life = 11;
     6b4:	90 93 36 01 	sts	0x0136, r25
  P1.inven[0] = -1;
     6b8:	30 93 20 01 	sts	0x0120, r19
  P1.inven[1] = 8;
     6bc:	58 e0       	ldi	r21, 0x08	; 8
     6be:	50 93 21 01 	sts	0x0121, r21
  P1.inven[2] = 2;
     6c2:	80 93 22 01 	sts	0x0122, r24
  P1.inven[3] = 5;
     6c6:	45 e0       	ldi	r20, 0x05	; 5
     6c8:	40 93 23 01 	sts	0x0123, r20
  P1.inven[4] = 6;
     6cc:	60 93 24 01 	sts	0x0124, r22
  P1.inven[5] = 15;
     6d0:	9f e0       	ldi	r25, 0x0F	; 15
     6d2:	90 93 25 01 	sts	0x0125, r25
  P1.inven[6] = 4;
     6d6:	20 93 26 01 	sts	0x0126, r18
  P1.inven[7] = 2;
     6da:	80 93 27 01 	sts	0x0127, r24

  P2.inven[0] = -1;
     6de:	30 93 3a 01 	sts	0x013A, r19
  P2.inven[1] = 8;
     6e2:	50 93 3b 01 	sts	0x013B, r21
  P2.inven[2] = 2;
     6e6:	80 93 3c 01 	sts	0x013C, r24
  P2.inven[3] = 5;
     6ea:	40 93 3d 01 	sts	0x013D, r20
  P2.inven[4] = 2;
     6ee:	80 93 3e 01 	sts	0x013E, r24
  P2.inven[5] = 15;
     6f2:	90 93 3f 01 	sts	0x013F, r25
  P2.inven[6] = 4;
     6f6:	20 93 40 01 	sts	0x0140, r18
  P2.inven[7] = 2;  
     6fa:	80 93 41 01 	sts	0x0141, r24
  P2.inven[4] = -1;
  P2.inven[5] = -1;
  P2.inven[6] = -1;
  P2.inven[7] = -1; 
  //*/
}
     6fe:	08 95       	ret

00000700 <cBinary>:

// converts integer value to binary
char cBinary( char i ) {
  switch(i) {
     700:	82 30       	cpi	r24, 0x02	; 2
     702:	71 f0       	breq	.+28     	; 0x720 <cBinary+0x20>
     704:	83 30       	cpi	r24, 0x03	; 3
     706:	28 f4       	brcc	.+10     	; 0x712 <cBinary+0x12>
     708:	88 23       	and	r24, r24
     70a:	41 f0       	breq	.+16     	; 0x71c <cBinary+0x1c>
     70c:	81 30       	cpi	r24, 0x01	; 1
     70e:	71 f4       	brne	.+28     	; 0x72c <cBinary+0x2c>
     710:	0f c0       	rjmp	.+30     	; 0x730 <cBinary+0x30>
     712:	83 30       	cpi	r24, 0x03	; 3
     714:	39 f0       	breq	.+14     	; 0x724 <cBinary+0x24>
     716:	84 30       	cpi	r24, 0x04	; 4
     718:	49 f4       	brne	.+18     	; 0x72c <cBinary+0x2c>
     71a:	06 c0       	rjmp	.+12     	; 0x728 <cBinary+0x28>
    case 0: return 0b1;
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	08 95       	ret
    case 1: return 0b10;
    case 2: return 0b100;
     720:	84 e0       	ldi	r24, 0x04	; 4
     722:	08 95       	ret
    case 3: return 0b1000;
     724:	88 e0       	ldi	r24, 0x08	; 8
     726:	08 95       	ret
    case 4: return 0b10000;
     728:	80 e1       	ldi	r24, 0x10	; 16
     72a:	08 95       	ret
    default: return 0b0; 
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	08 95       	ret

// converts integer value to binary
char cBinary( char i ) {
  switch(i) {
    case 0: return 0b1;
    case 1: return 0b10;
     730:	82 e0       	ldi	r24, 0x02	; 2
    case 2: return 0b100;
    case 3: return 0b1000;
    case 4: return 0b10000;
    default: return 0b0; 
  }
}
     732:	08 95       	ret

00000734 <setPixel>:

// Draw obj/player on field
void setPixel( obj *item ) { 
     734:	0f 93       	push	r16
     736:	1f 93       	push	r17
     738:	cf 93       	push	r28
     73a:	fc 01       	movw	r30, r24
  field[(*item).pos[0]][(*item).pos[3]][(*item).pos[2]] = field[(*item).pos[0]][(*item).pos[3]][(*item).pos[2]] | cBinary((*item).pos[1]);
     73c:	04 81       	ldd	r16, Z+4	; 0x04
     73e:	11 27       	eor	r17, r17
     740:	07 fd       	sbrc	r16, 7
     742:	10 95       	com	r17
     744:	87 81       	ldd	r24, Z+7	; 0x07
     746:	99 27       	eor	r25, r25
     748:	87 fd       	sbrc	r24, 7
     74a:	90 95       	com	r25
     74c:	26 81       	ldd	r18, Z+6	; 0x06
     74e:	33 27       	eor	r19, r19
     750:	27 fd       	sbrc	r18, 7
     752:	30 95       	com	r19
     754:	08 0f       	add	r16, r24
     756:	19 1f       	adc	r17, r25
     758:	00 0f       	add	r16, r16
     75a:	11 1f       	adc	r17, r17
     75c:	00 0f       	add	r16, r16
     75e:	11 1f       	adc	r17, r17
     760:	00 0f       	add	r16, r16
     762:	11 1f       	adc	r17, r17
     764:	02 0f       	add	r16, r18
     766:	13 1f       	adc	r17, r19
     768:	0d 5b       	subi	r16, 0xBD	; 189
     76a:	1e 4f       	sbci	r17, 0xFE	; 254
     76c:	d8 01       	movw	r26, r16
     76e:	cc 91       	ld	r28, X
     770:	85 81       	ldd	r24, Z+5	; 0x05
     772:	0e 94 80 03 	call	0x700	; 0x700 <cBinary>
     776:	8c 2b       	or	r24, r28
     778:	f8 01       	movw	r30, r16
     77a:	80 83       	st	Z, r24
}
     77c:	cf 91       	pop	r28
     77e:	1f 91       	pop	r17
     780:	0f 91       	pop	r16
     782:	08 95       	ret

00000784 <setPixelP>:
void setPixelP( player *item ) { 
     784:	0f 93       	push	r16
     786:	1f 93       	push	r17
     788:	cf 93       	push	r28
     78a:	fc 01       	movw	r30, r24
  field[(*item).pos[0]][(*item).pos[3]][(*item).pos[2]] = field[(*item).pos[0]][(*item).pos[3]][(*item).pos[2]] | cBinary((*item).pos[1]);
     78c:	04 81       	ldd	r16, Z+4	; 0x04
     78e:	11 27       	eor	r17, r17
     790:	07 fd       	sbrc	r16, 7
     792:	10 95       	com	r17
     794:	87 81       	ldd	r24, Z+7	; 0x07
     796:	99 27       	eor	r25, r25
     798:	87 fd       	sbrc	r24, 7
     79a:	90 95       	com	r25
     79c:	26 81       	ldd	r18, Z+6	; 0x06
     79e:	33 27       	eor	r19, r19
     7a0:	27 fd       	sbrc	r18, 7
     7a2:	30 95       	com	r19
     7a4:	08 0f       	add	r16, r24
     7a6:	19 1f       	adc	r17, r25
     7a8:	00 0f       	add	r16, r16
     7aa:	11 1f       	adc	r17, r17
     7ac:	00 0f       	add	r16, r16
     7ae:	11 1f       	adc	r17, r17
     7b0:	00 0f       	add	r16, r16
     7b2:	11 1f       	adc	r17, r17
     7b4:	02 0f       	add	r16, r18
     7b6:	13 1f       	adc	r17, r19
     7b8:	0d 5b       	subi	r16, 0xBD	; 189
     7ba:	1e 4f       	sbci	r17, 0xFE	; 254
     7bc:	d8 01       	movw	r26, r16
     7be:	cc 91       	ld	r28, X
     7c0:	85 81       	ldd	r24, Z+5	; 0x05
     7c2:	0e 94 80 03 	call	0x700	; 0x700 <cBinary>
     7c6:	8c 2b       	or	r24, r28
     7c8:	f8 01       	movw	r30, r16
     7ca:	80 83       	st	Z, r24
}
     7cc:	cf 91       	pop	r28
     7ce:	1f 91       	pop	r17
     7d0:	0f 91       	pop	r16
     7d2:	08 95       	ret

000007d4 <calcNext>:

// Recalculates obj's position based on velocity, also handles wall collision and var jump
void calcNext( obj *item ) { 
     7d4:	fc 01       	movw	r30, r24
  if((*item).jump == -1) {}
     7d6:	82 85       	ldd	r24, Z+10	; 0x0a
     7d8:	8f 3f       	cpi	r24, 0xFF	; 255
     7da:	59 f0       	breq	.+22     	; 0x7f2 <calcNext+0x1e>
  else if((*item).jump > 0) {
     7dc:	18 16       	cp	r1, r24
     7de:	2c f4       	brge	.+10     	; 0x7ea <calcNext+0x16>
    (*item).next[1] = 1;
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	91 87       	std	Z+9, r25	; 0x09
    (*item).jump--;
     7e4:	81 50       	subi	r24, 0x01	; 1
     7e6:	82 87       	std	Z+10, r24	; 0x0a
     7e8:	04 c0       	rjmp	.+8      	; 0x7f2 <calcNext+0x1e>
  } else if((*item).jump == 0)
     7ea:	88 23       	and	r24, r24
     7ec:	11 f4       	brne	.+4      	; 0x7f2 <calcNext+0x1e>
    (*item).next[1] = -1;
     7ee:	8f ef       	ldi	r24, 0xFF	; 255
     7f0:	81 87       	std	Z+9, r24	; 0x09

  signed char newX = (*item).pos[1] - (*item).next[0];
     7f2:	85 81       	ldd	r24, Z+5	; 0x05
     7f4:	90 85       	ldd	r25, Z+8	; 0x08
     7f6:	89 1b       	sub	r24, r25
  if(newX > 4) { // if X greater than character limit, set prev(left) character space
     7f8:	85 30       	cpi	r24, 0x05	; 5
     7fa:	cc f0       	brlt	.+50     	; 0x82e <calcNext+0x5a>
    (*item).pos[0]--;
     7fc:	94 81       	ldd	r25, Z+4	; 0x04
     7fe:	91 50       	subi	r25, 0x01	; 1
     800:	94 83       	std	Z+4, r25	; 0x04
    if((*item).pos[0] <= -1) { // Collided with left wall
     802:	99 23       	and	r25, r25
     804:	8c f4       	brge	.+34     	; 0x828 <calcNext+0x54>
      if(((*item).type == 3 || (*item).type == 4) && (*item).who != 4) { // Cluster bomb bounce
     806:	82 81       	ldd	r24, Z+2	; 0x02
     808:	83 50       	subi	r24, 0x03	; 3
     80a:	82 30       	cpi	r24, 0x02	; 2
     80c:	38 f4       	brcc	.+14     	; 0x81c <calcNext+0x48>
     80e:	83 81       	ldd	r24, Z+3	; 0x03
     810:	84 30       	cpi	r24, 0x04	; 4
     812:	21 f0       	breq	.+8      	; 0x81c <calcNext+0x48>
        (*item).collide = false;
     814:	11 82       	std	Z+1, r1	; 0x01
        (*item).next[0] = 1;
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	80 87       	std	Z+8, r24	; 0x08
     81a:	02 c0       	rjmp	.+4      	; 0x820 <calcNext+0x4c>
      } else
      (*item).collide = true;
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	81 83       	std	Z+1, r24	; 0x01
      (*item).pos[0] = 0;
     820:	14 82       	std	Z+4, r1	; 0x04
      (*item).pos[1] = 4;
     822:	84 e0       	ldi	r24, 0x04	; 4
     824:	85 83       	std	Z+5, r24	; 0x05
     826:	1f c0       	rjmp	.+62     	; 0x866 <__stack+0x7>
    } else
      (*item).pos[1] = newX - 5; // Assumes you will never cross two characters at once
     828:	85 50       	subi	r24, 0x05	; 5
     82a:	85 83       	std	Z+5, r24	; 0x05
     82c:	1c c0       	rjmp	.+56     	; 0x866 <__stack+0x7>
  } else if(newX < 0) { // if X less than character limit, go to next(right) character space
     82e:	88 23       	and	r24, r24
     830:	cc f4       	brge	.+50     	; 0x864 <__stack+0x5>
    (*item).pos[0]++;
     832:	94 81       	ldd	r25, Z+4	; 0x04
     834:	9f 5f       	subi	r25, 0xFF	; 255
     836:	94 83       	std	Z+4, r25	; 0x04
    if((*item).pos[0] >= COL_SPACE) { // Collided with right wall
     838:	98 30       	cpi	r25, 0x08	; 8
     83a:	8c f0       	brlt	.+34     	; 0x85e <calcNext+0x8a>
      if(((*item).type == 3 || (*item).type == 4) && (*item).who != 4) { // Cluster bomb bounce
     83c:	82 81       	ldd	r24, Z+2	; 0x02
     83e:	83 50       	subi	r24, 0x03	; 3
     840:	82 30       	cpi	r24, 0x02	; 2
     842:	38 f4       	brcc	.+14     	; 0x852 <calcNext+0x7e>
     844:	83 81       	ldd	r24, Z+3	; 0x03
     846:	84 30       	cpi	r24, 0x04	; 4
     848:	21 f0       	breq	.+8      	; 0x852 <calcNext+0x7e>
        (*item).collide = false;
     84a:	11 82       	std	Z+1, r1	; 0x01
        (*item).next[0] = -1;
     84c:	8f ef       	ldi	r24, 0xFF	; 255
     84e:	80 87       	std	Z+8, r24	; 0x08
     850:	02 c0       	rjmp	.+4      	; 0x856 <calcNext+0x82>
      } else
        (*item).collide = true;
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	81 83       	std	Z+1, r24	; 0x01
      (*item).pos[0] = COL_SPACE - 1;
     856:	87 e0       	ldi	r24, 0x07	; 7
     858:	84 83       	std	Z+4, r24	; 0x04
      (*item).pos[1] = 0;
     85a:	15 82       	std	Z+5, r1	; 0x05
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
    } else
      (*item).pos[1] = newX + 5; // Assumes you will never cross two characters at once
     85e:	8b 5f       	subi	r24, 0xFB	; 251
     860:	85 83       	std	Z+5, r24	; 0x05
     862:	01 c0       	rjmp	.+2      	; 0x866 <__stack+0x7>
  } else // else still in same character space
    (*item).pos[1] = newX;
     864:	85 83       	std	Z+5, r24	; 0x05
  
  signed char newY = (*item).pos[2] - (*item).next[1]; // Rows count up when moving down
     866:	86 81       	ldd	r24, Z+6	; 0x06
     868:	91 85       	ldd	r25, Z+9	; 0x09
     86a:	89 1b       	sub	r24, r25
  if(newY < 0) { // if Y greater than character limit, move up a character
     86c:	ba f4       	brpl	.+46     	; 0x89c <__stack+0x3d>
    (*item).pos[3]--;
     86e:	97 81       	ldd	r25, Z+7	; 0x07
     870:	91 50       	subi	r25, 0x01	; 1
     872:	97 83       	std	Z+7, r25	; 0x07
    if((*item).pos[3] == -1) { // ceiling collide
     874:	9f 3f       	cpi	r25, 0xFF	; 255
     876:	79 f4       	brne	.+30     	; 0x896 <__stack+0x37>
      if(((*item).type == 3 || (*item).type == 4) && (*item).who != 4) { // Cluster bomb bounce
     878:	82 81       	ldd	r24, Z+2	; 0x02
     87a:	83 50       	subi	r24, 0x03	; 3
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	30 f4       	brcc	.+12     	; 0x88c <__stack+0x2d>
     880:	83 81       	ldd	r24, Z+3	; 0x03
     882:	84 30       	cpi	r24, 0x04	; 4
     884:	19 f0       	breq	.+6      	; 0x88c <__stack+0x2d>
        (*item).collide = false;
     886:	11 82       	std	Z+1, r1	; 0x01
        (*item).jump = 0;
     888:	12 86       	std	Z+10, r1	; 0x0a
     88a:	02 c0       	rjmp	.+4      	; 0x890 <__stack+0x31>
      } else
        (*item).collide = true;
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	81 83       	std	Z+1, r24	; 0x01
      (*item).pos[2] = 0;
     890:	16 82       	std	Z+6, r1	; 0x06
      (*item).pos[3] = 0;
     892:	17 82       	std	Z+7, r1	; 0x07
     894:	08 95       	ret
    } else
      (*item).pos[2] = newY + 8;
     896:	88 5f       	subi	r24, 0xF8	; 248
     898:	86 83       	std	Z+6, r24	; 0x06
     89a:	08 95       	ret
  } else if(newY > 7) { // if Y greater than character limit, collided with floor wall
     89c:	88 30       	cpi	r24, 0x08	; 8
     89e:	cc f0       	brlt	.+50     	; 0x8d2 <__stack+0x73>
    (*item).pos[3]++;
     8a0:	97 81       	ldd	r25, Z+7	; 0x07
     8a2:	9f 5f       	subi	r25, 0xFF	; 255
     8a4:	97 83       	std	Z+7, r25	; 0x07
    if((*item).pos[3] == ROW_SPACE) { //floor collide
     8a6:	91 30       	cpi	r25, 0x01	; 1
     8a8:	89 f4       	brne	.+34     	; 0x8cc <__stack+0x6d>
      if(((*item).type == 3 || (*item).type == 4) && (*item).who != 4) { // Cluster bomb bounce
     8aa:	82 81       	ldd	r24, Z+2	; 0x02
     8ac:	83 50       	subi	r24, 0x03	; 3
     8ae:	82 30       	cpi	r24, 0x02	; 2
     8b0:	38 f4       	brcc	.+14     	; 0x8c0 <__stack+0x61>
     8b2:	83 81       	ldd	r24, Z+3	; 0x03
     8b4:	84 30       	cpi	r24, 0x04	; 4
     8b6:	21 f0       	breq	.+8      	; 0x8c0 <__stack+0x61>
        (*item).collide = false;
     8b8:	11 82       	std	Z+1, r1	; 0x01
        (*item).jump = 3;
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	82 87       	std	Z+10, r24	; 0x0a
     8be:	02 c0       	rjmp	.+4      	; 0x8c4 <__stack+0x65>
      } else
        (*item).collide = true;
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	81 83       	std	Z+1, r24	; 0x01
      (*item).pos[2] = 7;
     8c4:	87 e0       	ldi	r24, 0x07	; 7
     8c6:	86 83       	std	Z+6, r24	; 0x06
      (*item).pos[3] = ROW_SPACE-1;
     8c8:	17 82       	std	Z+7, r1	; 0x07
     8ca:	08 95       	ret
    } else
      (*item).pos[2] = newY - 8;
     8cc:	88 50       	subi	r24, 0x08	; 8
     8ce:	86 83       	std	Z+6, r24	; 0x06
     8d0:	08 95       	ret
  } else 
    (*item).pos[2] = newY;
     8d2:	86 83       	std	Z+6, r24	; 0x06
     8d4:	08 95       	ret

000008d6 <calcNextP>:
}

// Recalculates players's position based on velocity, also handles wall collision
void calcNextP( player *item ) { 
     8d6:	fc 01       	movw	r30, r24
  signed char newX = (*item).pos[1] - (*item).next[0];
     8d8:	85 81       	ldd	r24, Z+5	; 0x05
     8da:	90 85       	ldd	r25, Z+8	; 0x08
     8dc:	89 1b       	sub	r24, r25
  if(newX > 4) { // if X greater than character limit, set prev(left) character space
     8de:	85 30       	cpi	r24, 0x05	; 5
     8e0:	64 f0       	brlt	.+24     	; 0x8fa <calcNextP+0x24>
    (*item).pos[0]--;
     8e2:	94 81       	ldd	r25, Z+4	; 0x04
     8e4:	91 50       	subi	r25, 0x01	; 1
     8e6:	94 83       	std	Z+4, r25	; 0x04
    if((*item).pos[0] <= -1) { // Collided with left wall
     8e8:	99 23       	and	r25, r25
     8ea:	24 f4       	brge	.+8      	; 0x8f4 <calcNextP+0x1e>
      (*item).pos[0] = 0;
     8ec:	14 82       	std	Z+4, r1	; 0x04
      (*item).pos[1] = 4;
     8ee:	84 e0       	ldi	r24, 0x04	; 4
     8f0:	85 83       	std	Z+5, r24	; 0x05
     8f2:	12 c0       	rjmp	.+36     	; 0x918 <calcNextP+0x42>
    } else
      (*item).pos[1] = newX - 5; // Assumes you will never cross two characters at once
     8f4:	85 50       	subi	r24, 0x05	; 5
     8f6:	85 83       	std	Z+5, r24	; 0x05
     8f8:	0f c0       	rjmp	.+30     	; 0x918 <calcNextP+0x42>
  } else if(newX < 0) { // if X less than character limit, go to next(right) character space
     8fa:	88 23       	and	r24, r24
     8fc:	64 f4       	brge	.+24     	; 0x916 <calcNextP+0x40>
    (*item).pos[0]++;
     8fe:	94 81       	ldd	r25, Z+4	; 0x04
     900:	9f 5f       	subi	r25, 0xFF	; 255
     902:	94 83       	std	Z+4, r25	; 0x04
    if((*item).pos[0] >= COL_SPACE) { // Collided with right wall
     904:	98 30       	cpi	r25, 0x08	; 8
     906:	24 f0       	brlt	.+8      	; 0x910 <calcNextP+0x3a>
      (*item).pos[0] = COL_SPACE - 1;
     908:	87 e0       	ldi	r24, 0x07	; 7
     90a:	84 83       	std	Z+4, r24	; 0x04
      (*item).pos[1] = 0;
     90c:	15 82       	std	Z+5, r1	; 0x05
     90e:	04 c0       	rjmp	.+8      	; 0x918 <calcNextP+0x42>
    } else
      (*item).pos[1] = newX + 5; // Assumes you will never cross two characters at once
     910:	8b 5f       	subi	r24, 0xFB	; 251
     912:	85 83       	std	Z+5, r24	; 0x05
     914:	01 c0       	rjmp	.+2      	; 0x918 <calcNextP+0x42>
  } else // else still in same character space
    (*item).pos[1] = newX;
     916:	85 83       	std	Z+5, r24	; 0x05
  
  signed char newY = (*item).pos[2] - (*item).next[1]; // Rows count up when moving down
     918:	86 81       	ldd	r24, Z+6	; 0x06
     91a:	91 85       	ldd	r25, Z+9	; 0x09
     91c:	89 1b       	sub	r24, r25
  if(newY < 0) { // if Y greater than character limit, move up a character
     91e:	5a f4       	brpl	.+22     	; 0x936 <calcNextP+0x60>
    (*item).pos[3]--;
     920:	97 81       	ldd	r25, Z+7	; 0x07
     922:	91 50       	subi	r25, 0x01	; 1
     924:	97 83       	std	Z+7, r25	; 0x07
    if((*item).pos[3] == -1) { 
     926:	9f 3f       	cpi	r25, 0xFF	; 255
     928:	19 f4       	brne	.+6      	; 0x930 <calcNextP+0x5a>
      (*item).pos[2] = 0;
     92a:	16 82       	std	Z+6, r1	; 0x06
      (*item).pos[3] = 0;
     92c:	17 82       	std	Z+7, r1	; 0x07
     92e:	08 95       	ret
    } else
      (*item).pos[2] = newY + 8;
     930:	88 5f       	subi	r24, 0xF8	; 248
     932:	86 83       	std	Z+6, r24	; 0x06
     934:	08 95       	ret
  } else if(newY > 7) { // if Y greater than character limit, collided with floor wall
     936:	88 30       	cpi	r24, 0x08	; 8
     938:	64 f0       	brlt	.+24     	; 0x952 <calcNextP+0x7c>
    (*item).pos[3]++;
     93a:	97 81       	ldd	r25, Z+7	; 0x07
     93c:	9f 5f       	subi	r25, 0xFF	; 255
     93e:	97 83       	std	Z+7, r25	; 0x07
    if((*item).pos[3] == ROW_SPACE) { 
     940:	91 30       	cpi	r25, 0x01	; 1
     942:	21 f4       	brne	.+8      	; 0x94c <calcNextP+0x76>
      (*item).pos[2] = 7;
     944:	87 e0       	ldi	r24, 0x07	; 7
     946:	86 83       	std	Z+6, r24	; 0x06
      (*item).pos[3] = ROW_SPACE-1;
     948:	17 82       	std	Z+7, r1	; 0x07
     94a:	08 95       	ret
    } else
      (*item).pos[2] = newY - 8;
     94c:	88 50       	subi	r24, 0x08	; 8
     94e:	86 83       	std	Z+6, r24	; 0x06
     950:	08 95       	ret
  } else 
    (*item).pos[2] = newY;
     952:	86 83       	std	Z+6, r24	; 0x06
     954:	08 95       	ret

00000956 <getNewObj>:
}

// gets index of unallocated obj
char getNewObj() {
  char i;
  for( i = 0; i < NUM_OBJ && objs[i].exist == true; ++i) {} // Find first obj not in use
     956:	80 91 83 01 	lds	r24, 0x0183
     95a:	81 30       	cpi	r24, 0x01	; 1
     95c:	69 f4       	brne	.+26     	; 0x978 <getNewObj+0x22>
     95e:	e1 e9       	ldi	r30, 0x91	; 145
     960:	f1 e0       	ldi	r31, 0x01	; 1
     962:	04 c0       	rjmp	.+8      	; 0x96c <getNewObj+0x16>
     964:	8f 5f       	subi	r24, 0xFF	; 255
     966:	3e 96       	adiw	r30, 0x0e	; 14
     968:	88 37       	cpi	r24, 0x78	; 120
     96a:	41 f0       	breq	.+16     	; 0x97c <getNewObj+0x26>
     96c:	90 81       	ld	r25, Z
     96e:	91 30       	cpi	r25, 0x01	; 1
     970:	c9 f3       	breq	.-14     	; 0x964 <getNewObj+0xe>
  if( i == NUM_OBJ ) return -1; // Ran out of allocable objs, don't do anything
     972:	88 37       	cpi	r24, 0x78	; 120
     974:	31 f4       	brne	.+12     	; 0x982 <getNewObj+0x2c>
     976:	04 c0       	rjmp	.+8      	; 0x980 <getNewObj+0x2a>
}

// gets index of unallocated obj
char getNewObj() {
  char i;
  for( i = 0; i < NUM_OBJ && objs[i].exist == true; ++i) {} // Find first obj not in use
     978:	80 e0       	ldi	r24, 0x00	; 0
  if( i == NUM_OBJ ) return -1; // Ran out of allocable objs, don't do anything
  return i;
     97a:	08 95       	ret

// gets index of unallocated obj
char getNewObj() {
  char i;
  for( i = 0; i < NUM_OBJ && objs[i].exist == true; ++i) {} // Find first obj not in use
  if( i == NUM_OBJ ) return -1; // Ran out of allocable objs, don't do anything
     97c:	8f ef       	ldi	r24, 0xFF	; 255
     97e:	08 95       	ret
     980:	8f ef       	ldi	r24, 0xFF	; 255
  return i;
}
     982:	08 95       	ret

00000984 <explosion>:

// generate explosion
void explosion( obj *item, char radius ) {
     984:	2f 92       	push	r2
     986:	3f 92       	push	r3
     988:	4f 92       	push	r4
     98a:	5f 92       	push	r5
     98c:	6f 92       	push	r6
     98e:	7f 92       	push	r7
     990:	8f 92       	push	r8
     992:	9f 92       	push	r9
     994:	af 92       	push	r10
     996:	bf 92       	push	r11
     998:	cf 92       	push	r12
     99a:	df 92       	push	r13
     99c:	ef 92       	push	r14
     99e:	ff 92       	push	r15
     9a0:	0f 93       	push	r16
     9a2:	1f 93       	push	r17
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	cd b7       	in	r28, 0x3d	; 61
     9aa:	de b7       	in	r29, 0x3e	; 62
     9ac:	27 97       	sbiw	r28, 0x07	; 7
     9ae:	0f b6       	in	r0, 0x3f	; 63
     9b0:	f8 94       	cli
     9b2:	de bf       	out	0x3e, r29	; 62
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	cd bf       	out	0x3d, r28	; 61
     9b8:	7c 01       	movw	r14, r24
  for(signed char y = -1 * radius; y < radius + 1; ++y) {
     9ba:	46 2f       	mov	r20, r22
     9bc:	41 95       	neg	r20
     9be:	24 2f       	mov	r18, r20
     9c0:	33 27       	eor	r19, r19
     9c2:	27 fd       	sbrc	r18, 7
     9c4:	30 95       	com	r19
     9c6:	86 2f       	mov	r24, r22
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	2c 01       	movw	r4, r24
     9cc:	08 94       	sec
     9ce:	41 1c       	adc	r4, r1
     9d0:	51 1c       	adc	r5, r1
     9d2:	24 15       	cp	r18, r4
     9d4:	35 05       	cpc	r19, r5
     9d6:	0c f0       	brlt	.+2      	; 0x9da <explosion+0x56>
     9d8:	7b c1       	rjmp	.+758    	; 0xcd0 <explosion+0x34c>
    for(signed char x = -1 * radius; x < radius + 1; ++x) {
      char n = getNewObj();
      if( n == -1 ) return;
      if(y * x == (radius * radius) || x * y == -1 * ( radius * radius )) objs[n].exist = false;
     9da:	88 9f       	mul	r24, r24
     9dc:	10 01       	movw	r2, r0
     9de:	89 9f       	mul	r24, r25
     9e0:	30 0c       	add	r3, r0
     9e2:	98 9f       	mul	r25, r24
     9e4:	30 0c       	add	r3, r0
     9e6:	11 24       	eor	r1, r1
     9e8:	66 27       	eor	r22, r22
     9ea:	77 27       	eor	r23, r23
     9ec:	62 19       	sub	r22, r2
     9ee:	73 09       	sbc	r23, r3
     9f0:	7a 83       	std	Y+2, r23	; 0x02
     9f2:	69 83       	std	Y+1, r22	; 0x01
  return i;
}

// generate explosion
void explosion( obj *item, char radius ) {
  for(signed char y = -1 * radius; y < radius + 1; ++y) {
     9f4:	39 01       	movw	r6, r18
     9f6:	b4 2e       	mov	r11, r20
    for(signed char x = -1 * radius; x < radius + 1; ++x) {
     9f8:	2c 83       	std	Y+4, r18	; 0x04
     9fa:	3d 83       	std	Y+5, r19	; 0x05
     9fc:	4b 83       	std	Y+3, r20	; 0x03
      char n = getNewObj();
      if( n == -1 ) return;
      if(y * x == (radius * radius) || x * y == -1 * ( radius * radius )) objs[n].exist = false;
     9fe:	03 e8       	ldi	r16, 0x83	; 131
     a00:	11 e0       	ldi	r17, 0x01	; 1
      else objs[n].exist = true;
     a02:	88 24       	eor	r8, r8
     a04:	83 94       	inc	r8
      objs[n].collide = false;
      objs[n].who = (*item).who;
      objs[n].type = 0;
      objs[n].jump = -1;
     a06:	aa 24       	eor	r10, r10
     a08:	aa 94       	dec	r10
      objs[n].period = FIRE_PER;
     a0a:	cc 24       	eor	r12, r12
     a0c:	68 94       	set
     a0e:	c2 f8       	bld	r12, 2
      objs[n].elapsedTime = objs[n].period;
      objs[n].expire = FIRE_DUR;
     a10:	0f 2e       	mov	r0, r31
     a12:	f3 e0       	ldi	r31, 0x03	; 3
     a14:	9f 2e       	mov	r9, r31
     a16:	f0 2d       	mov	r31, r0
     a18:	55 c1       	rjmp	.+682    	; 0xcc4 <explosion+0x340>

// generate explosion
void explosion( obj *item, char radius ) {
  for(signed char y = -1 * radius; y < radius + 1; ++y) {
    for(signed char x = -1 * radius; x < radius + 1; ++x) {
      char n = getNewObj();
     a1a:	0e 94 ab 04 	call	0x956	; 0x956 <getNewObj>
     a1e:	58 2f       	mov	r21, r24
      if( n == -1 ) return;
      if(y * x == (radius * radius) || x * y == -1 * ( radius * radius )) objs[n].exist = false;
     a20:	ee 81       	ldd	r30, Y+6	; 0x06
     a22:	ff 81       	ldd	r31, Y+7	; 0x07
     a24:	6e 9e       	mul	r6, r30
     a26:	c0 01       	movw	r24, r0
     a28:	6f 9e       	mul	r6, r31
     a2a:	90 0d       	add	r25, r0
     a2c:	7e 9e       	mul	r7, r30
     a2e:	90 0d       	add	r25, r0
     a30:	11 24       	eor	r1, r1
     a32:	82 15       	cp	r24, r2
     a34:	93 05       	cpc	r25, r3
     a36:	29 f0       	breq	.+10     	; 0xa42 <explosion+0xbe>
     a38:	29 81       	ldd	r18, Y+1	; 0x01
     a3a:	3a 81       	ldd	r19, Y+2	; 0x02
     a3c:	82 17       	cp	r24, r18
     a3e:	93 07       	cpc	r25, r19
     a40:	a1 f4       	brne	.+40     	; 0xa6a <explosion+0xe6>
     a42:	85 2f       	mov	r24, r21
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	88 0f       	add	r24, r24
     a48:	99 1f       	adc	r25, r25
     a4a:	9c 01       	movw	r18, r24
     a4c:	22 0f       	add	r18, r18
     a4e:	33 1f       	adc	r19, r19
     a50:	22 0f       	add	r18, r18
     a52:	33 1f       	adc	r19, r19
     a54:	22 0f       	add	r18, r18
     a56:	33 1f       	adc	r19, r19
     a58:	b9 01       	movw	r22, r18
     a5a:	68 1b       	sub	r22, r24
     a5c:	79 0b       	sbc	r23, r25
     a5e:	cb 01       	movw	r24, r22
     a60:	80 0f       	add	r24, r16
     a62:	91 1f       	adc	r25, r17
     a64:	fc 01       	movw	r30, r24
     a66:	10 82       	st	Z, r1
     a68:	13 c0       	rjmp	.+38     	; 0xa90 <explosion+0x10c>
      else objs[n].exist = true;
     a6a:	85 2f       	mov	r24, r21
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	88 0f       	add	r24, r24
     a70:	99 1f       	adc	r25, r25
     a72:	9c 01       	movw	r18, r24
     a74:	22 0f       	add	r18, r18
     a76:	33 1f       	adc	r19, r19
     a78:	22 0f       	add	r18, r18
     a7a:	33 1f       	adc	r19, r19
     a7c:	22 0f       	add	r18, r18
     a7e:	33 1f       	adc	r19, r19
     a80:	b9 01       	movw	r22, r18
     a82:	68 1b       	sub	r22, r24
     a84:	79 0b       	sbc	r23, r25
     a86:	cb 01       	movw	r24, r22
     a88:	80 0f       	add	r24, r16
     a8a:	91 1f       	adc	r25, r17
     a8c:	fc 01       	movw	r30, r24
     a8e:	80 82       	st	Z, r8
      objs[n].collide = false;
     a90:	85 2f       	mov	r24, r21
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	88 0f       	add	r24, r24
     a96:	99 1f       	adc	r25, r25
     a98:	9c 01       	movw	r18, r24
     a9a:	22 0f       	add	r18, r18
     a9c:	33 1f       	adc	r19, r19
     a9e:	22 0f       	add	r18, r18
     aa0:	33 1f       	adc	r19, r19
     aa2:	22 0f       	add	r18, r18
     aa4:	33 1f       	adc	r19, r19
     aa6:	b9 01       	movw	r22, r18
     aa8:	68 1b       	sub	r22, r24
     aaa:	79 0b       	sbc	r23, r25
     aac:	cb 01       	movw	r24, r22
     aae:	80 0f       	add	r24, r16
     ab0:	91 1f       	adc	r25, r17
     ab2:	fc 01       	movw	r30, r24
     ab4:	11 82       	std	Z+1, r1	; 0x01
      objs[n].who = (*item).who;
     ab6:	f7 01       	movw	r30, r14
     ab8:	43 81       	ldd	r20, Z+3	; 0x03
     aba:	85 2f       	mov	r24, r21
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	88 0f       	add	r24, r24
     ac0:	99 1f       	adc	r25, r25
     ac2:	9c 01       	movw	r18, r24
     ac4:	22 0f       	add	r18, r18
     ac6:	33 1f       	adc	r19, r19
     ac8:	22 0f       	add	r18, r18
     aca:	33 1f       	adc	r19, r19
     acc:	22 0f       	add	r18, r18
     ace:	33 1f       	adc	r19, r19
     ad0:	b9 01       	movw	r22, r18
     ad2:	68 1b       	sub	r22, r24
     ad4:	79 0b       	sbc	r23, r25
     ad6:	cb 01       	movw	r24, r22
     ad8:	80 0f       	add	r24, r16
     ada:	91 1f       	adc	r25, r17
     adc:	fc 01       	movw	r30, r24
     ade:	43 83       	std	Z+3, r20	; 0x03
      objs[n].type = 0;
     ae0:	85 2f       	mov	r24, r21
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	88 0f       	add	r24, r24
     ae6:	99 1f       	adc	r25, r25
     ae8:	9c 01       	movw	r18, r24
     aea:	22 0f       	add	r18, r18
     aec:	33 1f       	adc	r19, r19
     aee:	22 0f       	add	r18, r18
     af0:	33 1f       	adc	r19, r19
     af2:	22 0f       	add	r18, r18
     af4:	33 1f       	adc	r19, r19
     af6:	b9 01       	movw	r22, r18
     af8:	68 1b       	sub	r22, r24
     afa:	79 0b       	sbc	r23, r25
     afc:	cb 01       	movw	r24, r22
     afe:	80 0f       	add	r24, r16
     b00:	91 1f       	adc	r25, r17
     b02:	fc 01       	movw	r30, r24
     b04:	12 82       	std	Z+2, r1	; 0x02
      objs[n].jump = -1;
     b06:	85 2f       	mov	r24, r21
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	88 0f       	add	r24, r24
     b0c:	99 1f       	adc	r25, r25
     b0e:	9c 01       	movw	r18, r24
     b10:	22 0f       	add	r18, r18
     b12:	33 1f       	adc	r19, r19
     b14:	22 0f       	add	r18, r18
     b16:	33 1f       	adc	r19, r19
     b18:	22 0f       	add	r18, r18
     b1a:	33 1f       	adc	r19, r19
     b1c:	b9 01       	movw	r22, r18
     b1e:	68 1b       	sub	r22, r24
     b20:	79 0b       	sbc	r23, r25
     b22:	cb 01       	movw	r24, r22
     b24:	80 0f       	add	r24, r16
     b26:	91 1f       	adc	r25, r17
     b28:	fc 01       	movw	r30, r24
     b2a:	a2 86       	std	Z+10, r10	; 0x0a
      objs[n].period = FIRE_PER;
     b2c:	85 2f       	mov	r24, r21
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	9c 01       	movw	r18, r24
     b36:	22 0f       	add	r18, r18
     b38:	33 1f       	adc	r19, r19
     b3a:	22 0f       	add	r18, r18
     b3c:	33 1f       	adc	r19, r19
     b3e:	22 0f       	add	r18, r18
     b40:	33 1f       	adc	r19, r19
     b42:	b9 01       	movw	r22, r18
     b44:	68 1b       	sub	r22, r24
     b46:	79 0b       	sbc	r23, r25
     b48:	cb 01       	movw	r24, r22
     b4a:	80 0f       	add	r24, r16
     b4c:	91 1f       	adc	r25, r17
     b4e:	fc 01       	movw	r30, r24
     b50:	c3 86       	std	Z+11, r12	; 0x0b
      objs[n].elapsedTime = objs[n].period;
     b52:	85 2f       	mov	r24, r21
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	88 0f       	add	r24, r24
     b58:	99 1f       	adc	r25, r25
     b5a:	9c 01       	movw	r18, r24
     b5c:	22 0f       	add	r18, r18
     b5e:	33 1f       	adc	r19, r19
     b60:	22 0f       	add	r18, r18
     b62:	33 1f       	adc	r19, r19
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	b9 01       	movw	r22, r18
     b6a:	68 1b       	sub	r22, r24
     b6c:	79 0b       	sbc	r23, r25
     b6e:	cb 01       	movw	r24, r22
     b70:	80 0f       	add	r24, r16
     b72:	91 1f       	adc	r25, r17
     b74:	fc 01       	movw	r30, r24
     b76:	c4 86       	std	Z+12, r12	; 0x0c
      objs[n].expire = FIRE_DUR;
     b78:	85 2f       	mov	r24, r21
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	9c 01       	movw	r18, r24
     b82:	22 0f       	add	r18, r18
     b84:	33 1f       	adc	r19, r19
     b86:	22 0f       	add	r18, r18
     b88:	33 1f       	adc	r19, r19
     b8a:	22 0f       	add	r18, r18
     b8c:	33 1f       	adc	r19, r19
     b8e:	b9 01       	movw	r22, r18
     b90:	68 1b       	sub	r22, r24
     b92:	79 0b       	sbc	r23, r25
     b94:	cb 01       	movw	r24, r22
     b96:	80 0f       	add	r24, r16
     b98:	91 1f       	adc	r25, r17
     b9a:	fc 01       	movw	r30, r24
     b9c:	95 86       	std	Z+13, r9	; 0x0d
      objs[n].pos[0] = (*item).pos[0];
     b9e:	f7 01       	movw	r30, r14
     ba0:	44 81       	ldd	r20, Z+4	; 0x04
     ba2:	85 2f       	mov	r24, r21
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	88 0f       	add	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	9c 01       	movw	r18, r24
     bac:	22 0f       	add	r18, r18
     bae:	33 1f       	adc	r19, r19
     bb0:	22 0f       	add	r18, r18
     bb2:	33 1f       	adc	r19, r19
     bb4:	22 0f       	add	r18, r18
     bb6:	33 1f       	adc	r19, r19
     bb8:	b9 01       	movw	r22, r18
     bba:	68 1b       	sub	r22, r24
     bbc:	79 0b       	sbc	r23, r25
     bbe:	cb 01       	movw	r24, r22
     bc0:	80 0f       	add	r24, r16
     bc2:	91 1f       	adc	r25, r17
     bc4:	fc 01       	movw	r30, r24
     bc6:	44 83       	std	Z+4, r20	; 0x04
      objs[n].pos[1] = (*item).pos[1] + x;
     bc8:	85 2f       	mov	r24, r21
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	9c 01       	movw	r18, r24
     bd2:	22 0f       	add	r18, r18
     bd4:	33 1f       	adc	r19, r19
     bd6:	22 0f       	add	r18, r18
     bd8:	33 1f       	adc	r19, r19
     bda:	22 0f       	add	r18, r18
     bdc:	33 1f       	adc	r19, r19
     bde:	b9 01       	movw	r22, r18
     be0:	68 1b       	sub	r22, r24
     be2:	79 0b       	sbc	r23, r25
     be4:	cb 01       	movw	r24, r22
     be6:	80 0f       	add	r24, r16
     be8:	91 1f       	adc	r25, r17
     bea:	f7 01       	movw	r30, r14
     bec:	25 81       	ldd	r18, Z+5	; 0x05
     bee:	2d 0d       	add	r18, r13
     bf0:	fc 01       	movw	r30, r24
     bf2:	25 83       	std	Z+5, r18	; 0x05
      objs[n].pos[2] = (*item).pos[2] + y;
     bf4:	85 2f       	mov	r24, r21
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	88 0f       	add	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	9c 01       	movw	r18, r24
     bfe:	22 0f       	add	r18, r18
     c00:	33 1f       	adc	r19, r19
     c02:	22 0f       	add	r18, r18
     c04:	33 1f       	adc	r19, r19
     c06:	22 0f       	add	r18, r18
     c08:	33 1f       	adc	r19, r19
     c0a:	b9 01       	movw	r22, r18
     c0c:	68 1b       	sub	r22, r24
     c0e:	79 0b       	sbc	r23, r25
     c10:	cb 01       	movw	r24, r22
     c12:	80 0f       	add	r24, r16
     c14:	91 1f       	adc	r25, r17
     c16:	f7 01       	movw	r30, r14
     c18:	26 81       	ldd	r18, Z+6	; 0x06
     c1a:	2b 0d       	add	r18, r11
     c1c:	fc 01       	movw	r30, r24
     c1e:	26 83       	std	Z+6, r18	; 0x06
      objs[n].pos[3] = (*item).pos[3];
     c20:	f7 01       	movw	r30, r14
     c22:	47 81       	ldd	r20, Z+7	; 0x07
     c24:	85 2f       	mov	r24, r21
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	9c 01       	movw	r18, r24
     c2e:	22 0f       	add	r18, r18
     c30:	33 1f       	adc	r19, r19
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	22 0f       	add	r18, r18
     c38:	33 1f       	adc	r19, r19
     c3a:	b9 01       	movw	r22, r18
     c3c:	68 1b       	sub	r22, r24
     c3e:	79 0b       	sbc	r23, r25
     c40:	cb 01       	movw	r24, r22
     c42:	80 0f       	add	r24, r16
     c44:	91 1f       	adc	r25, r17
     c46:	fc 01       	movw	r30, r24
     c48:	47 83       	std	Z+7, r20	; 0x07
      objs[n].next[0] = (*item).next[0];
     c4a:	f7 01       	movw	r30, r14
     c4c:	40 85       	ldd	r20, Z+8	; 0x08
     c4e:	85 2f       	mov	r24, r21
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	88 0f       	add	r24, r24
     c54:	99 1f       	adc	r25, r25
     c56:	9c 01       	movw	r18, r24
     c58:	22 0f       	add	r18, r18
     c5a:	33 1f       	adc	r19, r19
     c5c:	22 0f       	add	r18, r18
     c5e:	33 1f       	adc	r19, r19
     c60:	22 0f       	add	r18, r18
     c62:	33 1f       	adc	r19, r19
     c64:	b9 01       	movw	r22, r18
     c66:	68 1b       	sub	r22, r24
     c68:	79 0b       	sbc	r23, r25
     c6a:	cb 01       	movw	r24, r22
     c6c:	80 0f       	add	r24, r16
     c6e:	91 1f       	adc	r25, r17
     c70:	fc 01       	movw	r30, r24
     c72:	40 87       	std	Z+8, r20	; 0x08
      objs[n].next[1] = (*item).next[1];
     c74:	f7 01       	movw	r30, r14
     c76:	41 85       	ldd	r20, Z+9	; 0x09
     c78:	85 2f       	mov	r24, r21
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	9c 01       	movw	r18, r24
     c82:	22 0f       	add	r18, r18
     c84:	33 1f       	adc	r19, r19
     c86:	22 0f       	add	r18, r18
     c88:	33 1f       	adc	r19, r19
     c8a:	22 0f       	add	r18, r18
     c8c:	33 1f       	adc	r19, r19
     c8e:	b9 01       	movw	r22, r18
     c90:	68 1b       	sub	r22, r24
     c92:	79 0b       	sbc	r23, r25
     c94:	cb 01       	movw	r24, r22
     c96:	80 0f       	add	r24, r16
     c98:	91 1f       	adc	r25, r17
     c9a:	fc 01       	movw	r30, r24
     c9c:	41 87       	std	Z+9, r20	; 0x09
}

// generate explosion
void explosion( obj *item, char radius ) {
  for(signed char y = -1 * radius; y < radius + 1; ++y) {
    for(signed char x = -1 * radius; x < radius + 1; ++x) {
     c9e:	d3 94       	inc	r13
     ca0:	2d 2d       	mov	r18, r13
     ca2:	33 27       	eor	r19, r19
     ca4:	27 fd       	sbrc	r18, 7
     ca6:	30 95       	com	r19
     ca8:	3f 83       	std	Y+7, r19	; 0x07
     caa:	2e 83       	std	Y+6, r18	; 0x06
     cac:	24 15       	cp	r18, r4
     cae:	35 05       	cpc	r19, r5
     cb0:	0c f4       	brge	.+2      	; 0xcb4 <explosion+0x330>
     cb2:	b3 ce       	rjmp	.-666    	; 0xa1a <explosion+0x96>
  return i;
}

// generate explosion
void explosion( obj *item, char radius ) {
  for(signed char y = -1 * radius; y < radius + 1; ++y) {
     cb4:	b3 94       	inc	r11
     cb6:	6b 2c       	mov	r6, r11
     cb8:	77 24       	eor	r7, r7
     cba:	67 fc       	sbrc	r6, 7
     cbc:	70 94       	com	r7
     cbe:	64 14       	cp	r6, r4
     cc0:	75 04       	cpc	r7, r5
     cc2:	34 f4       	brge	.+12     	; 0xcd0 <explosion+0x34c>
    for(signed char x = -1 * radius; x < radius + 1; ++x) {
     cc4:	3c 81       	ldd	r19, Y+4	; 0x04
     cc6:	3e 83       	std	Y+6, r19	; 0x06
     cc8:	6d 81       	ldd	r22, Y+5	; 0x05
     cca:	6f 83       	std	Y+7, r22	; 0x07
     ccc:	db 80       	ldd	r13, Y+3	; 0x03
     cce:	a5 ce       	rjmp	.-694    	; 0xa1a <explosion+0x96>
      objs[n].pos[3] = (*item).pos[3];
      objs[n].next[0] = (*item).next[0];
      objs[n].next[1] = (*item).next[1];
    }
  }   
}
     cd0:	27 96       	adiw	r28, 0x07	; 7
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	f8 94       	cli
     cd6:	de bf       	out	0x3e, r29	; 62
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	cd bf       	out	0x3d, r28	; 61
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	cf 90       	pop	r12
     cec:	bf 90       	pop	r11
     cee:	af 90       	pop	r10
     cf0:	9f 90       	pop	r9
     cf2:	8f 90       	pop	r8
     cf4:	7f 90       	pop	r7
     cf6:	6f 90       	pop	r6
     cf8:	5f 90       	pop	r5
     cfa:	4f 90       	pop	r4
     cfc:	3f 90       	pop	r3
     cfe:	2f 90       	pop	r2
     d00:	08 95       	ret

00000d02 <handleCollision>:

void handleCollision( obj *item ) {
     d02:	af 92       	push	r10
     d04:	bf 92       	push	r11
     d06:	cf 92       	push	r12
     d08:	df 92       	push	r13
     d0a:	ef 92       	push	r14
     d0c:	ff 92       	push	r15
     d0e:	0f 93       	push	r16
     d10:	1f 93       	push	r17
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
     d16:	ec 01       	movw	r28, r24
  if((*item).who != 0) { // if item is not neutral and assumed to exist (handled before called)
     d18:	8b 81       	ldd	r24, Y+3	; 0x03
     d1a:	88 23       	and	r24, r24
     d1c:	09 f4       	brne	.+2      	; 0xd20 <handleCollision+0x1e>
     d1e:	76 c0       	rjmp	.+236    	; 0xe0c <handleCollision+0x10a>
    if(P1.who != (*item).who) 
     d20:	90 91 0f 01 	lds	r25, 0x010F
     d24:	89 17       	cp	r24, r25
     d26:	91 f1       	breq	.+100    	; 0xd8c <handleCollision+0x8a>
      if(P1.pos[0] == (*item).pos[0] && P1.pos[1] == (*item).pos[1] && P1.pos[2] == (*item).pos[2] && P1.pos[3] == (*item).pos[3]) {
     d28:	20 91 13 01 	lds	r18, 0x0113
     d2c:	9c 81       	ldd	r25, Y+4	; 0x04
     d2e:	29 17       	cp	r18, r25
     d30:	69 f5       	brne	.+90     	; 0xd8c <handleCollision+0x8a>
     d32:	20 91 14 01 	lds	r18, 0x0114
     d36:	9d 81       	ldd	r25, Y+5	; 0x05
     d38:	29 17       	cp	r18, r25
     d3a:	41 f5       	brne	.+80     	; 0xd8c <handleCollision+0x8a>
     d3c:	20 91 15 01 	lds	r18, 0x0115
     d40:	9e 81       	ldd	r25, Y+6	; 0x06
     d42:	29 17       	cp	r18, r25
     d44:	19 f5       	brne	.+70     	; 0xd8c <handleCollision+0x8a>
     d46:	20 91 16 01 	lds	r18, 0x0116
     d4a:	9f 81       	ldd	r25, Y+7	; 0x07
     d4c:	29 17       	cp	r18, r25
     d4e:	f1 f4       	brne	.+60     	; 0xd8c <handleCollision+0x8a>
        if((*item).who == 4) {
     d50:	84 30       	cpi	r24, 0x04	; 4
     d52:	71 f4       	brne	.+28     	; 0xd70 <handleCollision+0x6e>
          (*item).exist = false;
     d54:	18 82       	st	Y, r1
          P1.inven[(*item).type] += ammo[(*item).type]; 
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	fc 01       	movw	r30, r24
     d5c:	e1 5f       	subi	r30, 0xF1	; 241
     d5e:	fe 4f       	sbci	r31, 0xFE	; 254
     d60:	84 54       	subi	r24, 0x44	; 68
     d62:	9f 4f       	sbci	r25, 0xFF	; 255
     d64:	21 89       	ldd	r18, Z+17	; 0x11
     d66:	dc 01       	movw	r26, r24
     d68:	8c 91       	ld	r24, X
     d6a:	82 0f       	add	r24, r18
     d6c:	81 8b       	std	Z+17, r24	; 0x11
     d6e:	0c c0       	rjmp	.+24     	; 0xd88 <handleCollision+0x86>
        }
        else if(P1.invul == 0) {
     d70:	80 91 19 01 	lds	r24, 0x0119
     d74:	88 23       	and	r24, r24
     d76:	41 f4       	brne	.+16     	; 0xd88 <handleCollision+0x86>
          P1.life--;
     d78:	80 91 1c 01 	lds	r24, 0x011C
     d7c:	81 50       	subi	r24, 0x01	; 1
     d7e:	80 93 1c 01 	sts	0x011C, r24
          P1.invul = INVUL_DUR;
     d82:	89 e1       	ldi	r24, 0x19	; 25
     d84:	80 93 19 01 	sts	0x0119, r24
        }
        (*item).collide = true;
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	89 83       	std	Y+1, r24	; 0x01
      }
    if(P2.who != (*item).who) 
     d8c:	8b 81       	ldd	r24, Y+3	; 0x03
     d8e:	90 91 29 01 	lds	r25, 0x0129
     d92:	98 17       	cp	r25, r24
     d94:	91 f1       	breq	.+100    	; 0xdfa <handleCollision+0xf8>
      if(P2.pos[0] == (*item).pos[0] && P2.pos[1] == (*item).pos[1] && P2.pos[2] == (*item).pos[2] && P2.pos[3] == (*item).pos[3]) {
     d96:	20 91 2d 01 	lds	r18, 0x012D
     d9a:	9c 81       	ldd	r25, Y+4	; 0x04
     d9c:	29 17       	cp	r18, r25
     d9e:	69 f5       	brne	.+90     	; 0xdfa <handleCollision+0xf8>
     da0:	20 91 2e 01 	lds	r18, 0x012E
     da4:	9d 81       	ldd	r25, Y+5	; 0x05
     da6:	29 17       	cp	r18, r25
     da8:	41 f5       	brne	.+80     	; 0xdfa <handleCollision+0xf8>
     daa:	20 91 2f 01 	lds	r18, 0x012F
     dae:	9e 81       	ldd	r25, Y+6	; 0x06
     db0:	29 17       	cp	r18, r25
     db2:	19 f5       	brne	.+70     	; 0xdfa <handleCollision+0xf8>
     db4:	20 91 30 01 	lds	r18, 0x0130
     db8:	9f 81       	ldd	r25, Y+7	; 0x07
     dba:	29 17       	cp	r18, r25
     dbc:	f1 f4       	brne	.+60     	; 0xdfa <handleCollision+0xf8>
        if((*item).who == 4) {
     dbe:	84 30       	cpi	r24, 0x04	; 4
     dc0:	71 f4       	brne	.+28     	; 0xdde <handleCollision+0xdc>
          (*item).exist = false;
     dc2:	18 82       	st	Y, r1
          P2.inven[(*item).type] += ammo[(*item).type]; 
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	fc 01       	movw	r30, r24
     dca:	e7 5d       	subi	r30, 0xD7	; 215
     dcc:	fe 4f       	sbci	r31, 0xFE	; 254
     dce:	84 54       	subi	r24, 0x44	; 68
     dd0:	9f 4f       	sbci	r25, 0xFF	; 255
     dd2:	21 89       	ldd	r18, Z+17	; 0x11
     dd4:	dc 01       	movw	r26, r24
     dd6:	8c 91       	ld	r24, X
     dd8:	82 0f       	add	r24, r18
     dda:	81 8b       	std	Z+17, r24	; 0x11
     ddc:	0c c0       	rjmp	.+24     	; 0xdf6 <handleCollision+0xf4>
        }
        else if(P2.invul == 0) {
     dde:	80 91 33 01 	lds	r24, 0x0133
     de2:	88 23       	and	r24, r24
     de4:	41 f4       	brne	.+16     	; 0xdf6 <handleCollision+0xf4>
          P2.life--;
     de6:	80 91 36 01 	lds	r24, 0x0136
     dea:	81 50       	subi	r24, 0x01	; 1
     dec:	80 93 36 01 	sts	0x0136, r24
          P2.invul = INVUL_DUR;
     df0:	89 e1       	ldi	r24, 0x19	; 25
     df2:	80 93 33 01 	sts	0x0133, r24
        } 
        (*item).collide = true;
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	89 83       	std	Y+1, r24	; 0x01
      }
  }

  // Item logic
  if((*item).who == 4) { 
     dfa:	8b 81       	ldd	r24, Y+3	; 0x03
     dfc:	84 30       	cpi	r24, 0x04	; 4
     dfe:	31 f4       	brne	.+12     	; 0xe0c <handleCollision+0x10a>
    if((*item).expire == 0)
     e00:	8d 85       	ldd	r24, Y+13	; 0x0d
     e02:	88 23       	and	r24, r24
     e04:	09 f0       	breq	.+2      	; 0xe08 <handleCollision+0x106>
     e06:	5f c2       	rjmp	.+1214   	; 0x12c6 <handleCollision+0x5c4>
      (*item).exist = false;
     e08:	18 82       	st	Y, r1
     e0a:	5d c2       	rjmp	.+1210   	; 0x12c6 <handleCollision+0x5c4>
    return;
  }

  //Collision action logic follows:
  if((*item).expire == 0)
     e0c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e0e:	88 23       	and	r24, r24
     e10:	11 f4       	brne	.+4      	; 0xe16 <handleCollision+0x114>
    (*item).collide = true;
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	89 83       	std	Y+1, r24	; 0x01

  // Particle effect
  if((*item).type == 1 && (*item).collide) { 
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	81 30       	cpi	r24, 0x01	; 1
     e1a:	09 f0       	breq	.+2      	; 0xe1e <handleCollision+0x11c>
     e1c:	20 c1       	rjmp	.+576    	; 0x105e <handleCollision+0x35c>
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	88 23       	and	r24, r24
     e22:	09 f4       	brne	.+2      	; 0xe26 <handleCollision+0x124>
     e24:	1c c1       	rjmp	.+568    	; 0x105e <handleCollision+0x35c>
    char n = getNewObj();
     e26:	0e 94 ab 04 	call	0x956	; 0x956 <getNewObj>
     e2a:	08 2f       	mov	r16, r24
    if( n == -1 ) return;
    objs[n].exist = true;
     e2c:	0f 2e       	mov	r0, r31
     e2e:	f3 e8       	ldi	r31, 0x83	; 131
     e30:	cf 2e       	mov	r12, r31
     e32:	f1 e0       	ldi	r31, 0x01	; 1
     e34:	df 2e       	mov	r13, r31
     e36:	f0 2d       	mov	r31, r0
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	9c 01       	movw	r18, r24
     e40:	22 0f       	add	r18, r18
     e42:	33 1f       	adc	r19, r19
     e44:	22 0f       	add	r18, r18
     e46:	33 1f       	adc	r19, r19
     e48:	22 0f       	add	r18, r18
     e4a:	33 1f       	adc	r19, r19
     e4c:	28 1b       	sub	r18, r24
     e4e:	39 0b       	sbc	r19, r25
     e50:	f6 01       	movw	r30, r12
     e52:	e2 0f       	add	r30, r18
     e54:	f3 1f       	adc	r31, r19
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	80 83       	st	Z, r24
    objs[n].collide = false;
     e5a:	80 2f       	mov	r24, r16
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	88 0f       	add	r24, r24
     e60:	99 1f       	adc	r25, r25
     e62:	9c 01       	movw	r18, r24
     e64:	22 0f       	add	r18, r18
     e66:	33 1f       	adc	r19, r19
     e68:	22 0f       	add	r18, r18
     e6a:	33 1f       	adc	r19, r19
     e6c:	22 0f       	add	r18, r18
     e6e:	33 1f       	adc	r19, r19
     e70:	28 1b       	sub	r18, r24
     e72:	39 0b       	sbc	r19, r25
     e74:	f6 01       	movw	r30, r12
     e76:	e2 0f       	add	r30, r18
     e78:	f3 1f       	adc	r31, r19
     e7a:	11 82       	std	Z+1, r1	; 0x01
    objs[n].who = 0;
     e7c:	80 2f       	mov	r24, r16
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	9c 01       	movw	r18, r24
     e86:	22 0f       	add	r18, r18
     e88:	33 1f       	adc	r19, r19
     e8a:	22 0f       	add	r18, r18
     e8c:	33 1f       	adc	r19, r19
     e8e:	22 0f       	add	r18, r18
     e90:	33 1f       	adc	r19, r19
     e92:	28 1b       	sub	r18, r24
     e94:	39 0b       	sbc	r19, r25
     e96:	f6 01       	movw	r30, r12
     e98:	e2 0f       	add	r30, r18
     e9a:	f3 1f       	adc	r31, r19
     e9c:	13 82       	std	Z+3, r1	; 0x03
    objs[n].type = 0;
     e9e:	80 2f       	mov	r24, r16
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	9c 01       	movw	r18, r24
     ea8:	22 0f       	add	r18, r18
     eaa:	33 1f       	adc	r19, r19
     eac:	22 0f       	add	r18, r18
     eae:	33 1f       	adc	r19, r19
     eb0:	22 0f       	add	r18, r18
     eb2:	33 1f       	adc	r19, r19
     eb4:	28 1b       	sub	r18, r24
     eb6:	39 0b       	sbc	r19, r25
     eb8:	f6 01       	movw	r30, r12
     eba:	e2 0f       	add	r30, r18
     ebc:	f3 1f       	adc	r31, r19
     ebe:	12 82       	std	Z+2, r1	; 0x02
    objs[n].jump = -1;
     ec0:	80 2f       	mov	r24, r16
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	9c 01       	movw	r18, r24
     eca:	22 0f       	add	r18, r18
     ecc:	33 1f       	adc	r19, r19
     ece:	22 0f       	add	r18, r18
     ed0:	33 1f       	adc	r19, r19
     ed2:	22 0f       	add	r18, r18
     ed4:	33 1f       	adc	r19, r19
     ed6:	28 1b       	sub	r18, r24
     ed8:	39 0b       	sbc	r19, r25
     eda:	f6 01       	movw	r30, r12
     edc:	e2 0f       	add	r30, r18
     ede:	f3 1f       	adc	r31, r19
     ee0:	8f ef       	ldi	r24, 0xFF	; 255
     ee2:	82 87       	std	Z+10, r24	; 0x0a
    objs[n].period = PISTOL_PER;
     ee4:	80 2f       	mov	r24, r16
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	9c 01       	movw	r18, r24
     eee:	22 0f       	add	r18, r18
     ef0:	33 1f       	adc	r19, r19
     ef2:	22 0f       	add	r18, r18
     ef4:	33 1f       	adc	r19, r19
     ef6:	22 0f       	add	r18, r18
     ef8:	33 1f       	adc	r19, r19
     efa:	28 1b       	sub	r18, r24
     efc:	39 0b       	sbc	r19, r25
     efe:	f6 01       	movw	r30, r12
     f00:	e2 0f       	add	r30, r18
     f02:	f3 1f       	adc	r31, r19
     f04:	43 e0       	ldi	r20, 0x03	; 3
     f06:	43 87       	std	Z+11, r20	; 0x0b
    objs[n].elapsedTime = objs[n].period;
     f08:	80 2f       	mov	r24, r16
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	9c 01       	movw	r18, r24
     f12:	22 0f       	add	r18, r18
     f14:	33 1f       	adc	r19, r19
     f16:	22 0f       	add	r18, r18
     f18:	33 1f       	adc	r19, r19
     f1a:	22 0f       	add	r18, r18
     f1c:	33 1f       	adc	r19, r19
     f1e:	28 1b       	sub	r18, r24
     f20:	39 0b       	sbc	r19, r25
     f22:	f6 01       	movw	r30, r12
     f24:	e2 0f       	add	r30, r18
     f26:	f3 1f       	adc	r31, r19
     f28:	44 87       	std	Z+12, r20	; 0x0c
    objs[n].expire = (rand() % 2) + 1;
     f2a:	0e 94 9f 20 	call	0x413e	; 0x413e <rand>
     f2e:	ac 01       	movw	r20, r24
     f30:	80 2f       	mov	r24, r16
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	9c 01       	movw	r18, r24
     f3a:	22 0f       	add	r18, r18
     f3c:	33 1f       	adc	r19, r19
     f3e:	22 0f       	add	r18, r18
     f40:	33 1f       	adc	r19, r19
     f42:	22 0f       	add	r18, r18
     f44:	33 1f       	adc	r19, r19
     f46:	28 1b       	sub	r18, r24
     f48:	39 0b       	sbc	r19, r25
     f4a:	2c 0d       	add	r18, r12
     f4c:	3d 1d       	adc	r19, r13
     f4e:	ca 01       	movw	r24, r20
     f50:	62 e0       	ldi	r22, 0x02	; 2
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	0e 94 37 20 	call	0x406e	; 0x406e <__divmodhi4>
     f58:	8f 5f       	subi	r24, 0xFF	; 255
     f5a:	f9 01       	movw	r30, r18
     f5c:	85 87       	std	Z+13, r24	; 0x0d
    objs[n].pos[0] = (*item).pos[0];
     f5e:	4c 81       	ldd	r20, Y+4	; 0x04
     f60:	80 2f       	mov	r24, r16
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	9c 01       	movw	r18, r24
     f6a:	22 0f       	add	r18, r18
     f6c:	33 1f       	adc	r19, r19
     f6e:	22 0f       	add	r18, r18
     f70:	33 1f       	adc	r19, r19
     f72:	22 0f       	add	r18, r18
     f74:	33 1f       	adc	r19, r19
     f76:	28 1b       	sub	r18, r24
     f78:	39 0b       	sbc	r19, r25
     f7a:	f6 01       	movw	r30, r12
     f7c:	e2 0f       	add	r30, r18
     f7e:	f3 1f       	adc	r31, r19
     f80:	44 83       	std	Z+4, r20	; 0x04
    objs[n].pos[1] = (*item).pos[1];
     f82:	4d 81       	ldd	r20, Y+5	; 0x05
     f84:	80 2f       	mov	r24, r16
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	9c 01       	movw	r18, r24
     f8e:	22 0f       	add	r18, r18
     f90:	33 1f       	adc	r19, r19
     f92:	22 0f       	add	r18, r18
     f94:	33 1f       	adc	r19, r19
     f96:	22 0f       	add	r18, r18
     f98:	33 1f       	adc	r19, r19
     f9a:	28 1b       	sub	r18, r24
     f9c:	39 0b       	sbc	r19, r25
     f9e:	f6 01       	movw	r30, r12
     fa0:	e2 0f       	add	r30, r18
     fa2:	f3 1f       	adc	r31, r19
     fa4:	45 83       	std	Z+5, r20	; 0x05
    objs[n].pos[2] = (*item).pos[2];
     fa6:	4e 81       	ldd	r20, Y+6	; 0x06
     fa8:	80 2f       	mov	r24, r16
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	9c 01       	movw	r18, r24
     fb2:	22 0f       	add	r18, r18
     fb4:	33 1f       	adc	r19, r19
     fb6:	22 0f       	add	r18, r18
     fb8:	33 1f       	adc	r19, r19
     fba:	22 0f       	add	r18, r18
     fbc:	33 1f       	adc	r19, r19
     fbe:	28 1b       	sub	r18, r24
     fc0:	39 0b       	sbc	r19, r25
     fc2:	f6 01       	movw	r30, r12
     fc4:	e2 0f       	add	r30, r18
     fc6:	f3 1f       	adc	r31, r19
     fc8:	46 83       	std	Z+6, r20	; 0x06
    objs[n].pos[3] = (*item).pos[3];
     fca:	4f 81       	ldd	r20, Y+7	; 0x07
     fcc:	80 2f       	mov	r24, r16
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	9c 01       	movw	r18, r24
     fd6:	22 0f       	add	r18, r18
     fd8:	33 1f       	adc	r19, r19
     fda:	22 0f       	add	r18, r18
     fdc:	33 1f       	adc	r19, r19
     fde:	22 0f       	add	r18, r18
     fe0:	33 1f       	adc	r19, r19
     fe2:	28 1b       	sub	r18, r24
     fe4:	39 0b       	sbc	r19, r25
     fe6:	f6 01       	movw	r30, r12
     fe8:	e2 0f       	add	r30, r18
     fea:	f3 1f       	adc	r31, r19
     fec:	47 83       	std	Z+7, r20	; 0x07
    objs[n].next[0] = (rand() % 3) - 1;
     fee:	0e 94 9f 20 	call	0x413e	; 0x413e <rand>
     ff2:	ac 01       	movw	r20, r24
     ff4:	80 2f       	mov	r24, r16
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	9c 01       	movw	r18, r24
     ffe:	22 0f       	add	r18, r18
    1000:	33 1f       	adc	r19, r19
    1002:	22 0f       	add	r18, r18
    1004:	33 1f       	adc	r19, r19
    1006:	22 0f       	add	r18, r18
    1008:	33 1f       	adc	r19, r19
    100a:	28 1b       	sub	r18, r24
    100c:	39 0b       	sbc	r19, r25
    100e:	2c 0d       	add	r18, r12
    1010:	3d 1d       	adc	r19, r13
    1012:	0f 2e       	mov	r0, r31
    1014:	f3 e0       	ldi	r31, 0x03	; 3
    1016:	ef 2e       	mov	r14, r31
    1018:	ff 24       	eor	r15, r15
    101a:	f0 2d       	mov	r31, r0
    101c:	ca 01       	movw	r24, r20
    101e:	b7 01       	movw	r22, r14
    1020:	0e 94 37 20 	call	0x406e	; 0x406e <__divmodhi4>
    1024:	81 50       	subi	r24, 0x01	; 1
    1026:	d9 01       	movw	r26, r18
    1028:	18 96       	adiw	r26, 0x08	; 8
    102a:	8c 93       	st	X, r24
    objs[n].next[1] = (rand() % 3) - 1;
    102c:	0e 94 9f 20 	call	0x413e	; 0x413e <rand>
    1030:	ac 01       	movw	r20, r24
    1032:	80 2f       	mov	r24, r16
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	9c 01       	movw	r18, r24
    103c:	22 0f       	add	r18, r18
    103e:	33 1f       	adc	r19, r19
    1040:	22 0f       	add	r18, r18
    1042:	33 1f       	adc	r19, r19
    1044:	22 0f       	add	r18, r18
    1046:	33 1f       	adc	r19, r19
    1048:	28 1b       	sub	r18, r24
    104a:	39 0b       	sbc	r19, r25
    104c:	2c 0d       	add	r18, r12
    104e:	3d 1d       	adc	r19, r13
    1050:	ca 01       	movw	r24, r20
    1052:	b7 01       	movw	r22, r14
    1054:	0e 94 37 20 	call	0x406e	; 0x406e <__divmodhi4>
    1058:	81 50       	subi	r24, 0x01	; 1
    105a:	f9 01       	movw	r30, r18
    105c:	81 87       	std	Z+9, r24	; 0x09
  }

  // Rocket logic
  if((*item).type == 2 && (*item).collide) { 
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	82 30       	cpi	r24, 0x02	; 2
    1062:	49 f4       	brne	.+18     	; 0x1076 <handleCollision+0x374>
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	88 23       	and	r24, r24
    1068:	31 f0       	breq	.+12     	; 0x1076 <handleCollision+0x374>
    (*item).who = 3;
    106a:	83 e0       	ldi	r24, 0x03	; 3
    106c:	8b 83       	std	Y+3, r24	; 0x03
    explosion(item, 3);
    106e:	ce 01       	movw	r24, r28
    1070:	63 e0       	ldi	r22, 0x03	; 3
    1072:	0e 94 c2 04 	call	0x984	; 0x984 <explosion>
  }

  // Cluster bomb logic - bounce logic is in position check logic
  if((*item).type == 3 && (*item).expire == 0) {
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	83 30       	cpi	r24, 0x03	; 3
    107a:	09 f0       	breq	.+2      	; 0x107e <handleCollision+0x37c>
    107c:	12 c1       	rjmp	.+548    	; 0x12a2 <handleCollision+0x5a0>
    107e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1080:	88 23       	and	r24, r24
    1082:	09 f0       	breq	.+2      	; 0x1086 <handleCollision+0x384>
    1084:	0e c1       	rjmp	.+540    	; 0x12a2 <handleCollision+0x5a0>
    1086:	ff 24       	eor	r15, r15
    1088:	fa 94       	dec	r15
    for(signed char x = -1; x < 2; ++x) {
      char n = getNewObj();
      if( n == -1 ) return;
      objs[n].exist = true;
    108a:	03 e8       	ldi	r16, 0x83	; 131
    108c:	11 e0       	ldi	r17, 0x01	; 1
    108e:	cc 24       	eor	r12, r12
    1090:	c3 94       	inc	r12
      objs[n].collide = false;
      objs[n].who = 0;
      objs[n].type = 4;
    1092:	dd 24       	eor	r13, r13
    1094:	68 94       	set
    1096:	d2 f8       	bld	r13, 2
      objs[n].jump = 3;
    1098:	0f 2e       	mov	r0, r31
    109a:	f3 e0       	ldi	r31, 0x03	; 3
    109c:	bf 2e       	mov	r11, r31
    109e:	f0 2d       	mov	r31, r0
      objs[n].period = CLUSTER_PER - 3;
    10a0:	ee 24       	eor	r14, r14
    10a2:	68 94       	set
    10a4:	e3 f8       	bld	r14, 3
      objs[n].elapsedTime = objs[n].period;
      objs[n].expire = 11;
    10a6:	0f 2e       	mov	r0, r31
    10a8:	fb e0       	ldi	r31, 0x0B	; 11
    10aa:	af 2e       	mov	r10, r31
    10ac:	f0 2d       	mov	r31, r0
  }

  // Cluster bomb logic - bounce logic is in position check logic
  if((*item).type == 3 && (*item).expire == 0) {
    for(signed char x = -1; x < 2; ++x) {
      char n = getNewObj();
    10ae:	0e 94 ab 04 	call	0x956	; 0x956 <getNewObj>
    10b2:	48 2f       	mov	r20, r24
      if( n == -1 ) return;
      objs[n].exist = true;
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	9c 01       	movw	r18, r24
    10bc:	22 0f       	add	r18, r18
    10be:	33 1f       	adc	r19, r19
    10c0:	22 0f       	add	r18, r18
    10c2:	33 1f       	adc	r19, r19
    10c4:	22 0f       	add	r18, r18
    10c6:	33 1f       	adc	r19, r19
    10c8:	28 1b       	sub	r18, r24
    10ca:	39 0b       	sbc	r19, r25
    10cc:	f8 01       	movw	r30, r16
    10ce:	e2 0f       	add	r30, r18
    10d0:	f3 1f       	adc	r31, r19
    10d2:	c0 82       	st	Z, r12
      objs[n].collide = false;
    10d4:	84 2f       	mov	r24, r20
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	9c 01       	movw	r18, r24
    10de:	22 0f       	add	r18, r18
    10e0:	33 1f       	adc	r19, r19
    10e2:	22 0f       	add	r18, r18
    10e4:	33 1f       	adc	r19, r19
    10e6:	22 0f       	add	r18, r18
    10e8:	33 1f       	adc	r19, r19
    10ea:	28 1b       	sub	r18, r24
    10ec:	39 0b       	sbc	r19, r25
    10ee:	f8 01       	movw	r30, r16
    10f0:	e2 0f       	add	r30, r18
    10f2:	f3 1f       	adc	r31, r19
    10f4:	11 82       	std	Z+1, r1	; 0x01
      objs[n].who = 0;
    10f6:	84 2f       	mov	r24, r20
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	9c 01       	movw	r18, r24
    1100:	22 0f       	add	r18, r18
    1102:	33 1f       	adc	r19, r19
    1104:	22 0f       	add	r18, r18
    1106:	33 1f       	adc	r19, r19
    1108:	22 0f       	add	r18, r18
    110a:	33 1f       	adc	r19, r19
    110c:	28 1b       	sub	r18, r24
    110e:	39 0b       	sbc	r19, r25
    1110:	f8 01       	movw	r30, r16
    1112:	e2 0f       	add	r30, r18
    1114:	f3 1f       	adc	r31, r19
    1116:	13 82       	std	Z+3, r1	; 0x03
      objs[n].type = 4;
    1118:	84 2f       	mov	r24, r20
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	9c 01       	movw	r18, r24
    1122:	22 0f       	add	r18, r18
    1124:	33 1f       	adc	r19, r19
    1126:	22 0f       	add	r18, r18
    1128:	33 1f       	adc	r19, r19
    112a:	22 0f       	add	r18, r18
    112c:	33 1f       	adc	r19, r19
    112e:	28 1b       	sub	r18, r24
    1130:	39 0b       	sbc	r19, r25
    1132:	f8 01       	movw	r30, r16
    1134:	e2 0f       	add	r30, r18
    1136:	f3 1f       	adc	r31, r19
    1138:	d2 82       	std	Z+2, r13	; 0x02
      objs[n].jump = 3;
    113a:	84 2f       	mov	r24, r20
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	9c 01       	movw	r18, r24
    1144:	22 0f       	add	r18, r18
    1146:	33 1f       	adc	r19, r19
    1148:	22 0f       	add	r18, r18
    114a:	33 1f       	adc	r19, r19
    114c:	22 0f       	add	r18, r18
    114e:	33 1f       	adc	r19, r19
    1150:	28 1b       	sub	r18, r24
    1152:	39 0b       	sbc	r19, r25
    1154:	f8 01       	movw	r30, r16
    1156:	e2 0f       	add	r30, r18
    1158:	f3 1f       	adc	r31, r19
    115a:	b2 86       	std	Z+10, r11	; 0x0a
      objs[n].period = CLUSTER_PER - 3;
    115c:	84 2f       	mov	r24, r20
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	9c 01       	movw	r18, r24
    1166:	22 0f       	add	r18, r18
    1168:	33 1f       	adc	r19, r19
    116a:	22 0f       	add	r18, r18
    116c:	33 1f       	adc	r19, r19
    116e:	22 0f       	add	r18, r18
    1170:	33 1f       	adc	r19, r19
    1172:	28 1b       	sub	r18, r24
    1174:	39 0b       	sbc	r19, r25
    1176:	f8 01       	movw	r30, r16
    1178:	e2 0f       	add	r30, r18
    117a:	f3 1f       	adc	r31, r19
    117c:	e3 86       	std	Z+11, r14	; 0x0b
      objs[n].elapsedTime = objs[n].period;
    117e:	84 2f       	mov	r24, r20
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	9c 01       	movw	r18, r24
    1188:	22 0f       	add	r18, r18
    118a:	33 1f       	adc	r19, r19
    118c:	22 0f       	add	r18, r18
    118e:	33 1f       	adc	r19, r19
    1190:	22 0f       	add	r18, r18
    1192:	33 1f       	adc	r19, r19
    1194:	28 1b       	sub	r18, r24
    1196:	39 0b       	sbc	r19, r25
    1198:	f8 01       	movw	r30, r16
    119a:	e2 0f       	add	r30, r18
    119c:	f3 1f       	adc	r31, r19
    119e:	e4 86       	std	Z+12, r14	; 0x0c
      objs[n].expire = 11;
    11a0:	84 2f       	mov	r24, r20
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	9c 01       	movw	r18, r24
    11aa:	22 0f       	add	r18, r18
    11ac:	33 1f       	adc	r19, r19
    11ae:	22 0f       	add	r18, r18
    11b0:	33 1f       	adc	r19, r19
    11b2:	22 0f       	add	r18, r18
    11b4:	33 1f       	adc	r19, r19
    11b6:	28 1b       	sub	r18, r24
    11b8:	39 0b       	sbc	r19, r25
    11ba:	f8 01       	movw	r30, r16
    11bc:	e2 0f       	add	r30, r18
    11be:	f3 1f       	adc	r31, r19
    11c0:	a5 86       	std	Z+13, r10	; 0x0d
      objs[n].pos[0] = (*item).pos[0];
    11c2:	5c 81       	ldd	r21, Y+4	; 0x04
    11c4:	84 2f       	mov	r24, r20
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	9c 01       	movw	r18, r24
    11ce:	22 0f       	add	r18, r18
    11d0:	33 1f       	adc	r19, r19
    11d2:	22 0f       	add	r18, r18
    11d4:	33 1f       	adc	r19, r19
    11d6:	22 0f       	add	r18, r18
    11d8:	33 1f       	adc	r19, r19
    11da:	28 1b       	sub	r18, r24
    11dc:	39 0b       	sbc	r19, r25
    11de:	f8 01       	movw	r30, r16
    11e0:	e2 0f       	add	r30, r18
    11e2:	f3 1f       	adc	r31, r19
    11e4:	54 83       	std	Z+4, r21	; 0x04
      objs[n].pos[1] = (*item).pos[1];
    11e6:	5d 81       	ldd	r21, Y+5	; 0x05
    11e8:	84 2f       	mov	r24, r20
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	9c 01       	movw	r18, r24
    11f2:	22 0f       	add	r18, r18
    11f4:	33 1f       	adc	r19, r19
    11f6:	22 0f       	add	r18, r18
    11f8:	33 1f       	adc	r19, r19
    11fa:	22 0f       	add	r18, r18
    11fc:	33 1f       	adc	r19, r19
    11fe:	28 1b       	sub	r18, r24
    1200:	39 0b       	sbc	r19, r25
    1202:	f8 01       	movw	r30, r16
    1204:	e2 0f       	add	r30, r18
    1206:	f3 1f       	adc	r31, r19
    1208:	55 83       	std	Z+5, r21	; 0x05
      objs[n].pos[2] = (*item).pos[2];
    120a:	5e 81       	ldd	r21, Y+6	; 0x06
    120c:	84 2f       	mov	r24, r20
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	9c 01       	movw	r18, r24
    1216:	22 0f       	add	r18, r18
    1218:	33 1f       	adc	r19, r19
    121a:	22 0f       	add	r18, r18
    121c:	33 1f       	adc	r19, r19
    121e:	22 0f       	add	r18, r18
    1220:	33 1f       	adc	r19, r19
    1222:	28 1b       	sub	r18, r24
    1224:	39 0b       	sbc	r19, r25
    1226:	f8 01       	movw	r30, r16
    1228:	e2 0f       	add	r30, r18
    122a:	f3 1f       	adc	r31, r19
    122c:	56 83       	std	Z+6, r21	; 0x06
      objs[n].pos[3] = (*item).pos[3];
    122e:	5f 81       	ldd	r21, Y+7	; 0x07
    1230:	84 2f       	mov	r24, r20
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	9c 01       	movw	r18, r24
    123a:	22 0f       	add	r18, r18
    123c:	33 1f       	adc	r19, r19
    123e:	22 0f       	add	r18, r18
    1240:	33 1f       	adc	r19, r19
    1242:	22 0f       	add	r18, r18
    1244:	33 1f       	adc	r19, r19
    1246:	28 1b       	sub	r18, r24
    1248:	39 0b       	sbc	r19, r25
    124a:	f8 01       	movw	r30, r16
    124c:	e2 0f       	add	r30, r18
    124e:	f3 1f       	adc	r31, r19
    1250:	57 83       	std	Z+7, r21	; 0x07
      objs[n].next[0] = x;
    1252:	84 2f       	mov	r24, r20
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	9c 01       	movw	r18, r24
    125c:	22 0f       	add	r18, r18
    125e:	33 1f       	adc	r19, r19
    1260:	22 0f       	add	r18, r18
    1262:	33 1f       	adc	r19, r19
    1264:	22 0f       	add	r18, r18
    1266:	33 1f       	adc	r19, r19
    1268:	28 1b       	sub	r18, r24
    126a:	39 0b       	sbc	r19, r25
    126c:	f8 01       	movw	r30, r16
    126e:	e2 0f       	add	r30, r18
    1270:	f3 1f       	adc	r31, r19
    1272:	f0 86       	std	Z+8, r15	; 0x08
      objs[n].next[1] = 0;
    1274:	84 2f       	mov	r24, r20
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	9c 01       	movw	r18, r24
    127e:	22 0f       	add	r18, r18
    1280:	33 1f       	adc	r19, r19
    1282:	22 0f       	add	r18, r18
    1284:	33 1f       	adc	r19, r19
    1286:	22 0f       	add	r18, r18
    1288:	33 1f       	adc	r19, r19
    128a:	28 1b       	sub	r18, r24
    128c:	39 0b       	sbc	r19, r25
    128e:	f8 01       	movw	r30, r16
    1290:	e2 0f       	add	r30, r18
    1292:	f3 1f       	adc	r31, r19
    1294:	11 86       	std	Z+9, r1	; 0x09
    explosion(item, 3);
  }

  // Cluster bomb logic - bounce logic is in position check logic
  if((*item).type == 3 && (*item).expire == 0) {
    for(signed char x = -1; x < 2; ++x) {
    1296:	f3 94       	inc	r15
    1298:	f2 e0       	ldi	r31, 0x02	; 2
    129a:	ff 16       	cp	r15, r31
    129c:	09 f0       	breq	.+2      	; 0x12a0 <handleCollision+0x59e>
    129e:	07 cf       	rjmp	.-498    	; 0x10ae <handleCollision+0x3ac>
      objs[n].pos[2] = (*item).pos[2];
      objs[n].pos[3] = (*item).pos[3];
      objs[n].next[0] = x;
      objs[n].next[1] = 0;
    }
    (*item).exist = false;
    12a0:	18 82       	st	Y, r1
  }
  if((*item).type == 4 && (*item).expire == 0) {
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	84 30       	cpi	r24, 0x04	; 4
    12a6:	61 f4       	brne	.+24     	; 0x12c0 <handleCollision+0x5be>
    12a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    12aa:	88 23       	and	r24, r24
    12ac:	49 f4       	brne	.+18     	; 0x12c0 <handleCollision+0x5be>
    (*item).who = 3;
    12ae:	83 e0       	ldi	r24, 0x03	; 3
    12b0:	8b 83       	std	Y+3, r24	; 0x03
    (*item).next[0] = 0;
    12b2:	18 86       	std	Y+8, r1	; 0x08
    (*item).next[1] = 0;
    12b4:	19 86       	std	Y+9, r1	; 0x09
    explosion(item, 2);
    12b6:	ce 01       	movw	r24, r28
    12b8:	62 e0       	ldi	r22, 0x02	; 2
    12ba:	0e 94 c2 04 	call	0x984	; 0x984 <explosion>
    (*item).exist = false;
    12be:	18 82       	st	Y, r1
  } // End of Cluster bomb logic

  if((*item).collide) 
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	81 11       	cpse	r24, r1
    (*item).exist = false;
    12c4:	18 82       	st	Y, r1
}
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	1f 91       	pop	r17
    12cc:	0f 91       	pop	r16
    12ce:	ff 90       	pop	r15
    12d0:	ef 90       	pop	r14
    12d2:	df 90       	pop	r13
    12d4:	cf 90       	pop	r12
    12d6:	bf 90       	pop	r11
    12d8:	af 90       	pop	r10
    12da:	08 95       	ret

000012dc <drawField>:

// Draws field data onto LCD
void drawField() {
    12dc:	1f 93       	push	r17
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
  for(char i = 0; i < COL_SPACE; ++i)
    12e2:	c3 e4       	ldi	r28, 0x43	; 67
    12e4:	d1 e0       	ldi	r29, 0x01	; 1
    12e6:	10 e0       	ldi	r17, 0x00	; 0
    for(char j = 0; j < ROW_SPACE; ++j) {
      createChar(i+4*j, field[i][j]);
    12e8:	81 2f       	mov	r24, r17
    12ea:	be 01       	movw	r22, r28
    12ec:	0e 94 b5 02 	call	0x56a	; 0x56a <createChar>
      setCursor(i,j);
    12f0:	81 2f       	mov	r24, r17
    12f2:	60 e0       	ldi	r22, 0x00	; 0
    12f4:	0e 94 a9 02 	call	0x552	; 0x552 <setCursor>
      write(i+4*j);
    12f8:	81 2f       	mov	r24, r17
    12fa:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <write>
    (*item).exist = false;
}

// Draws field data onto LCD
void drawField() {
  for(char i = 0; i < COL_SPACE; ++i)
    12fe:	1f 5f       	subi	r17, 0xFF	; 255
    1300:	28 96       	adiw	r28, 0x08	; 8
    1302:	18 30       	cpi	r17, 0x08	; 8
    1304:	89 f7       	brne	.-30     	; 0x12e8 <drawField+0xc>
    for(char j = 0; j < ROW_SPACE; ++j) {
      createChar(i+4*j, field[i][j]);
      setCursor(i,j);
      write(i+4*j);
    }
}
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	1f 91       	pop	r17
    130c:	08 95       	ret

0000130e <evalField>:

// Ticks all objects, calculates their new positions, handles collisions, then draws the screen
void evalField() {
    130e:	af 92       	push	r10
    1310:	bf 92       	push	r11
    1312:	cf 92       	push	r12
    1314:	df 92       	push	r13
    1316:	ef 92       	push	r14
    1318:	ff 92       	push	r15
    131a:	0f 93       	push	r16
    131c:	1f 93       	push	r17
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	c3 e4       	ldi	r28, 0x43	; 67
    1324:	d1 e0       	ldi	r29, 0x01	; 1
    1326:	03 e8       	ldi	r16, 0x83	; 131
    1328:	11 e0       	ldi	r17, 0x01	; 1
  // Clear screen
  for(char i = 0; i < COL_SPACE; ++i) 
    for(char j = 0; j < ROW_SPACE; ++j) 
      clearByte(field[i][j]);
    132a:	ce 01       	movw	r24, r28
    132c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <clearByte>
    1330:	28 96       	adiw	r28, 0x08	; 8
}

// Ticks all objects, calculates their new positions, handles collisions, then draws the screen
void evalField() {
  // Clear screen
  for(char i = 0; i < COL_SPACE; ++i) 
    1332:	c0 17       	cp	r28, r16
    1334:	d1 07       	cpc	r29, r17
    1336:	c9 f7       	brne	.-14     	; 0x132a <evalField+0x1c>
    for(char j = 0; j < ROW_SPACE; ++j) 
      clearByte(field[i][j]);
  // Update players
  if(P1.elapsedTime == P1.period) {
    1338:	80 91 1e 01 	lds	r24, 0x011E
    133c:	90 91 1d 01 	lds	r25, 0x011D
    1340:	89 17       	cp	r24, r25
    1342:	a9 f4       	brne	.+42     	; 0x136e <evalField+0x60>
    calcNextP(&P1);
    1344:	8f e0       	ldi	r24, 0x0F	; 15
    1346:	91 e0       	ldi	r25, 0x01	; 1
    1348:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <calcNextP>
    P1.elapsedTime = 0;
    134c:	10 92 1e 01 	sts	0x011E, r1
    if(P1.invul != 0) P1.invul--;
    1350:	80 91 19 01 	lds	r24, 0x0119
    1354:	88 23       	and	r24, r24
    1356:	19 f0       	breq	.+6      	; 0x135e <evalField+0x50>
    1358:	81 50       	subi	r24, 0x01	; 1
    135a:	80 93 19 01 	sts	0x0119, r24
    if(P1.cooldown != 0) P1.cooldown--;
    135e:	80 91 1b 01 	lds	r24, 0x011B
    1362:	88 23       	and	r24, r24
    1364:	39 f0       	breq	.+14     	; 0x1374 <evalField+0x66>
    1366:	81 50       	subi	r24, 0x01	; 1
    1368:	80 93 1b 01 	sts	0x011B, r24
    136c:	03 c0       	rjmp	.+6      	; 0x1374 <evalField+0x66>
  } else
    P1.elapsedTime++;
    136e:	8f 5f       	subi	r24, 0xFF	; 255
    1370:	80 93 1e 01 	sts	0x011E, r24
  if(!(P1.invul % 2))
    1374:	80 91 19 01 	lds	r24, 0x0119
    1378:	80 fd       	sbrc	r24, 0
    137a:	04 c0       	rjmp	.+8      	; 0x1384 <evalField+0x76>
    setPixelP(&P1);
    137c:	8f e0       	ldi	r24, 0x0F	; 15
    137e:	91 e0       	ldi	r25, 0x01	; 1
    1380:	0e 94 c2 03 	call	0x784	; 0x784 <setPixelP>
  if(P2.elapsedTime == P2.period) {
    1384:	80 91 38 01 	lds	r24, 0x0138
    1388:	90 91 37 01 	lds	r25, 0x0137
    138c:	89 17       	cp	r24, r25
    138e:	a9 f4       	brne	.+42     	; 0x13ba <evalField+0xac>
    calcNextP(&P2);
    1390:	89 e2       	ldi	r24, 0x29	; 41
    1392:	91 e0       	ldi	r25, 0x01	; 1
    1394:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <calcNextP>
    P2.elapsedTime = 0;
    1398:	10 92 38 01 	sts	0x0138, r1
    if(P2.invul != 0) P2.invul--;
    139c:	80 91 33 01 	lds	r24, 0x0133
    13a0:	88 23       	and	r24, r24
    13a2:	19 f0       	breq	.+6      	; 0x13aa <evalField+0x9c>
    13a4:	81 50       	subi	r24, 0x01	; 1
    13a6:	80 93 33 01 	sts	0x0133, r24
    if(P2.cooldown != 0) P2.cooldown--;
    13aa:	80 91 35 01 	lds	r24, 0x0135
    13ae:	88 23       	and	r24, r24
    13b0:	39 f0       	breq	.+14     	; 0x13c0 <evalField+0xb2>
    13b2:	81 50       	subi	r24, 0x01	; 1
    13b4:	80 93 35 01 	sts	0x0135, r24
    13b8:	03 c0       	rjmp	.+6      	; 0x13c0 <evalField+0xb2>
  } else    
    P2.elapsedTime++;
    13ba:	8f 5f       	subi	r24, 0xFF	; 255
    13bc:	80 93 38 01 	sts	0x0138, r24
  if(!(P2.invul % 2))
    13c0:	80 91 33 01 	lds	r24, 0x0133
    13c4:	80 fd       	sbrc	r24, 0
    13c6:	04 c0       	rjmp	.+8      	; 0x13d0 <evalField+0xc2>
    setPixelP(&P2);
    13c8:	89 e2       	ldi	r24, 0x29	; 41
    13ca:	91 e0       	ldi	r25, 0x01	; 1
    13cc:	0e 94 c2 03 	call	0x784	; 0x784 <setPixelP>
    13d0:	03 e8       	ldi	r16, 0x83	; 131
    13d2:	11 e0       	ldi	r17, 0x01	; 1
    13d4:	0f 2e       	mov	r0, r31
    13d6:	fc e0       	ldi	r31, 0x0C	; 12
    13d8:	ef 2e       	mov	r14, r31
    13da:	ff 24       	eor	r15, r15
    13dc:	f0 2d       	mov	r31, r0
    13de:	e0 0e       	add	r14, r16
    13e0:	f1 1e       	adc	r15, r17
    13e2:	0f 2e       	mov	r0, r31
    13e4:	fd e0       	ldi	r31, 0x0D	; 13
    13e6:	af 2e       	mov	r10, r31
    13e8:	bb 24       	eor	r11, r11
    13ea:	f0 2d       	mov	r31, r0
    13ec:	a0 0e       	add	r10, r16
    13ee:	b1 1e       	adc	r11, r17
      write(i+4*j);
    }
}

// Ticks all objects, calculates their new positions, handles collisions, then draws the screen
void evalField() {
    13f0:	cc 24       	eor	r12, r12
    13f2:	dd 24       	eor	r13, r13
    13f4:	d8 01       	movw	r26, r16
    P2.elapsedTime++;
  if(!(P2.invul % 2))
    setPixelP(&P2);
  // Update all non-player objects
  for (char i = 0; i < NUM_OBJ; ++i) {
    if (objs[i].exist) {
    13f6:	8c 91       	ld	r24, X
    13f8:	88 23       	and	r24, r24
    13fa:	d1 f1       	breq	.+116    	; 0x1470 <evalField+0x162>
      write(i+4*j);
    }
}

// Ticks all objects, calculates their new positions, handles collisions, then draws the screen
void evalField() {
    13fc:	e7 01       	movw	r28, r14
  if(!(P2.invul % 2))
    setPixelP(&P2);
  // Update all non-player objects
  for (char i = 0; i < NUM_OBJ; ++i) {
    if (objs[i].exist) {
      if(objs[i].elapsedTime == objs[i].period) {
    13fe:	88 81       	ld	r24, Y
      write(i+4*j);
    }
}

// Ticks all objects, calculates their new positions, handles collisions, then draws the screen
void evalField() {
    1400:	f7 01       	movw	r30, r14
    1402:	31 97       	sbiw	r30, 0x01	; 1
  if(!(P2.invul % 2))
    setPixelP(&P2);
  // Update all non-player objects
  for (char i = 0; i < NUM_OBJ; ++i) {
    if (objs[i].exist) {
      if(objs[i].elapsedTime == objs[i].period) {
    1404:	90 81       	ld	r25, Z
    1406:	89 17       	cp	r24, r25
    1408:	e9 f4       	brne	.+58     	; 0x1444 <evalField+0x136>
        if(objs[i].expire != -1) 
    140a:	f5 01       	movw	r30, r10
    140c:	80 81       	ld	r24, Z
    140e:	8f 3f       	cpi	r24, 0xFF	; 255
    1410:	29 f0       	breq	.+10     	; 0x141c <evalField+0x10e>
          objs[i].expire--;
    1412:	81 50       	subi	r24, 0x01	; 1
    1414:	80 83       	st	Z, r24
        if (objs[i].exist) {
    1416:	8c 91       	ld	r24, X
    1418:	88 23       	and	r24, r24
    141a:	b1 f0       	breq	.+44     	; 0x1448 <evalField+0x13a>
          calcNext(&(objs[i]));
    141c:	c6 01       	movw	r24, r12
    141e:	88 0f       	add	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	9c 01       	movw	r18, r24
    1424:	22 0f       	add	r18, r18
    1426:	33 1f       	adc	r19, r19
    1428:	22 0f       	add	r18, r18
    142a:	33 1f       	adc	r19, r19
    142c:	22 0f       	add	r18, r18
    142e:	33 1f       	adc	r19, r19
    1430:	a9 01       	movw	r20, r18
    1432:	48 1b       	sub	r20, r24
    1434:	59 0b       	sbc	r21, r25
    1436:	ca 01       	movw	r24, r20
    1438:	8d 57       	subi	r24, 0x7D	; 125
    143a:	9e 4f       	sbci	r25, 0xFE	; 254
    143c:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <calcNext>
          objs[i].elapsedTime = 0;
    1440:	18 82       	st	Y, r1
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <evalField+0x13a>
        }
      } else
        objs[i].elapsedTime++;
    1444:	8f 5f       	subi	r24, 0xFF	; 255
    1446:	88 83       	st	Y, r24
      setPixel(&(objs[i]));
    1448:	c6 01       	movw	r24, r12
    144a:	88 0f       	add	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	ec 01       	movw	r28, r24
    1450:	cc 0f       	add	r28, r28
    1452:	dd 1f       	adc	r29, r29
    1454:	cc 0f       	add	r28, r28
    1456:	dd 1f       	adc	r29, r29
    1458:	cc 0f       	add	r28, r28
    145a:	dd 1f       	adc	r29, r29
    145c:	c8 1b       	sub	r28, r24
    145e:	d9 0b       	sbc	r29, r25
    1460:	cd 57       	subi	r28, 0x7D	; 125
    1462:	de 4f       	sbci	r29, 0xFE	; 254
    1464:	ce 01       	movw	r24, r28
    1466:	0e 94 9a 03 	call	0x734	; 0x734 <setPixel>
      handleCollision (&(objs[i]));
    146a:	ce 01       	movw	r24, r28
    146c:	0e 94 81 06 	call	0xd02	; 0xd02 <handleCollision>
    1470:	08 94       	sec
    1472:	c1 1c       	adc	r12, r1
    1474:	d1 1c       	adc	r13, r1
    1476:	02 5f       	subi	r16, 0xF2	; 242
    1478:	1f 4f       	sbci	r17, 0xFF	; 255
    147a:	4e e0       	ldi	r20, 0x0E	; 14
    147c:	50 e0       	ldi	r21, 0x00	; 0
    147e:	e4 0e       	add	r14, r20
    1480:	f5 1e       	adc	r15, r21
    1482:	a4 0e       	add	r10, r20
    1484:	b5 1e       	adc	r11, r21
  } else    
    P2.elapsedTime++;
  if(!(P2.invul % 2))
    setPixelP(&P2);
  // Update all non-player objects
  for (char i = 0; i < NUM_OBJ; ++i) {
    1486:	58 e7       	ldi	r21, 0x78	; 120
    1488:	c5 16       	cp	r12, r21
    148a:	d1 04       	cpc	r13, r1
    148c:	09 f0       	breq	.+2      	; 0x1490 <evalField+0x182>
    148e:	b2 cf       	rjmp	.-156    	; 0x13f4 <evalField+0xe6>
        objs[i].elapsedTime++;
      setPixel(&(objs[i]));
      handleCollision (&(objs[i]));
    }
  }
  drawField();
    1490:	0e 94 6e 09 	call	0x12dc	; 0x12dc <drawField>
}
    1494:	df 91       	pop	r29
    1496:	cf 91       	pop	r28
    1498:	1f 91       	pop	r17
    149a:	0f 91       	pop	r16
    149c:	ff 90       	pop	r15
    149e:	ef 90       	pop	r14
    14a0:	df 90       	pop	r13
    14a2:	cf 90       	pop	r12
    14a4:	bf 90       	pop	r11
    14a6:	af 90       	pop	r10
    14a8:	08 95       	ret

000014aa <genEvent>:

void genEvent( char eventNo ) {
    14aa:	af 92       	push	r10
    14ac:	bf 92       	push	r11
    14ae:	cf 92       	push	r12
    14b0:	df 92       	push	r13
    14b2:	ef 92       	push	r14
    14b4:	ff 92       	push	r15
    14b6:	0f 93       	push	r16
    14b8:	1f 93       	push	r17
    14ba:	cf 93       	push	r28
    14bc:	df 93       	push	r29
  switch(eventNo) {
    14be:	81 30       	cpi	r24, 0x01	; 1
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <genEvent+0x1a>
    14c2:	19 c1       	rjmp	.+562    	; 0x16f6 <genEvent+0x24c>
    14c4:	81 30       	cpi	r24, 0x01	; 1
    14c6:	20 f0       	brcs	.+8      	; 0x14d0 <genEvent+0x26>
    14c8:	82 30       	cpi	r24, 0x02	; 2
    14ca:	09 f0       	breq	.+2      	; 0x14ce <genEvent+0x24>
    14cc:	30 c3       	rjmp	.+1632   	; 0x1b2e <genEvent+0x684>
    14ce:	1c c3       	rjmp	.+1592   	; 0x1b08 <genEvent+0x65e>
    case 0: { // spawn a cluster bomb
      char c = (rand() % (COL_SPACE / 2)) + 2;
    14d0:	0e 94 9f 20 	call	0x413e	; 0x413e <rand>
    14d4:	64 e0       	ldi	r22, 0x04	; 4
    14d6:	70 e0       	ldi	r23, 0x00	; 0
    14d8:	0e 94 37 20 	call	0x406e	; 0x406e <__divmodhi4>
    14dc:	ee 24       	eor	r14, r14
    14de:	68 94       	set
    14e0:	e1 f8       	bld	r14, 1
    14e2:	e8 0e       	add	r14, r24
      char x = rand() % 5;
    14e4:	0e 94 9f 20 	call	0x413e	; 0x413e <rand>
      for(signed char x = -1; x < 2; ++x) {
    14e8:	1f ef       	ldi	r17, 0xFF	; 255
      char n = getNewObj();
      if( n == -1 ) return;
      objs[n].exist = true;
    14ea:	c3 e8       	ldi	r28, 0x83	; 131
    14ec:	d1 e0       	ldi	r29, 0x01	; 1
    14ee:	dd 24       	eor	r13, r13
    14f0:	d3 94       	inc	r13
      objs[n].collide = false;
      objs[n].who = 0;
      objs[n].type = 4;
    14f2:	cc 24       	eor	r12, r12
    14f4:	68 94       	set
    14f6:	c2 f8       	bld	r12, 2
      objs[n].jump = 3;
    14f8:	03 e0       	ldi	r16, 0x03	; 3
      objs[n].period = CLUSTER_PER;
    14fa:	0f 2e       	mov	r0, r31
    14fc:	fb e0       	ldi	r31, 0x0B	; 11
    14fe:	ff 2e       	mov	r15, r31
    1500:	f0 2d       	mov	r31, r0
      objs[n].elapsedTime = objs[n].period;
      objs[n].expire = 25;
    1502:	0f 2e       	mov	r0, r31
    1504:	f9 e1       	ldi	r31, 0x19	; 25
    1506:	bf 2e       	mov	r11, r31
    1508:	f0 2d       	mov	r31, r0
  switch(eventNo) {
    case 0: { // spawn a cluster bomb
      char c = (rand() % (COL_SPACE / 2)) + 2;
      char x = rand() % 5;
      for(signed char x = -1; x < 2; ++x) {
      char n = getNewObj();
    150a:	0e 94 ab 04 	call	0x956	; 0x956 <getNewObj>
      if( n == -1 ) return;
      objs[n].exist = true;
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	22 0f       	add	r18, r18
    1514:	33 1f       	adc	r19, r19
    1516:	a9 01       	movw	r20, r18
    1518:	44 0f       	add	r20, r20
    151a:	55 1f       	adc	r21, r21
    151c:	44 0f       	add	r20, r20
    151e:	55 1f       	adc	r21, r21
    1520:	44 0f       	add	r20, r20
    1522:	55 1f       	adc	r21, r21
    1524:	42 1b       	sub	r20, r18
    1526:	53 0b       	sbc	r21, r19
    1528:	fe 01       	movw	r30, r28
    152a:	e4 0f       	add	r30, r20
    152c:	f5 1f       	adc	r31, r21
    152e:	d0 82       	st	Z, r13
      objs[n].collide = false;
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	22 0f       	add	r18, r18
    1536:	33 1f       	adc	r19, r19
    1538:	a9 01       	movw	r20, r18
    153a:	44 0f       	add	r20, r20
    153c:	55 1f       	adc	r21, r21
    153e:	44 0f       	add	r20, r20
    1540:	55 1f       	adc	r21, r21
    1542:	44 0f       	add	r20, r20
    1544:	55 1f       	adc	r21, r21
    1546:	42 1b       	sub	r20, r18
    1548:	53 0b       	sbc	r21, r19
    154a:	fe 01       	movw	r30, r28
    154c:	e4 0f       	add	r30, r20
    154e:	f5 1f       	adc	r31, r21
    1550:	11 82       	std	Z+1, r1	; 0x01
      objs[n].who = 0;
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	22 0f       	add	r18, r18
    1558:	33 1f       	adc	r19, r19
    155a:	a9 01       	movw	r20, r18
    155c:	44 0f       	add	r20, r20
    155e:	55 1f       	adc	r21, r21
    1560:	44 0f       	add	r20, r20
    1562:	55 1f       	adc	r21, r21
    1564:	44 0f       	add	r20, r20
    1566:	55 1f       	adc	r21, r21
    1568:	42 1b       	sub	r20, r18
    156a:	53 0b       	sbc	r21, r19
    156c:	fe 01       	movw	r30, r28
    156e:	e4 0f       	add	r30, r20
    1570:	f5 1f       	adc	r31, r21
    1572:	13 82       	std	Z+3, r1	; 0x03
      objs[n].type = 4;
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	22 0f       	add	r18, r18
    157a:	33 1f       	adc	r19, r19
    157c:	a9 01       	movw	r20, r18
    157e:	44 0f       	add	r20, r20
    1580:	55 1f       	adc	r21, r21
    1582:	44 0f       	add	r20, r20
    1584:	55 1f       	adc	r21, r21
    1586:	44 0f       	add	r20, r20
    1588:	55 1f       	adc	r21, r21
    158a:	42 1b       	sub	r20, r18
    158c:	53 0b       	sbc	r21, r19
    158e:	fe 01       	movw	r30, r28
    1590:	e4 0f       	add	r30, r20
    1592:	f5 1f       	adc	r31, r21
    1594:	c2 82       	std	Z+2, r12	; 0x02
      objs[n].jump = 3;
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	22 0f       	add	r18, r18
    159c:	33 1f       	adc	r19, r19
    159e:	a9 01       	movw	r20, r18
    15a0:	44 0f       	add	r20, r20
    15a2:	55 1f       	adc	r21, r21
    15a4:	44 0f       	add	r20, r20
    15a6:	55 1f       	adc	r21, r21
    15a8:	44 0f       	add	r20, r20
    15aa:	55 1f       	adc	r21, r21
    15ac:	42 1b       	sub	r20, r18
    15ae:	53 0b       	sbc	r21, r19
    15b0:	fe 01       	movw	r30, r28
    15b2:	e4 0f       	add	r30, r20
    15b4:	f5 1f       	adc	r31, r21
    15b6:	02 87       	std	Z+10, r16	; 0x0a
      objs[n].period = CLUSTER_PER;
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	22 0f       	add	r18, r18
    15be:	33 1f       	adc	r19, r19
    15c0:	a9 01       	movw	r20, r18
    15c2:	44 0f       	add	r20, r20
    15c4:	55 1f       	adc	r21, r21
    15c6:	44 0f       	add	r20, r20
    15c8:	55 1f       	adc	r21, r21
    15ca:	44 0f       	add	r20, r20
    15cc:	55 1f       	adc	r21, r21
    15ce:	42 1b       	sub	r20, r18
    15d0:	53 0b       	sbc	r21, r19
    15d2:	fe 01       	movw	r30, r28
    15d4:	e4 0f       	add	r30, r20
    15d6:	f5 1f       	adc	r31, r21
    15d8:	f3 86       	std	Z+11, r15	; 0x0b
      objs[n].elapsedTime = objs[n].period;
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	22 0f       	add	r18, r18
    15e0:	33 1f       	adc	r19, r19
    15e2:	a9 01       	movw	r20, r18
    15e4:	44 0f       	add	r20, r20
    15e6:	55 1f       	adc	r21, r21
    15e8:	44 0f       	add	r20, r20
    15ea:	55 1f       	adc	r21, r21
    15ec:	44 0f       	add	r20, r20
    15ee:	55 1f       	adc	r21, r21
    15f0:	42 1b       	sub	r20, r18
    15f2:	53 0b       	sbc	r21, r19
    15f4:	fe 01       	movw	r30, r28
    15f6:	e4 0f       	add	r30, r20
    15f8:	f5 1f       	adc	r31, r21
    15fa:	f4 86       	std	Z+12, r15	; 0x0c
      objs[n].expire = 25;
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	22 0f       	add	r18, r18
    1602:	33 1f       	adc	r19, r19
    1604:	a9 01       	movw	r20, r18
    1606:	44 0f       	add	r20, r20
    1608:	55 1f       	adc	r21, r21
    160a:	44 0f       	add	r20, r20
    160c:	55 1f       	adc	r21, r21
    160e:	44 0f       	add	r20, r20
    1610:	55 1f       	adc	r21, r21
    1612:	42 1b       	sub	r20, r18
    1614:	53 0b       	sbc	r21, r19
    1616:	fe 01       	movw	r30, r28
    1618:	e4 0f       	add	r30, r20
    161a:	f5 1f       	adc	r31, r21
    161c:	b5 86       	std	Z+13, r11	; 0x0d
      objs[n].pos[0] = c;
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	22 0f       	add	r18, r18
    1624:	33 1f       	adc	r19, r19
    1626:	a9 01       	movw	r20, r18
    1628:	44 0f       	add	r20, r20
    162a:	55 1f       	adc	r21, r21
    162c:	44 0f       	add	r20, r20
    162e:	55 1f       	adc	r21, r21
    1630:	44 0f       	add	r20, r20
    1632:	55 1f       	adc	r21, r21
    1634:	42 1b       	sub	r20, r18
    1636:	53 0b       	sbc	r21, r19
    1638:	fe 01       	movw	r30, r28
    163a:	e4 0f       	add	r30, r20
    163c:	f5 1f       	adc	r31, r21
    163e:	e4 82       	std	Z+4, r14	; 0x04
      objs[n].pos[1] = x;
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	22 0f       	add	r18, r18
    1646:	33 1f       	adc	r19, r19
    1648:	a9 01       	movw	r20, r18
    164a:	44 0f       	add	r20, r20
    164c:	55 1f       	adc	r21, r21
    164e:	44 0f       	add	r20, r20
    1650:	55 1f       	adc	r21, r21
    1652:	44 0f       	add	r20, r20
    1654:	55 1f       	adc	r21, r21
    1656:	42 1b       	sub	r20, r18
    1658:	53 0b       	sbc	r21, r19
    165a:	fe 01       	movw	r30, r28
    165c:	e4 0f       	add	r30, r20
    165e:	f5 1f       	adc	r31, r21
    1660:	15 83       	std	Z+5, r17	; 0x05
      objs[n].pos[2] = 3;
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	22 0f       	add	r18, r18
    1668:	33 1f       	adc	r19, r19
    166a:	a9 01       	movw	r20, r18
    166c:	44 0f       	add	r20, r20
    166e:	55 1f       	adc	r21, r21
    1670:	44 0f       	add	r20, r20
    1672:	55 1f       	adc	r21, r21
    1674:	44 0f       	add	r20, r20
    1676:	55 1f       	adc	r21, r21
    1678:	42 1b       	sub	r20, r18
    167a:	53 0b       	sbc	r21, r19
    167c:	fe 01       	movw	r30, r28
    167e:	e4 0f       	add	r30, r20
    1680:	f5 1f       	adc	r31, r21
    1682:	06 83       	std	Z+6, r16	; 0x06
      objs[n].pos[3] = 0;
    1684:	28 2f       	mov	r18, r24
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	22 0f       	add	r18, r18
    168a:	33 1f       	adc	r19, r19
    168c:	a9 01       	movw	r20, r18
    168e:	44 0f       	add	r20, r20
    1690:	55 1f       	adc	r21, r21
    1692:	44 0f       	add	r20, r20
    1694:	55 1f       	adc	r21, r21
    1696:	44 0f       	add	r20, r20
    1698:	55 1f       	adc	r21, r21
    169a:	42 1b       	sub	r20, r18
    169c:	53 0b       	sbc	r21, r19
    169e:	fe 01       	movw	r30, r28
    16a0:	e4 0f       	add	r30, r20
    16a2:	f5 1f       	adc	r31, r21
    16a4:	17 82       	std	Z+7, r1	; 0x07
      objs[n].next[0] = x;
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	22 0f       	add	r18, r18
    16ac:	33 1f       	adc	r19, r19
    16ae:	a9 01       	movw	r20, r18
    16b0:	44 0f       	add	r20, r20
    16b2:	55 1f       	adc	r21, r21
    16b4:	44 0f       	add	r20, r20
    16b6:	55 1f       	adc	r21, r21
    16b8:	44 0f       	add	r20, r20
    16ba:	55 1f       	adc	r21, r21
    16bc:	42 1b       	sub	r20, r18
    16be:	53 0b       	sbc	r21, r19
    16c0:	fe 01       	movw	r30, r28
    16c2:	e4 0f       	add	r30, r20
    16c4:	f5 1f       	adc	r31, r21
    16c6:	10 87       	std	Z+8, r17	; 0x08
      objs[n].next[1] = 0;
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	c9 01       	movw	r24, r18
    16ce:	88 0f       	add	r24, r24
    16d0:	99 1f       	adc	r25, r25
    16d2:	9c 01       	movw	r18, r24
    16d4:	22 0f       	add	r18, r18
    16d6:	33 1f       	adc	r19, r19
    16d8:	22 0f       	add	r18, r18
    16da:	33 1f       	adc	r19, r19
    16dc:	22 0f       	add	r18, r18
    16de:	33 1f       	adc	r19, r19
    16e0:	28 1b       	sub	r18, r24
    16e2:	39 0b       	sbc	r19, r25
    16e4:	fe 01       	movw	r30, r28
    16e6:	e2 0f       	add	r30, r18
    16e8:	f3 1f       	adc	r31, r19
    16ea:	11 86       	std	Z+9, r1	; 0x09
void genEvent( char eventNo ) {
  switch(eventNo) {
    case 0: { // spawn a cluster bomb
      char c = (rand() % (COL_SPACE / 2)) + 2;
      char x = rand() % 5;
      for(signed char x = -1; x < 2; ++x) {
    16ec:	1f 5f       	subi	r17, 0xFF	; 255
    16ee:	12 30       	cpi	r17, 0x02	; 2
    16f0:	09 f0       	breq	.+2      	; 0x16f4 <genEvent+0x24a>
    16f2:	0b cf       	rjmp	.-490    	; 0x150a <genEvent+0x60>
    16f4:	1c c2       	rjmp	.+1080   	; 0x1b2e <genEvent+0x684>
      objs[n].next[1] = 0;
      }
    }
    break;
  case 1: { // generate an instance of rain
      char n = getNewObj();
    16f6:	0e 94 ab 04 	call	0x956	; 0x956 <getNewObj>
    16fa:	c8 2f       	mov	r28, r24
      if( n == -1 ) return;
      objs[n].exist = true;
    16fc:	03 e8       	ldi	r16, 0x83	; 131
    16fe:	11 e0       	ldi	r17, 0x01	; 1
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	88 0f       	add	r24, r24
    1704:	99 1f       	adc	r25, r25
    1706:	9c 01       	movw	r18, r24
    1708:	22 0f       	add	r18, r18
    170a:	33 1f       	adc	r19, r19
    170c:	22 0f       	add	r18, r18
    170e:	33 1f       	adc	r19, r19
    1710:	22 0f       	add	r18, r18
    1712:	33 1f       	adc	r19, r19
    1714:	28 1b       	sub	r18, r24
    1716:	39 0b       	sbc	r19, r25
    1718:	f8 01       	movw	r30, r16
    171a:	e2 0f       	add	r30, r18
    171c:	f3 1f       	adc	r31, r19
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	80 83       	st	Z, r24
      objs[n].collide = false;
    1722:	8c 2f       	mov	r24, r28
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	9c 01       	movw	r18, r24
    172c:	22 0f       	add	r18, r18
    172e:	33 1f       	adc	r19, r19
    1730:	22 0f       	add	r18, r18
    1732:	33 1f       	adc	r19, r19
    1734:	22 0f       	add	r18, r18
    1736:	33 1f       	adc	r19, r19
    1738:	28 1b       	sub	r18, r24
    173a:	39 0b       	sbc	r19, r25
    173c:	f8 01       	movw	r30, r16
    173e:	e2 0f       	add	r30, r18
    1740:	f3 1f       	adc	r31, r19
    1742:	11 82       	std	Z+1, r1	; 0x01
      objs[n].who = 0;
    1744:	8c 2f       	mov	r24, r28
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	9c 01       	movw	r18, r24
    174e:	22 0f       	add	r18, r18
    1750:	33 1f       	adc	r19, r19
    1752:	22 0f       	add	r18, r18
    1754:	33 1f       	adc	r19, r19
    1756:	22 0f       	add	r18, r18
    1758:	33 1f       	adc	r19, r19
    175a:	28 1b       	sub	r18, r24
    175c:	39 0b       	sbc	r19, r25
    175e:	f8 01       	movw	r30, r16
    1760:	e2 0f       	add	r30, r18
    1762:	f3 1f       	adc	r31, r19
    1764:	13 82       	std	Z+3, r1	; 0x03
      objs[n].type = 0;
    1766:	8c 2f       	mov	r24, r28
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	9c 01       	movw	r18, r24
    1770:	22 0f       	add	r18, r18
    1772:	33 1f       	adc	r19, r19
    1774:	22 0f       	add	r18, r18
    1776:	33 1f       	adc	r19, r19
    1778:	22 0f       	add	r18, r18
    177a:	33 1f       	adc	r19, r19
    177c:	28 1b       	sub	r18, r24
    177e:	39 0b       	sbc	r19, r25
    1780:	f8 01       	movw	r30, r16
    1782:	e2 0f       	add	r30, r18
    1784:	f3 1f       	adc	r31, r19
    1786:	12 82       	std	Z+2, r1	; 0x02
      objs[n].jump = 0;
    1788:	8c 2f       	mov	r24, r28
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	88 0f       	add	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	9c 01       	movw	r18, r24
    1792:	22 0f       	add	r18, r18
    1794:	33 1f       	adc	r19, r19
    1796:	22 0f       	add	r18, r18
    1798:	33 1f       	adc	r19, r19
    179a:	22 0f       	add	r18, r18
    179c:	33 1f       	adc	r19, r19
    179e:	28 1b       	sub	r18, r24
    17a0:	39 0b       	sbc	r19, r25
    17a2:	f8 01       	movw	r30, r16
    17a4:	e2 0f       	add	r30, r18
    17a6:	f3 1f       	adc	r31, r19
    17a8:	12 86       	std	Z+10, r1	; 0x0a
      objs[n].period = 2;
    17aa:	8c 2f       	mov	r24, r28
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	88 0f       	add	r24, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	9c 01       	movw	r18, r24
    17b4:	22 0f       	add	r18, r18
    17b6:	33 1f       	adc	r19, r19
    17b8:	22 0f       	add	r18, r18
    17ba:	33 1f       	adc	r19, r19
    17bc:	22 0f       	add	r18, r18
    17be:	33 1f       	adc	r19, r19
    17c0:	28 1b       	sub	r18, r24
    17c2:	39 0b       	sbc	r19, r25
    17c4:	f8 01       	movw	r30, r16
    17c6:	e2 0f       	add	r30, r18
    17c8:	f3 1f       	adc	r31, r19
    17ca:	42 e0       	ldi	r20, 0x02	; 2
    17cc:	43 87       	std	Z+11, r20	; 0x0b
      objs[n].elapsedTime = objs[n].period;
    17ce:	8c 2f       	mov	r24, r28
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	9c 01       	movw	r18, r24
    17d8:	22 0f       	add	r18, r18
    17da:	33 1f       	adc	r19, r19
    17dc:	22 0f       	add	r18, r18
    17de:	33 1f       	adc	r19, r19
    17e0:	22 0f       	add	r18, r18
    17e2:	33 1f       	adc	r19, r19
    17e4:	28 1b       	sub	r18, r24
    17e6:	39 0b       	sbc	r19, r25
    17e8:	f8 01       	movw	r30, r16
    17ea:	e2 0f       	add	r30, r18
    17ec:	f3 1f       	adc	r31, r19
    17ee:	44 87       	std	Z+12, r20	; 0x0c
      objs[n].expire = 0;
    17f0:	8c 2f       	mov	r24, r28
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	88 0f       	add	r24, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	9c 01       	movw	r18, r24
    17fa:	22 0f       	add	r18, r18
    17fc:	33 1f       	adc	r19, r19
    17fe:	22 0f       	add	r18, r18
    1800:	33 1f       	adc	r19, r19
    1802:	22 0f       	add	r18, r18
    1804:	33 1f       	adc	r19, r19
    1806:	28 1b       	sub	r18, r24
    1808:	39 0b       	sbc	r19, r25
    180a:	f8 01       	movw	r30, r16
    180c:	e2 0f       	add	r30, r18
    180e:	f3 1f       	adc	r31, r19
    1810:	15 86       	std	Z+13, r1	; 0x0d
      objs[n].pos[0] = (rand() % COL_SPACE);
    1812:	0e 94 9f 20 	call	0x413e	; 0x413e <rand>
    1816:	ac 01       	movw	r20, r24
    1818:	8c 2f       	mov	r24, r28
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	88 0f       	add	r24, r24
    181e:	99 1f       	adc	r25, r25
    1820:	9c 01       	movw	r18, r24
    1822:	22 0f       	add	r18, r18
    1824:	33 1f       	adc	r19, r19
    1826:	22 0f       	add	r18, r18
    1828:	33 1f       	adc	r19, r19
    182a:	22 0f       	add	r18, r18
    182c:	33 1f       	adc	r19, r19
    182e:	28 1b       	sub	r18, r24
    1830:	39 0b       	sbc	r19, r25
    1832:	f8 01       	movw	r30, r16
    1834:	e2 0f       	add	r30, r18
    1836:	f3 1f       	adc	r31, r19
    1838:	ca 01       	movw	r24, r20
    183a:	68 e0       	ldi	r22, 0x08	; 8
    183c:	70 e0       	ldi	r23, 0x00	; 0
    183e:	0e 94 37 20 	call	0x406e	; 0x406e <__divmodhi4>
    1842:	84 83       	std	Z+4, r24	; 0x04
      objs[n].pos[1] = rand() % 5;
    1844:	0e 94 9f 20 	call	0x413e	; 0x413e <rand>
    1848:	ac 01       	movw	r20, r24
    184a:	8c 2f       	mov	r24, r28
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	88 0f       	add	r24, r24
    1850:	99 1f       	adc	r25, r25
    1852:	9c 01       	movw	r18, r24
    1854:	22 0f       	add	r18, r18
    1856:	33 1f       	adc	r19, r19
    1858:	22 0f       	add	r18, r18
    185a:	33 1f       	adc	r19, r19
    185c:	22 0f       	add	r18, r18
    185e:	33 1f       	adc	r19, r19
    1860:	28 1b       	sub	r18, r24
    1862:	39 0b       	sbc	r19, r25
    1864:	f8 01       	movw	r30, r16
    1866:	e2 0f       	add	r30, r18
    1868:	f3 1f       	adc	r31, r19
    186a:	ca 01       	movw	r24, r20
    186c:	65 e0       	ldi	r22, 0x05	; 5
    186e:	70 e0       	ldi	r23, 0x00	; 0
    1870:	0e 94 37 20 	call	0x406e	; 0x406e <__divmodhi4>
    1874:	85 83       	std	Z+5, r24	; 0x05
      objs[n].pos[2] = -1;
    1876:	8c 2f       	mov	r24, r28
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	88 0f       	add	r24, r24
    187c:	99 1f       	adc	r25, r25
    187e:	9c 01       	movw	r18, r24
    1880:	22 0f       	add	r18, r18
    1882:	33 1f       	adc	r19, r19
    1884:	22 0f       	add	r18, r18
    1886:	33 1f       	adc	r19, r19
    1888:	22 0f       	add	r18, r18
    188a:	33 1f       	adc	r19, r19
    188c:	28 1b       	sub	r18, r24
    188e:	39 0b       	sbc	r19, r25
    1890:	f8 01       	movw	r30, r16
    1892:	e2 0f       	add	r30, r18
    1894:	f3 1f       	adc	r31, r19
    1896:	8f ef       	ldi	r24, 0xFF	; 255
    1898:	86 83       	std	Z+6, r24	; 0x06
      objs[n].pos[3] = 0;
    189a:	8c 2f       	mov	r24, r28
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	9c 01       	movw	r18, r24
    18a4:	22 0f       	add	r18, r18
    18a6:	33 1f       	adc	r19, r19
    18a8:	22 0f       	add	r18, r18
    18aa:	33 1f       	adc	r19, r19
    18ac:	22 0f       	add	r18, r18
    18ae:	33 1f       	adc	r19, r19
    18b0:	28 1b       	sub	r18, r24
    18b2:	39 0b       	sbc	r19, r25
    18b4:	f8 01       	movw	r30, r16
    18b6:	e2 0f       	add	r30, r18
    18b8:	f3 1f       	adc	r31, r19
    18ba:	17 82       	std	Z+7, r1	; 0x07
      objs[n].next[0] = rand() % 2;
    18bc:	0e 94 9f 20 	call	0x413e	; 0x413e <rand>
    18c0:	ac 01       	movw	r20, r24
    18c2:	8c 2f       	mov	r24, r28
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	88 0f       	add	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	9c 01       	movw	r18, r24
    18cc:	22 0f       	add	r18, r18
    18ce:	33 1f       	adc	r19, r19
    18d0:	22 0f       	add	r18, r18
    18d2:	33 1f       	adc	r19, r19
    18d4:	22 0f       	add	r18, r18
    18d6:	33 1f       	adc	r19, r19
    18d8:	28 1b       	sub	r18, r24
    18da:	39 0b       	sbc	r19, r25
    18dc:	f8 01       	movw	r30, r16
    18de:	e2 0f       	add	r30, r18
    18e0:	f3 1f       	adc	r31, r19
    18e2:	ca 01       	movw	r24, r20
    18e4:	62 e0       	ldi	r22, 0x02	; 2
    18e6:	70 e0       	ldi	r23, 0x00	; 0
    18e8:	0e 94 37 20 	call	0x406e	; 0x406e <__divmodhi4>
    18ec:	80 87       	std	Z+8, r24	; 0x08
      objs[n].next[1] = 0;
    18ee:	8c 2f       	mov	r24, r28
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	9c 01       	movw	r18, r24
    18f8:	22 0f       	add	r18, r18
    18fa:	33 1f       	adc	r19, r19
    18fc:	22 0f       	add	r18, r18
    18fe:	33 1f       	adc	r19, r19
    1900:	22 0f       	add	r18, r18
    1902:	33 1f       	adc	r19, r19
    1904:	a9 01       	movw	r20, r18
    1906:	48 1b       	sub	r20, r24
    1908:	59 0b       	sbc	r21, r25
    190a:	04 0f       	add	r16, r20
    190c:	15 1f       	adc	r17, r21
    190e:	f8 01       	movw	r30, r16
    1910:	11 86       	std	Z+9, r1	; 0x09
    }   
    break;
    1912:	0d c1       	rjmp	.+538    	; 0x1b2e <genEvent+0x684>
  case 2:
    for(signed char c = 0; c < COL_SPACE; ++c) {
      for(char x = 0; x != 5; ++x) {
        char n = getNewObj();
    1914:	0e 94 ab 04 	call	0x956	; 0x956 <getNewObj>
        if( n == -1 ) return;
        objs[n].exist = true;
    1918:	28 2f       	mov	r18, r24
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	22 0f       	add	r18, r18
    191e:	33 1f       	adc	r19, r19
    1920:	a9 01       	movw	r20, r18
    1922:	44 0f       	add	r20, r20
    1924:	55 1f       	adc	r21, r21
    1926:	44 0f       	add	r20, r20
    1928:	55 1f       	adc	r21, r21
    192a:	44 0f       	add	r20, r20
    192c:	55 1f       	adc	r21, r21
    192e:	42 1b       	sub	r20, r18
    1930:	53 0b       	sbc	r21, r19
    1932:	fe 01       	movw	r30, r28
    1934:	e4 0f       	add	r30, r20
    1936:	f5 1f       	adc	r31, r21
    1938:	f0 82       	st	Z, r15
        objs[n].collide = false;
    193a:	28 2f       	mov	r18, r24
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	22 0f       	add	r18, r18
    1940:	33 1f       	adc	r19, r19
    1942:	a9 01       	movw	r20, r18
    1944:	44 0f       	add	r20, r20
    1946:	55 1f       	adc	r21, r21
    1948:	44 0f       	add	r20, r20
    194a:	55 1f       	adc	r21, r21
    194c:	44 0f       	add	r20, r20
    194e:	55 1f       	adc	r21, r21
    1950:	42 1b       	sub	r20, r18
    1952:	53 0b       	sbc	r21, r19
    1954:	fe 01       	movw	r30, r28
    1956:	e4 0f       	add	r30, r20
    1958:	f5 1f       	adc	r31, r21
    195a:	11 82       	std	Z+1, r1	; 0x01
        objs[n].who = 3;
    195c:	28 2f       	mov	r18, r24
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	22 0f       	add	r18, r18
    1962:	33 1f       	adc	r19, r19
    1964:	a9 01       	movw	r20, r18
    1966:	44 0f       	add	r20, r20
    1968:	55 1f       	adc	r21, r21
    196a:	44 0f       	add	r20, r20
    196c:	55 1f       	adc	r21, r21
    196e:	44 0f       	add	r20, r20
    1970:	55 1f       	adc	r21, r21
    1972:	42 1b       	sub	r20, r18
    1974:	53 0b       	sbc	r21, r19
    1976:	fe 01       	movw	r30, r28
    1978:	e4 0f       	add	r30, r20
    197a:	f5 1f       	adc	r31, r21
    197c:	03 83       	std	Z+3, r16	; 0x03
        objs[n].type = 1;
    197e:	28 2f       	mov	r18, r24
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	22 0f       	add	r18, r18
    1984:	33 1f       	adc	r19, r19
    1986:	a9 01       	movw	r20, r18
    1988:	44 0f       	add	r20, r20
    198a:	55 1f       	adc	r21, r21
    198c:	44 0f       	add	r20, r20
    198e:	55 1f       	adc	r21, r21
    1990:	44 0f       	add	r20, r20
    1992:	55 1f       	adc	r21, r21
    1994:	42 1b       	sub	r20, r18
    1996:	53 0b       	sbc	r21, r19
    1998:	fe 01       	movw	r30, r28
    199a:	e4 0f       	add	r30, r20
    199c:	f5 1f       	adc	r31, r21
    199e:	f2 82       	std	Z+2, r15	; 0x02
        objs[n].jump = -1;
    19a0:	28 2f       	mov	r18, r24
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	22 0f       	add	r18, r18
    19a6:	33 1f       	adc	r19, r19
    19a8:	a9 01       	movw	r20, r18
    19aa:	44 0f       	add	r20, r20
    19ac:	55 1f       	adc	r21, r21
    19ae:	44 0f       	add	r20, r20
    19b0:	55 1f       	adc	r21, r21
    19b2:	44 0f       	add	r20, r20
    19b4:	55 1f       	adc	r21, r21
    19b6:	42 1b       	sub	r20, r18
    19b8:	53 0b       	sbc	r21, r19
    19ba:	fe 01       	movw	r30, r28
    19bc:	e4 0f       	add	r30, r20
    19be:	f5 1f       	adc	r31, r21
    19c0:	d2 86       	std	Z+10, r13	; 0x0a
        objs[n].period = 3;
    19c2:	28 2f       	mov	r18, r24
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	22 0f       	add	r18, r18
    19c8:	33 1f       	adc	r19, r19
    19ca:	a9 01       	movw	r20, r18
    19cc:	44 0f       	add	r20, r20
    19ce:	55 1f       	adc	r21, r21
    19d0:	44 0f       	add	r20, r20
    19d2:	55 1f       	adc	r21, r21
    19d4:	44 0f       	add	r20, r20
    19d6:	55 1f       	adc	r21, r21
    19d8:	42 1b       	sub	r20, r18
    19da:	53 0b       	sbc	r21, r19
    19dc:	fe 01       	movw	r30, r28
    19de:	e4 0f       	add	r30, r20
    19e0:	f5 1f       	adc	r31, r21
    19e2:	03 87       	std	Z+11, r16	; 0x0b
        objs[n].elapsedTime = objs[n].period;
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	22 0f       	add	r18, r18
    19ea:	33 1f       	adc	r19, r19
    19ec:	a9 01       	movw	r20, r18
    19ee:	44 0f       	add	r20, r20
    19f0:	55 1f       	adc	r21, r21
    19f2:	44 0f       	add	r20, r20
    19f4:	55 1f       	adc	r21, r21
    19f6:	44 0f       	add	r20, r20
    19f8:	55 1f       	adc	r21, r21
    19fa:	42 1b       	sub	r20, r18
    19fc:	53 0b       	sbc	r21, r19
    19fe:	fe 01       	movw	r30, r28
    1a00:	e4 0f       	add	r30, r20
    1a02:	f5 1f       	adc	r31, r21
    1a04:	04 87       	std	Z+12, r16	; 0x0c
        objs[n].expire = 5;
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	22 0f       	add	r18, r18
    1a0c:	33 1f       	adc	r19, r19
    1a0e:	a9 01       	movw	r20, r18
    1a10:	44 0f       	add	r20, r20
    1a12:	55 1f       	adc	r21, r21
    1a14:	44 0f       	add	r20, r20
    1a16:	55 1f       	adc	r21, r21
    1a18:	44 0f       	add	r20, r20
    1a1a:	55 1f       	adc	r21, r21
    1a1c:	42 1b       	sub	r20, r18
    1a1e:	53 0b       	sbc	r21, r19
    1a20:	fe 01       	movw	r30, r28
    1a22:	e4 0f       	add	r30, r20
    1a24:	f5 1f       	adc	r31, r21
    1a26:	c5 86       	std	Z+13, r12	; 0x0d
        objs[n].pos[0] = c;
    1a28:	28 2f       	mov	r18, r24
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	22 0f       	add	r18, r18
    1a2e:	33 1f       	adc	r19, r19
    1a30:	a9 01       	movw	r20, r18
    1a32:	44 0f       	add	r20, r20
    1a34:	55 1f       	adc	r21, r21
    1a36:	44 0f       	add	r20, r20
    1a38:	55 1f       	adc	r21, r21
    1a3a:	44 0f       	add	r20, r20
    1a3c:	55 1f       	adc	r21, r21
    1a3e:	42 1b       	sub	r20, r18
    1a40:	53 0b       	sbc	r21, r19
    1a42:	fe 01       	movw	r30, r28
    1a44:	e4 0f       	add	r30, r20
    1a46:	f5 1f       	adc	r31, r21
    1a48:	e4 82       	std	Z+4, r14	; 0x04
        objs[n].pos[1] = x;
    1a4a:	28 2f       	mov	r18, r24
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	22 0f       	add	r18, r18
    1a50:	33 1f       	adc	r19, r19
    1a52:	a9 01       	movw	r20, r18
    1a54:	44 0f       	add	r20, r20
    1a56:	55 1f       	adc	r21, r21
    1a58:	44 0f       	add	r20, r20
    1a5a:	55 1f       	adc	r21, r21
    1a5c:	44 0f       	add	r20, r20
    1a5e:	55 1f       	adc	r21, r21
    1a60:	42 1b       	sub	r20, r18
    1a62:	53 0b       	sbc	r21, r19
    1a64:	fe 01       	movw	r30, r28
    1a66:	e4 0f       	add	r30, r20
    1a68:	f5 1f       	adc	r31, r21
    1a6a:	15 83       	std	Z+5, r17	; 0x05
        objs[n].pos[2] = 7;
    1a6c:	28 2f       	mov	r18, r24
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	22 0f       	add	r18, r18
    1a72:	33 1f       	adc	r19, r19
    1a74:	a9 01       	movw	r20, r18
    1a76:	44 0f       	add	r20, r20
    1a78:	55 1f       	adc	r21, r21
    1a7a:	44 0f       	add	r20, r20
    1a7c:	55 1f       	adc	r21, r21
    1a7e:	44 0f       	add	r20, r20
    1a80:	55 1f       	adc	r21, r21
    1a82:	42 1b       	sub	r20, r18
    1a84:	53 0b       	sbc	r21, r19
    1a86:	fe 01       	movw	r30, r28
    1a88:	e4 0f       	add	r30, r20
    1a8a:	f5 1f       	adc	r31, r21
    1a8c:	b6 82       	std	Z+6, r11	; 0x06
        objs[n].pos[3] = 0;
    1a8e:	28 2f       	mov	r18, r24
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	22 0f       	add	r18, r18
    1a94:	33 1f       	adc	r19, r19
    1a96:	a9 01       	movw	r20, r18
    1a98:	44 0f       	add	r20, r20
    1a9a:	55 1f       	adc	r21, r21
    1a9c:	44 0f       	add	r20, r20
    1a9e:	55 1f       	adc	r21, r21
    1aa0:	44 0f       	add	r20, r20
    1aa2:	55 1f       	adc	r21, r21
    1aa4:	42 1b       	sub	r20, r18
    1aa6:	53 0b       	sbc	r21, r19
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	e4 0f       	add	r30, r20
    1aac:	f5 1f       	adc	r31, r21
    1aae:	17 82       	std	Z+7, r1	; 0x07
        objs[n].next[0] = 0;
    1ab0:	28 2f       	mov	r18, r24
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	22 0f       	add	r18, r18
    1ab6:	33 1f       	adc	r19, r19
    1ab8:	a9 01       	movw	r20, r18
    1aba:	44 0f       	add	r20, r20
    1abc:	55 1f       	adc	r21, r21
    1abe:	44 0f       	add	r20, r20
    1ac0:	55 1f       	adc	r21, r21
    1ac2:	44 0f       	add	r20, r20
    1ac4:	55 1f       	adc	r21, r21
    1ac6:	42 1b       	sub	r20, r18
    1ac8:	53 0b       	sbc	r21, r19
    1aca:	fe 01       	movw	r30, r28
    1acc:	e4 0f       	add	r30, r20
    1ace:	f5 1f       	adc	r31, r21
    1ad0:	10 86       	std	Z+8, r1	; 0x08
        objs[n].next[1] = 0;
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	c9 01       	movw	r24, r18
    1ad8:	88 0f       	add	r24, r24
    1ada:	99 1f       	adc	r25, r25
    1adc:	9c 01       	movw	r18, r24
    1ade:	22 0f       	add	r18, r18
    1ae0:	33 1f       	adc	r19, r19
    1ae2:	22 0f       	add	r18, r18
    1ae4:	33 1f       	adc	r19, r19
    1ae6:	22 0f       	add	r18, r18
    1ae8:	33 1f       	adc	r19, r19
    1aea:	28 1b       	sub	r18, r24
    1aec:	39 0b       	sbc	r19, r25
    1aee:	fe 01       	movw	r30, r28
    1af0:	e2 0f       	add	r30, r18
    1af2:	f3 1f       	adc	r31, r19
    1af4:	11 86       	std	Z+9, r1	; 0x09
      objs[n].next[1] = 0;
    }   
    break;
  case 2:
    for(signed char c = 0; c < COL_SPACE; ++c) {
      for(char x = 0; x != 5; ++x) {
    1af6:	1f 5f       	subi	r17, 0xFF	; 255
    1af8:	15 30       	cpi	r17, 0x05	; 5
    1afa:	09 f0       	breq	.+2      	; 0x1afe <genEvent+0x654>
    1afc:	0b cf       	rjmp	.-490    	; 0x1914 <genEvent+0x46a>
      objs[n].next[0] = rand() % 2;
      objs[n].next[1] = 0;
    }   
    break;
  case 2:
    for(signed char c = 0; c < COL_SPACE; ++c) {
    1afe:	e3 94       	inc	r14
    1b00:	f8 e0       	ldi	r31, 0x08	; 8
    1b02:	ef 16       	cp	r14, r31
    1b04:	91 f4       	brne	.+36     	; 0x1b2a <genEvent+0x680>
    1b06:	13 c0       	rjmp	.+38     	; 0x1b2e <genEvent+0x684>
  }
  drawField();
}

void genEvent( char eventNo ) {
  switch(eventNo) {
    1b08:	ee 24       	eor	r14, r14
    case 0: { // spawn a cluster bomb
      char c = (rand() % (COL_SPACE / 2)) + 2;
      char x = rand() % 5;
      for(signed char x = -1; x < 2; ++x) {
    1b0a:	aa 24       	eor	r10, r10
  case 2:
    for(signed char c = 0; c < COL_SPACE; ++c) {
      for(char x = 0; x != 5; ++x) {
        char n = getNewObj();
        if( n == -1 ) return;
        objs[n].exist = true;
    1b0c:	c3 e8       	ldi	r28, 0x83	; 131
    1b0e:	d1 e0       	ldi	r29, 0x01	; 1
    1b10:	ff 24       	eor	r15, r15
    1b12:	f3 94       	inc	r15
        objs[n].collide = false;
        objs[n].who = 3;
    1b14:	03 e0       	ldi	r16, 0x03	; 3
        objs[n].type = 1;
        objs[n].jump = -1;
    1b16:	dd 24       	eor	r13, r13
    1b18:	da 94       	dec	r13
        objs[n].period = 3;
        objs[n].elapsedTime = objs[n].period;
        objs[n].expire = 5;
    1b1a:	0f 2e       	mov	r0, r31
    1b1c:	f5 e0       	ldi	r31, 0x05	; 5
    1b1e:	cf 2e       	mov	r12, r31
    1b20:	f0 2d       	mov	r31, r0
        objs[n].pos[0] = c;
        objs[n].pos[1] = x;
        objs[n].pos[2] = 7;
    1b22:	0f 2e       	mov	r0, r31
    1b24:	f7 e0       	ldi	r31, 0x07	; 7
    1b26:	bf 2e       	mov	r11, r31
    1b28:	f0 2d       	mov	r31, r0
void genEvent( char eventNo ) {
  switch(eventNo) {
    case 0: { // spawn a cluster bomb
      char c = (rand() % (COL_SPACE / 2)) + 2;
      char x = rand() % 5;
      for(signed char x = -1; x < 2; ++x) {
    1b2a:	1a 2d       	mov	r17, r10
    1b2c:	f3 ce       	rjmp	.-538    	; 0x1914 <genEvent+0x46a>
    }
    break;
  default:
    break;
  } 
}
    1b2e:	df 91       	pop	r29
    1b30:	cf 91       	pop	r28
    1b32:	1f 91       	pop	r17
    1b34:	0f 91       	pop	r16
    1b36:	ff 90       	pop	r15
    1b38:	ef 90       	pop	r14
    1b3a:	df 90       	pop	r13
    1b3c:	cf 90       	pop	r12
    1b3e:	bf 90       	pop	r11
    1b40:	af 90       	pop	r10
    1b42:	08 95       	ret

00001b44 <genItem>:

// Creates an item to pickup
void genItem( char iType ) {
    1b44:	0f 93       	push	r16
    1b46:	1f 93       	push	r17
    1b48:	cf 93       	push	r28
    1b4a:	df 93       	push	r29
    1b4c:	d8 2f       	mov	r29, r24
  char n = getNewObj();
    1b4e:	0e 94 ab 04 	call	0x956	; 0x956 <getNewObj>
    1b52:	c8 2f       	mov	r28, r24
  if( n == -1 ) return;
  objs[n].exist = true;
    1b54:	03 e8       	ldi	r16, 0x83	; 131
    1b56:	11 e0       	ldi	r17, 0x01	; 1
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	88 0f       	add	r24, r24
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	9c 01       	movw	r18, r24
    1b60:	22 0f       	add	r18, r18
    1b62:	33 1f       	adc	r19, r19
    1b64:	22 0f       	add	r18, r18
    1b66:	33 1f       	adc	r19, r19
    1b68:	22 0f       	add	r18, r18
    1b6a:	33 1f       	adc	r19, r19
    1b6c:	28 1b       	sub	r18, r24
    1b6e:	39 0b       	sbc	r19, r25
    1b70:	f8 01       	movw	r30, r16
    1b72:	e2 0f       	add	r30, r18
    1b74:	f3 1f       	adc	r31, r19
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	80 83       	st	Z, r24
  objs[n].collide = false;
    1b7a:	8c 2f       	mov	r24, r28
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	88 0f       	add	r24, r24
    1b80:	99 1f       	adc	r25, r25
    1b82:	9c 01       	movw	r18, r24
    1b84:	22 0f       	add	r18, r18
    1b86:	33 1f       	adc	r19, r19
    1b88:	22 0f       	add	r18, r18
    1b8a:	33 1f       	adc	r19, r19
    1b8c:	22 0f       	add	r18, r18
    1b8e:	33 1f       	adc	r19, r19
    1b90:	28 1b       	sub	r18, r24
    1b92:	39 0b       	sbc	r19, r25
    1b94:	f8 01       	movw	r30, r16
    1b96:	e2 0f       	add	r30, r18
    1b98:	f3 1f       	adc	r31, r19
    1b9a:	11 82       	std	Z+1, r1	; 0x01
  objs[n].who = 0;
    1b9c:	8c 2f       	mov	r24, r28
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	88 0f       	add	r24, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	9c 01       	movw	r18, r24
    1ba6:	22 0f       	add	r18, r18
    1ba8:	33 1f       	adc	r19, r19
    1baa:	22 0f       	add	r18, r18
    1bac:	33 1f       	adc	r19, r19
    1bae:	22 0f       	add	r18, r18
    1bb0:	33 1f       	adc	r19, r19
    1bb2:	28 1b       	sub	r18, r24
    1bb4:	39 0b       	sbc	r19, r25
    1bb6:	f8 01       	movw	r30, r16
    1bb8:	e2 0f       	add	r30, r18
    1bba:	f3 1f       	adc	r31, r19
    1bbc:	13 82       	std	Z+3, r1	; 0x03
  objs[n].type = iType;
    1bbe:	8c 2f       	mov	r24, r28
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	88 0f       	add	r24, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	9c 01       	movw	r18, r24
    1bc8:	22 0f       	add	r18, r18
    1bca:	33 1f       	adc	r19, r19
    1bcc:	22 0f       	add	r18, r18
    1bce:	33 1f       	adc	r19, r19
    1bd0:	22 0f       	add	r18, r18
    1bd2:	33 1f       	adc	r19, r19
    1bd4:	28 1b       	sub	r18, r24
    1bd6:	39 0b       	sbc	r19, r25
    1bd8:	f8 01       	movw	r30, r16
    1bda:	e2 0f       	add	r30, r18
    1bdc:	f3 1f       	adc	r31, r19
    1bde:	d2 83       	std	Z+2, r29	; 0x02
  objs[n].jump = 4;
    1be0:	8c 2f       	mov	r24, r28
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	88 0f       	add	r24, r24
    1be6:	99 1f       	adc	r25, r25
    1be8:	9c 01       	movw	r18, r24
    1bea:	22 0f       	add	r18, r18
    1bec:	33 1f       	adc	r19, r19
    1bee:	22 0f       	add	r18, r18
    1bf0:	33 1f       	adc	r19, r19
    1bf2:	22 0f       	add	r18, r18
    1bf4:	33 1f       	adc	r19, r19
    1bf6:	28 1b       	sub	r18, r24
    1bf8:	39 0b       	sbc	r19, r25
    1bfa:	f8 01       	movw	r30, r16
    1bfc:	e2 0f       	add	r30, r18
    1bfe:	f3 1f       	adc	r31, r19
    1c00:	d4 e0       	ldi	r29, 0x04	; 4
    1c02:	d2 87       	std	Z+10, r29	; 0x0a
  objs[n].period = ITEM_PER;
    1c04:	8c 2f       	mov	r24, r28
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	88 0f       	add	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	9c 01       	movw	r18, r24
    1c0e:	22 0f       	add	r18, r18
    1c10:	33 1f       	adc	r19, r19
    1c12:	22 0f       	add	r18, r18
    1c14:	33 1f       	adc	r19, r19
    1c16:	22 0f       	add	r18, r18
    1c18:	33 1f       	adc	r19, r19
    1c1a:	28 1b       	sub	r18, r24
    1c1c:	39 0b       	sbc	r19, r25
    1c1e:	f8 01       	movw	r30, r16
    1c20:	e2 0f       	add	r30, r18
    1c22:	f3 1f       	adc	r31, r19
    1c24:	49 e0       	ldi	r20, 0x09	; 9
    1c26:	43 87       	std	Z+11, r20	; 0x0b
  objs[n].elapsedTime = objs[n].period;
    1c28:	8c 2f       	mov	r24, r28
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	88 0f       	add	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	9c 01       	movw	r18, r24
    1c32:	22 0f       	add	r18, r18
    1c34:	33 1f       	adc	r19, r19
    1c36:	22 0f       	add	r18, r18
    1c38:	33 1f       	adc	r19, r19
    1c3a:	22 0f       	add	r18, r18
    1c3c:	33 1f       	adc	r19, r19
    1c3e:	28 1b       	sub	r18, r24
    1c40:	39 0b       	sbc	r19, r25
    1c42:	f8 01       	movw	r30, r16
    1c44:	e2 0f       	add	r30, r18
    1c46:	f3 1f       	adc	r31, r19
    1c48:	44 87       	std	Z+12, r20	; 0x0c
  objs[n].expire = ITEM_DUR;
    1c4a:	8c 2f       	mov	r24, r28
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	88 0f       	add	r24, r24
    1c50:	99 1f       	adc	r25, r25
    1c52:	9c 01       	movw	r18, r24
    1c54:	22 0f       	add	r18, r18
    1c56:	33 1f       	adc	r19, r19
    1c58:	22 0f       	add	r18, r18
    1c5a:	33 1f       	adc	r19, r19
    1c5c:	22 0f       	add	r18, r18
    1c5e:	33 1f       	adc	r19, r19
    1c60:	28 1b       	sub	r18, r24
    1c62:	39 0b       	sbc	r19, r25
    1c64:	f8 01       	movw	r30, r16
    1c66:	e2 0f       	add	r30, r18
    1c68:	f3 1f       	adc	r31, r19
    1c6a:	86 e9       	ldi	r24, 0x96	; 150
    1c6c:	85 87       	std	Z+13, r24	; 0x0d
  objs[n].pos[0] = (rand() % (COL_SPACE / 2)) + 2;
    1c6e:	0e 94 9f 20 	call	0x413e	; 0x413e <rand>
    1c72:	ac 01       	movw	r20, r24
    1c74:	8c 2f       	mov	r24, r28
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	88 0f       	add	r24, r24
    1c7a:	99 1f       	adc	r25, r25
    1c7c:	9c 01       	movw	r18, r24
    1c7e:	22 0f       	add	r18, r18
    1c80:	33 1f       	adc	r19, r19
    1c82:	22 0f       	add	r18, r18
    1c84:	33 1f       	adc	r19, r19
    1c86:	22 0f       	add	r18, r18
    1c88:	33 1f       	adc	r19, r19
    1c8a:	28 1b       	sub	r18, r24
    1c8c:	39 0b       	sbc	r19, r25
    1c8e:	f8 01       	movw	r30, r16
    1c90:	e2 0f       	add	r30, r18
    1c92:	f3 1f       	adc	r31, r19
    1c94:	ca 01       	movw	r24, r20
    1c96:	64 e0       	ldi	r22, 0x04	; 4
    1c98:	70 e0       	ldi	r23, 0x00	; 0
    1c9a:	0e 94 37 20 	call	0x406e	; 0x406e <__divmodhi4>
    1c9e:	8e 5f       	subi	r24, 0xFE	; 254
    1ca0:	84 83       	std	Z+4, r24	; 0x04
  objs[n].pos[1] = rand() % 5;
    1ca2:	0e 94 9f 20 	call	0x413e	; 0x413e <rand>
    1ca6:	ac 01       	movw	r20, r24
    1ca8:	8c 2f       	mov	r24, r28
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	88 0f       	add	r24, r24
    1cae:	99 1f       	adc	r25, r25
    1cb0:	9c 01       	movw	r18, r24
    1cb2:	22 0f       	add	r18, r18
    1cb4:	33 1f       	adc	r19, r19
    1cb6:	22 0f       	add	r18, r18
    1cb8:	33 1f       	adc	r19, r19
    1cba:	22 0f       	add	r18, r18
    1cbc:	33 1f       	adc	r19, r19
    1cbe:	28 1b       	sub	r18, r24
    1cc0:	39 0b       	sbc	r19, r25
    1cc2:	f8 01       	movw	r30, r16
    1cc4:	e2 0f       	add	r30, r18
    1cc6:	f3 1f       	adc	r31, r19
    1cc8:	ca 01       	movw	r24, r20
    1cca:	65 e0       	ldi	r22, 0x05	; 5
    1ccc:	70 e0       	ldi	r23, 0x00	; 0
    1cce:	0e 94 37 20 	call	0x406e	; 0x406e <__divmodhi4>
    1cd2:	85 83       	std	Z+5, r24	; 0x05
  objs[n].pos[2] = 2;
    1cd4:	8c 2f       	mov	r24, r28
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	88 0f       	add	r24, r24
    1cda:	99 1f       	adc	r25, r25
    1cdc:	9c 01       	movw	r18, r24
    1cde:	22 0f       	add	r18, r18
    1ce0:	33 1f       	adc	r19, r19
    1ce2:	22 0f       	add	r18, r18
    1ce4:	33 1f       	adc	r19, r19
    1ce6:	22 0f       	add	r18, r18
    1ce8:	33 1f       	adc	r19, r19
    1cea:	28 1b       	sub	r18, r24
    1cec:	39 0b       	sbc	r19, r25
    1cee:	f8 01       	movw	r30, r16
    1cf0:	e2 0f       	add	r30, r18
    1cf2:	f3 1f       	adc	r31, r19
    1cf4:	82 e0       	ldi	r24, 0x02	; 2
    1cf6:	86 83       	std	Z+6, r24	; 0x06
  objs[n].pos[3] = 0;
    1cf8:	8c 2f       	mov	r24, r28
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	88 0f       	add	r24, r24
    1cfe:	99 1f       	adc	r25, r25
    1d00:	9c 01       	movw	r18, r24
    1d02:	22 0f       	add	r18, r18
    1d04:	33 1f       	adc	r19, r19
    1d06:	22 0f       	add	r18, r18
    1d08:	33 1f       	adc	r19, r19
    1d0a:	22 0f       	add	r18, r18
    1d0c:	33 1f       	adc	r19, r19
    1d0e:	28 1b       	sub	r18, r24
    1d10:	39 0b       	sbc	r19, r25
    1d12:	f8 01       	movw	r30, r16
    1d14:	e2 0f       	add	r30, r18
    1d16:	f3 1f       	adc	r31, r19
    1d18:	17 82       	std	Z+7, r1	; 0x07
  objs[n].next[0] = 0;
    1d1a:	8c 2f       	mov	r24, r28
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	88 0f       	add	r24, r24
    1d20:	99 1f       	adc	r25, r25
    1d22:	9c 01       	movw	r18, r24
    1d24:	22 0f       	add	r18, r18
    1d26:	33 1f       	adc	r19, r19
    1d28:	22 0f       	add	r18, r18
    1d2a:	33 1f       	adc	r19, r19
    1d2c:	22 0f       	add	r18, r18
    1d2e:	33 1f       	adc	r19, r19
    1d30:	28 1b       	sub	r18, r24
    1d32:	39 0b       	sbc	r19, r25
    1d34:	f8 01       	movw	r30, r16
    1d36:	e2 0f       	add	r30, r18
    1d38:	f3 1f       	adc	r31, r19
    1d3a:	10 86       	std	Z+8, r1	; 0x08
  objs[n].next[1] = 0;
    1d3c:	8c 2f       	mov	r24, r28
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	88 0f       	add	r24, r24
    1d42:	99 1f       	adc	r25, r25
    1d44:	9c 01       	movw	r18, r24
    1d46:	22 0f       	add	r18, r18
    1d48:	33 1f       	adc	r19, r19
    1d4a:	22 0f       	add	r18, r18
    1d4c:	33 1f       	adc	r19, r19
    1d4e:	22 0f       	add	r18, r18
    1d50:	33 1f       	adc	r19, r19
    1d52:	28 1b       	sub	r18, r24
    1d54:	39 0b       	sbc	r19, r25
    1d56:	f8 01       	movw	r30, r16
    1d58:	e2 0f       	add	r30, r18
    1d5a:	f3 1f       	adc	r31, r19
    1d5c:	11 86       	std	Z+9, r1	; 0x09
  explosion(&objs[n], 2);
    1d5e:	2c 2f       	mov	r18, r28
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	22 0f       	add	r18, r18
    1d64:	33 1f       	adc	r19, r19
    1d66:	c9 01       	movw	r24, r18
    1d68:	88 0f       	add	r24, r24
    1d6a:	99 1f       	adc	r25, r25
    1d6c:	88 0f       	add	r24, r24
    1d6e:	99 1f       	adc	r25, r25
    1d70:	88 0f       	add	r24, r24
    1d72:	99 1f       	adc	r25, r25
    1d74:	82 1b       	sub	r24, r18
    1d76:	93 0b       	sbc	r25, r19
    1d78:	80 0f       	add	r24, r16
    1d7a:	91 1f       	adc	r25, r17
    1d7c:	62 e0       	ldi	r22, 0x02	; 2
    1d7e:	0e 94 c2 04 	call	0x984	; 0x984 <explosion>
  objs[n].who = 4;
    1d82:	8c 2f       	mov	r24, r28
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	88 0f       	add	r24, r24
    1d88:	99 1f       	adc	r25, r25
    1d8a:	9c 01       	movw	r18, r24
    1d8c:	22 0f       	add	r18, r18
    1d8e:	33 1f       	adc	r19, r19
    1d90:	22 0f       	add	r18, r18
    1d92:	33 1f       	adc	r19, r19
    1d94:	22 0f       	add	r18, r18
    1d96:	33 1f       	adc	r19, r19
    1d98:	28 1b       	sub	r18, r24
    1d9a:	39 0b       	sbc	r19, r25
    1d9c:	02 0f       	add	r16, r18
    1d9e:	13 1f       	adc	r17, r19
    1da0:	f8 01       	movw	r30, r16
    1da2:	d3 83       	std	Z+3, r29	; 0x03
}
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	1f 91       	pop	r17
    1daa:	0f 91       	pop	r16
    1dac:	08 95       	ret

00001dae <Item_Tick>:
// Item SM
enum Item_States { Item_wait, Item_gen, Item_event } Item_State;
int Item_Tick(int Item_State) {
  static unsigned short c;
  static signed char event;
  switch(Item_State) { // Transitions
    1dae:	00 97       	sbiw	r24, 0x00	; 0
    1db0:	d1 f0       	breq	.+52     	; 0x1de6 <Item_Tick+0x38>
    1db2:	18 16       	cp	r1, r24
    1db4:	19 06       	cpc	r1, r25
    1db6:	34 f0       	brlt	.+12     	; 0x1dc4 <Item_Tick+0x16>
    1db8:	2f ef       	ldi	r18, 0xFF	; 255
    1dba:	8f 3f       	cpi	r24, 0xFF	; 255
    1dbc:	92 07       	cpc	r25, r18
    1dbe:	09 f0       	breq	.+2      	; 0x1dc2 <Item_Tick+0x14>
    1dc0:	dc c0       	rjmp	.+440    	; 0x1f7a <Item_Tick+0x1cc>
    1dc2:	09 c0       	rjmp	.+18     	; 0x1dd6 <Item_Tick+0x28>
    1dc4:	81 30       	cpi	r24, 0x01	; 1
    1dc6:	91 05       	cpc	r25, r1
    1dc8:	09 f4       	brne	.+2      	; 0x1dcc <Item_Tick+0x1e>
    1dca:	43 c0       	rjmp	.+134    	; 0x1e52 <Item_Tick+0xa4>
    1dcc:	82 30       	cpi	r24, 0x02	; 2
    1dce:	91 05       	cpc	r25, r1
    1dd0:	09 f0       	breq	.+2      	; 0x1dd4 <Item_Tick+0x26>
    1dd2:	d3 c0       	rjmp	.+422    	; 0x1f7a <Item_Tick+0x1cc>
    1dd4:	33 c0       	rjmp	.+102    	; 0x1e3c <Item_Tick+0x8e>
    case -1:
      Item_State = Item_wait;
      c = 0;
    1dd6:	10 92 d6 00 	sts	0x00D6, r1
    1dda:	10 92 d5 00 	sts	0x00D5, r1
      event = -1;
    1dde:	8f ef       	ldi	r24, 0xFF	; 255
    1de0:	80 93 d7 00 	sts	0x00D7, r24
      break;
    1de4:	36 c0       	rjmp	.+108    	; 0x1e52 <Item_Tick+0xa4>
    case Item_wait:
      if(c > EVENT_INTERVAL) {
    1de6:	80 91 d5 00 	lds	r24, 0x00D5
    1dea:	90 91 d6 00 	lds	r25, 0x00D6
    1dee:	22 e0       	ldi	r18, 0x02	; 2
    1df0:	8f 3e       	cpi	r24, 0xEF	; 239
    1df2:	92 07       	cpc	r25, r18
    1df4:	70 f1       	brcs	.+92     	; 0x1e52 <Item_Tick+0xa4>
        Item_State = Item_gen;  
        genItem((rand() % (NUM_EQUIP - 1)) + 1);
    1df6:	0e 94 9f 20 	call	0x413e	; 0x413e <rand>
    1dfa:	67 e0       	ldi	r22, 0x07	; 7
    1dfc:	70 e0       	ldi	r23, 0x00	; 0
    1dfe:	0e 94 37 20 	call	0x406e	; 0x406e <__divmodhi4>
    1e02:	8f 5f       	subi	r24, 0xFF	; 255
    1e04:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <genItem>
        c = 0;
        event = -1;
      }
      break;
    case Item_gen:
      switch(rand() % MOD_CHANCE) {
    1e08:	0e 94 9f 20 	call	0x413e	; 0x413e <rand>
    1e0c:	60 e1       	ldi	r22, 0x10	; 16
    1e0e:	70 e0       	ldi	r23, 0x00	; 0
    1e10:	0e 94 37 20 	call	0x406e	; 0x406e <__divmodhi4>
    1e14:	81 30       	cpi	r24, 0x01	; 1
    1e16:	91 05       	cpc	r25, r1
    1e18:	09 f4       	brne	.+2      	; 0x1e1c <Item_Tick+0x6e>
    1e1a:	96 c0       	rjmp	.+300    	; 0x1f48 <Item_Tick+0x19a>
    1e1c:	82 30       	cpi	r24, 0x02	; 2
    1e1e:	91 05       	cpc	r25, r1
    1e20:	24 f4       	brge	.+8      	; 0x1e2a <Item_Tick+0x7c>
    1e22:	00 97       	sbiw	r24, 0x00	; 0
    1e24:	09 f4       	brne	.+2      	; 0x1e28 <Item_Tick+0x7a>
    1e26:	89 c0       	rjmp	.+274    	; 0x1f3a <Item_Tick+0x18c>
    1e28:	9b c0       	rjmp	.+310    	; 0x1f60 <Item_Tick+0x1b2>
    1e2a:	82 30       	cpi	r24, 0x02	; 2
    1e2c:	91 05       	cpc	r25, r1
    1e2e:	09 f4       	brne	.+2      	; 0x1e32 <Item_Tick+0x84>
    1e30:	8f c0       	rjmp	.+286    	; 0x1f50 <Item_Tick+0x1a2>
    1e32:	83 30       	cpi	r24, 0x03	; 3
    1e34:	91 05       	cpc	r25, r1
    1e36:	09 f0       	breq	.+2      	; 0x1e3a <Item_Tick+0x8c>
    1e38:	93 c0       	rjmp	.+294    	; 0x1f60 <Item_Tick+0x1b2>
    1e3a:	8e c0       	rjmp	.+284    	; 0x1f58 <Item_Tick+0x1aa>
      break;
    case Item_gen:
      Item_State = Item_wait;
      break;
    case Item_event:
      if(c == 0) {
    1e3c:	20 91 d5 00 	lds	r18, 0x00D5
    1e40:	30 91 d6 00 	lds	r19, 0x00D6
    1e44:	21 15       	cp	r18, r1
    1e46:	31 05       	cpc	r19, r1
    1e48:	09 f0       	breq	.+2      	; 0x1e4c <Item_Tick+0x9e>
    1e4a:	96 c0       	rjmp	.+300    	; 0x1f78 <Item_Tick+0x1ca>
        Item_State = Item_wait;
        event = -1;
    1e4c:	8f ef       	ldi	r24, 0xFF	; 255
    1e4e:	80 93 d7 00 	sts	0x00D7, r24
    default:
      Item_State = -1;
  } // Transitions end
  switch(Item_State) { // State actions
    case Item_wait:
      switch(event) {
    1e52:	80 91 d7 00 	lds	r24, 0x00D7
    1e56:	82 30       	cpi	r24, 0x02	; 2
    1e58:	a1 f0       	breq	.+40     	; 0x1e82 <Item_Tick+0xd4>
    1e5a:	83 30       	cpi	r24, 0x03	; 3
    1e5c:	61 f1       	breq	.+88     	; 0x1eb6 <Item_Tick+0x108>
    1e5e:	81 30       	cpi	r24, 0x01	; 1
    1e60:	09 f0       	breq	.+2      	; 0x1e64 <Item_Tick+0xb6>
    1e62:	4f c0       	rjmp	.+158    	; 0x1f02 <Item_Tick+0x154>
        case 1:
          if((c % 3) == 0)
    1e64:	80 91 d5 00 	lds	r24, 0x00D5
    1e68:	90 91 d6 00 	lds	r25, 0x00D6
    1e6c:	63 e0       	ldi	r22, 0x03	; 3
    1e6e:	70 e0       	ldi	r23, 0x00	; 0
    1e70:	0e 94 23 20 	call	0x4046	; 0x4046 <__udivmodhi4>
    1e74:	00 97       	sbiw	r24, 0x00	; 0
    1e76:	09 f0       	breq	.+2      	; 0x1e7a <Item_Tick+0xcc>
    1e78:	44 c0       	rjmp	.+136    	; 0x1f02 <Item_Tick+0x154>
            genEvent(1);
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	0e 94 55 0a 	call	0x14aa	; 0x14aa <genEvent>
    1e80:	40 c0       	rjmp	.+128    	; 0x1f02 <Item_Tick+0x154>
          break;
        case 2:
          if(c < 200) {
    1e82:	80 91 d5 00 	lds	r24, 0x00D5
    1e86:	90 91 d6 00 	lds	r25, 0x00D6
    1e8a:	88 3c       	cpi	r24, 0xC8	; 200
    1e8c:	91 05       	cpc	r25, r1
    1e8e:	48 f4       	brcc	.+18     	; 0x1ea2 <Item_Tick+0xf4>
            setCursor(0, 1);
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	61 e0       	ldi	r22, 0x01	; 1
    1e94:	0e 94 a9 02 	call	0x552	; 0x552 <setCursor>
            print("LAVA INC");
    1e98:	80 e6       	ldi	r24, 0x60	; 96
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	0e 94 d6 02 	call	0x5ac	; 0x5ac <print>
    1ea0:	30 c0       	rjmp	.+96     	; 0x1f02 <Item_Tick+0x154>
          } else {
            if((c % 30) == 0)
    1ea2:	6e e1       	ldi	r22, 0x1E	; 30
    1ea4:	70 e0       	ldi	r23, 0x00	; 0
    1ea6:	0e 94 23 20 	call	0x4046	; 0x4046 <__udivmodhi4>
    1eaa:	00 97       	sbiw	r24, 0x00	; 0
    1eac:	51 f5       	brne	.+84     	; 0x1f02 <Item_Tick+0x154>
              genEvent(2);
    1eae:	82 e0       	ldi	r24, 0x02	; 2
    1eb0:	0e 94 55 0a 	call	0x14aa	; 0x14aa <genEvent>
    1eb4:	26 c0       	rjmp	.+76     	; 0x1f02 <Item_Tick+0x154>
          }
          break;
        case 3:
          if(c < 200) {
    1eb6:	80 91 d5 00 	lds	r24, 0x00D5
    1eba:	90 91 d6 00 	lds	r25, 0x00D6
    1ebe:	88 3c       	cpi	r24, 0xC8	; 200
    1ec0:	91 05       	cpc	r25, r1
    1ec2:	48 f4       	brcc	.+18     	; 0x1ed6 <Item_Tick+0x128>
            setCursor(0, 1);
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	61 e0       	ldi	r22, 0x01	; 1
    1ec8:	0e 94 a9 02 	call	0x552	; 0x552 <setCursor>
            print("LAV&RAIN");
    1ecc:	89 e6       	ldi	r24, 0x69	; 105
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	0e 94 d6 02 	call	0x5ac	; 0x5ac <print>
    1ed4:	16 c0       	rjmp	.+44     	; 0x1f02 <Item_Tick+0x154>
          } else {
            if((c % 30) == 0)
    1ed6:	6e e1       	ldi	r22, 0x1E	; 30
    1ed8:	70 e0       	ldi	r23, 0x00	; 0
    1eda:	0e 94 23 20 	call	0x4046	; 0x4046 <__udivmodhi4>
    1ede:	00 97       	sbiw	r24, 0x00	; 0
    1ee0:	19 f4       	brne	.+6      	; 0x1ee8 <Item_Tick+0x13a>
              genEvent(2);
    1ee2:	82 e0       	ldi	r24, 0x02	; 2
    1ee4:	0e 94 55 0a 	call	0x14aa	; 0x14aa <genEvent>
            if((c % 3) == 0)
    1ee8:	80 91 d5 00 	lds	r24, 0x00D5
    1eec:	90 91 d6 00 	lds	r25, 0x00D6
    1ef0:	63 e0       	ldi	r22, 0x03	; 3
    1ef2:	70 e0       	ldi	r23, 0x00	; 0
    1ef4:	0e 94 23 20 	call	0x4046	; 0x4046 <__udivmodhi4>
    1ef8:	00 97       	sbiw	r24, 0x00	; 0
    1efa:	19 f4       	brne	.+6      	; 0x1f02 <Item_Tick+0x154>
              genEvent(1);
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	0e 94 55 0a 	call	0x14aa	; 0x14aa <genEvent>
          }
          break;    
        default:
          break;
      }
      if(pause == 0) 
    1f02:	80 91 d1 00 	lds	r24, 0x00D1
    1f06:	88 23       	and	r24, r24
    1f08:	61 f4       	brne	.+24     	; 0x1f22 <Item_Tick+0x174>
        ++c;
    1f0a:	80 91 d5 00 	lds	r24, 0x00D5
    1f0e:	90 91 d6 00 	lds	r25, 0x00D6
    1f12:	01 96       	adiw	r24, 0x01	; 1
    1f14:	90 93 d6 00 	sts	0x00D6, r25
    1f18:	80 93 d5 00 	sts	0x00D5, r24
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	08 95       	ret
      else if(pause == 1) {
    1f22:	81 30       	cpi	r24, 0x01	; 1
    1f24:	39 f5       	brne	.+78     	; 0x1f74 <Item_Tick+0x1c6>
        c = 0;
    1f26:	10 92 d6 00 	sts	0x00D6, r1
    1f2a:	10 92 d5 00 	sts	0x00D5, r1
        event = -1;
    1f2e:	8f ef       	ldi	r24, 0xFF	; 255
    1f30:	80 93 d7 00 	sts	0x00D7, r24
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	08 95       	ret
      }
      break;
    case Item_gen:
      switch(rand() % MOD_CHANCE) {
        case 0:
          genEvent(0);
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	0e 94 55 0a 	call	0x14aa	; 0x14aa <genEvent>
          event = -1;
    1f40:	8f ef       	ldi	r24, 0xFF	; 255
    1f42:	80 93 d7 00 	sts	0x00D7, r24
          break;
    1f46:	0f c0       	rjmp	.+30     	; 0x1f66 <Item_Tick+0x1b8>
        case 1:
          event = 1;
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	80 93 d7 00 	sts	0x00D7, r24
          break;
    1f4e:	0b c0       	rjmp	.+22     	; 0x1f66 <Item_Tick+0x1b8>
        case 2:
          event = 2;
    1f50:	82 e0       	ldi	r24, 0x02	; 2
    1f52:	80 93 d7 00 	sts	0x00D7, r24
          break;
    1f56:	07 c0       	rjmp	.+14     	; 0x1f66 <Item_Tick+0x1b8>
        case 3:
          event = 3;
    1f58:	83 e0       	ldi	r24, 0x03	; 3
    1f5a:	80 93 d7 00 	sts	0x00D7, r24
          break;  
    1f5e:	03 c0       	rjmp	.+6      	; 0x1f66 <Item_Tick+0x1b8>
        default:
          event = -1;
    1f60:	8f ef       	ldi	r24, 0xFF	; 255
    1f62:	80 93 d7 00 	sts	0x00D7, r24
          break;
      }
      c = 0;
    1f66:	10 92 d6 00 	sts	0x00D6, r1
    1f6a:	10 92 d5 00 	sts	0x00D5, r1
      break;
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	08 95       	ret
        default:
          break;
      }
      if(pause == 0) 
        ++c;
      else if(pause == 1) {
    1f74:	80 e0       	ldi	r24, 0x00	; 0
    1f76:	90 e0       	ldi	r25, 0x00	; 0
      break;
    default:
      break;
  } // State actions end
  return Item_State;
}
    1f78:	08 95       	ret
        event = -1;
      } else
        Item_State = Item_event;
      break;
    default:
      Item_State = -1;
    1f7a:	8f ef       	ldi	r24, 0xFF	; 255
    1f7c:	9f ef       	ldi	r25, 0xFF	; 255
    1f7e:	08 95       	ret

00001f80 <genProjectile>:
  explosion(&objs[n], 2);
  objs[n].who = 4;
}

// Creates projectiles for the player based on what's equiped
void genProjectile( player *PL ) {
    1f80:	7f 92       	push	r7
    1f82:	8f 92       	push	r8
    1f84:	9f 92       	push	r9
    1f86:	af 92       	push	r10
    1f88:	bf 92       	push	r11
    1f8a:	cf 92       	push	r12
    1f8c:	df 92       	push	r13
    1f8e:	ef 92       	push	r14
    1f90:	ff 92       	push	r15
    1f92:	0f 93       	push	r16
    1f94:	1f 93       	push	r17
    1f96:	cf 93       	push	r28
    1f98:	df 93       	push	r29
    1f9a:	5c 01       	movw	r10, r24
  if( getNewObj() == -1 ) return;
  switch((*PL).equip) {
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	50 96       	adiw	r26, 0x10	; 16
    1fa0:	8c 91       	ld	r24, X
    1fa2:	50 97       	sbiw	r26, 0x10	; 16
    1fa4:	83 30       	cpi	r24, 0x03	; 3
    1fa6:	09 f4       	brne	.+2      	; 0x1faa <genProjectile+0x2a>
    1fa8:	c8 c5       	rjmp	.+2960   	; 0x2b3a <genProjectile+0xbba>
    1faa:	84 30       	cpi	r24, 0x04	; 4
    1fac:	54 f4       	brge	.+20     	; 0x1fc2 <genProjectile+0x42>
    1fae:	81 30       	cpi	r24, 0x01	; 1
    1fb0:	09 f4       	brne	.+2      	; 0x1fb4 <genProjectile+0x34>
    1fb2:	38 c1       	rjmp	.+624    	; 0x2224 <genProjectile+0x2a4>
    1fb4:	82 30       	cpi	r24, 0x02	; 2
    1fb6:	0c f0       	brlt	.+2      	; 0x1fba <genProjectile+0x3a>
    1fb8:	51 c2       	rjmp	.+1186   	; 0x245c <genProjectile+0x4dc>
    1fba:	88 23       	and	r24, r24
    1fbc:	91 f0       	breq	.+36     	; 0x1fe2 <genProjectile+0x62>
    1fbe:	0c 94 f0 1b 	jmp	0x37e0	; 0x37e0 <genProjectile+0x1860>
    1fc2:	85 30       	cpi	r24, 0x05	; 5
    1fc4:	09 f4       	brne	.+2      	; 0x1fc8 <genProjectile+0x48>
    1fc6:	08 c7       	rjmp	.+3600   	; 0x2dd8 <genProjectile+0xe58>
    1fc8:	85 30       	cpi	r24, 0x05	; 5
    1fca:	0c f4       	brge	.+2      	; 0x1fce <genProjectile+0x4e>
    1fcc:	d4 c5       	rjmp	.+2984   	; 0x2b76 <genProjectile+0xbf6>
    1fce:	86 30       	cpi	r24, 0x06	; 6
    1fd0:	11 f4       	brne	.+4      	; 0x1fd6 <genProjectile+0x56>
    1fd2:	0c 94 fd 17 	jmp	0x2ffa	; 0x2ffa <genProjectile+0x107a>
    1fd6:	87 30       	cpi	r24, 0x07	; 7
    1fd8:	11 f0       	breq	.+4      	; 0x1fde <genProjectile+0x5e>
    1fda:	0c 94 f0 1b 	jmp	0x37e0	; 0x37e0 <genProjectile+0x1860>
    1fde:	0c 94 09 19 	jmp	0x3212	; 0x3212 <genProjectile+0x1292>
    1fe2:	10 e0       	ldi	r17, 0x00	; 0
    case 0: // PISTOL, uses 2 objects
      for(char x = 0; x < 2; ++x) {
        char n = getNewObj();
        if( n == -1 ) return;
        objs[n].exist = true;
    1fe4:	c3 e8       	ldi	r28, 0x83	; 131
    1fe6:	d1 e0       	ldi	r29, 0x01	; 1
    1fe8:	01 e0       	ldi	r16, 0x01	; 1
        objs[n].collide = false;
        objs[n].who = (*PL).who;
        objs[n].type = 1;
        objs[n].jump = -1;
    1fea:	ee 24       	eor	r14, r14
    1fec:	ea 94       	dec	r14
        objs[n].period = PISTOL_PER;
    1fee:	0f 2e       	mov	r0, r31
    1ff0:	f3 e0       	ldi	r31, 0x03	; 3
    1ff2:	ff 2e       	mov	r15, r31
    1ff4:	f0 2d       	mov	r31, r0
        objs[n].elapsedTime = objs[n].period;
        objs[n].expire = PISTOL_RANGE;
    1ff6:	0f 2e       	mov	r0, r31
    1ff8:	f6 e1       	ldi	r31, 0x16	; 22
    1ffa:	df 2e       	mov	r13, r31
    1ffc:	f0 2d       	mov	r31, r0
void genProjectile( player *PL ) {
  if( getNewObj() == -1 ) return;
  switch((*PL).equip) {
    case 0: // PISTOL, uses 2 objects
      for(char x = 0; x < 2; ++x) {
        char n = getNewObj();
    1ffe:	0e 94 ab 04 	call	0x956	; 0x956 <getNewObj>
    2002:	48 2f       	mov	r20, r24
        if( n == -1 ) return;
        objs[n].exist = true;
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	88 0f       	add	r24, r24
    2008:	99 1f       	adc	r25, r25
    200a:	9c 01       	movw	r18, r24
    200c:	22 0f       	add	r18, r18
    200e:	33 1f       	adc	r19, r19
    2010:	22 0f       	add	r18, r18
    2012:	33 1f       	adc	r19, r19
    2014:	22 0f       	add	r18, r18
    2016:	33 1f       	adc	r19, r19
    2018:	28 1b       	sub	r18, r24
    201a:	39 0b       	sbc	r19, r25
    201c:	fe 01       	movw	r30, r28
    201e:	e2 0f       	add	r30, r18
    2020:	f3 1f       	adc	r31, r19
    2022:	00 83       	st	Z, r16
        objs[n].collide = false;
    2024:	84 2f       	mov	r24, r20
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	88 0f       	add	r24, r24
    202a:	99 1f       	adc	r25, r25
    202c:	9c 01       	movw	r18, r24
    202e:	22 0f       	add	r18, r18
    2030:	33 1f       	adc	r19, r19
    2032:	22 0f       	add	r18, r18
    2034:	33 1f       	adc	r19, r19
    2036:	22 0f       	add	r18, r18
    2038:	33 1f       	adc	r19, r19
    203a:	28 1b       	sub	r18, r24
    203c:	39 0b       	sbc	r19, r25
    203e:	fe 01       	movw	r30, r28
    2040:	e2 0f       	add	r30, r18
    2042:	f3 1f       	adc	r31, r19
    2044:	11 82       	std	Z+1, r1	; 0x01
        objs[n].who = (*PL).who;
    2046:	f5 01       	movw	r30, r10
    2048:	50 81       	ld	r21, Z
    204a:	84 2f       	mov	r24, r20
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	88 0f       	add	r24, r24
    2050:	99 1f       	adc	r25, r25
    2052:	9c 01       	movw	r18, r24
    2054:	22 0f       	add	r18, r18
    2056:	33 1f       	adc	r19, r19
    2058:	22 0f       	add	r18, r18
    205a:	33 1f       	adc	r19, r19
    205c:	22 0f       	add	r18, r18
    205e:	33 1f       	adc	r19, r19
    2060:	28 1b       	sub	r18, r24
    2062:	39 0b       	sbc	r19, r25
    2064:	fe 01       	movw	r30, r28
    2066:	e2 0f       	add	r30, r18
    2068:	f3 1f       	adc	r31, r19
    206a:	53 83       	std	Z+3, r21	; 0x03
        objs[n].type = 1;
    206c:	84 2f       	mov	r24, r20
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	88 0f       	add	r24, r24
    2072:	99 1f       	adc	r25, r25
    2074:	9c 01       	movw	r18, r24
    2076:	22 0f       	add	r18, r18
    2078:	33 1f       	adc	r19, r19
    207a:	22 0f       	add	r18, r18
    207c:	33 1f       	adc	r19, r19
    207e:	22 0f       	add	r18, r18
    2080:	33 1f       	adc	r19, r19
    2082:	28 1b       	sub	r18, r24
    2084:	39 0b       	sbc	r19, r25
    2086:	fe 01       	movw	r30, r28
    2088:	e2 0f       	add	r30, r18
    208a:	f3 1f       	adc	r31, r19
    208c:	02 83       	std	Z+2, r16	; 0x02
        objs[n].jump = -1;
    208e:	84 2f       	mov	r24, r20
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	88 0f       	add	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	9c 01       	movw	r18, r24
    2098:	22 0f       	add	r18, r18
    209a:	33 1f       	adc	r19, r19
    209c:	22 0f       	add	r18, r18
    209e:	33 1f       	adc	r19, r19
    20a0:	22 0f       	add	r18, r18
    20a2:	33 1f       	adc	r19, r19
    20a4:	28 1b       	sub	r18, r24
    20a6:	39 0b       	sbc	r19, r25
    20a8:	fe 01       	movw	r30, r28
    20aa:	e2 0f       	add	r30, r18
    20ac:	f3 1f       	adc	r31, r19
    20ae:	e2 86       	std	Z+10, r14	; 0x0a
        objs[n].period = PISTOL_PER;
    20b0:	84 2f       	mov	r24, r20
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	88 0f       	add	r24, r24
    20b6:	99 1f       	adc	r25, r25
    20b8:	9c 01       	movw	r18, r24
    20ba:	22 0f       	add	r18, r18
    20bc:	33 1f       	adc	r19, r19
    20be:	22 0f       	add	r18, r18
    20c0:	33 1f       	adc	r19, r19
    20c2:	22 0f       	add	r18, r18
    20c4:	33 1f       	adc	r19, r19
    20c6:	28 1b       	sub	r18, r24
    20c8:	39 0b       	sbc	r19, r25
    20ca:	fe 01       	movw	r30, r28
    20cc:	e2 0f       	add	r30, r18
    20ce:	f3 1f       	adc	r31, r19
    20d0:	f3 86       	std	Z+11, r15	; 0x0b
        objs[n].elapsedTime = objs[n].period;
    20d2:	84 2f       	mov	r24, r20
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	88 0f       	add	r24, r24
    20d8:	99 1f       	adc	r25, r25
    20da:	9c 01       	movw	r18, r24
    20dc:	22 0f       	add	r18, r18
    20de:	33 1f       	adc	r19, r19
    20e0:	22 0f       	add	r18, r18
    20e2:	33 1f       	adc	r19, r19
    20e4:	22 0f       	add	r18, r18
    20e6:	33 1f       	adc	r19, r19
    20e8:	28 1b       	sub	r18, r24
    20ea:	39 0b       	sbc	r19, r25
    20ec:	fe 01       	movw	r30, r28
    20ee:	e2 0f       	add	r30, r18
    20f0:	f3 1f       	adc	r31, r19
    20f2:	f4 86       	std	Z+12, r15	; 0x0c
        objs[n].expire = PISTOL_RANGE;
    20f4:	84 2f       	mov	r24, r20
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	88 0f       	add	r24, r24
    20fa:	99 1f       	adc	r25, r25
    20fc:	9c 01       	movw	r18, r24
    20fe:	22 0f       	add	r18, r18
    2100:	33 1f       	adc	r19, r19
    2102:	22 0f       	add	r18, r18
    2104:	33 1f       	adc	r19, r19
    2106:	22 0f       	add	r18, r18
    2108:	33 1f       	adc	r19, r19
    210a:	28 1b       	sub	r18, r24
    210c:	39 0b       	sbc	r19, r25
    210e:	fe 01       	movw	r30, r28
    2110:	e2 0f       	add	r30, r18
    2112:	f3 1f       	adc	r31, r19
    2114:	d5 86       	std	Z+13, r13	; 0x0d
        objs[n].pos[0] = (*PL).pos[0];
    2116:	d5 01       	movw	r26, r10
    2118:	14 96       	adiw	r26, 0x04	; 4
    211a:	5c 91       	ld	r21, X
    211c:	14 97       	sbiw	r26, 0x04	; 4
    211e:	84 2f       	mov	r24, r20
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	88 0f       	add	r24, r24
    2124:	99 1f       	adc	r25, r25
    2126:	9c 01       	movw	r18, r24
    2128:	22 0f       	add	r18, r18
    212a:	33 1f       	adc	r19, r19
    212c:	22 0f       	add	r18, r18
    212e:	33 1f       	adc	r19, r19
    2130:	22 0f       	add	r18, r18
    2132:	33 1f       	adc	r19, r19
    2134:	28 1b       	sub	r18, r24
    2136:	39 0b       	sbc	r19, r25
    2138:	fe 01       	movw	r30, r28
    213a:	e2 0f       	add	r30, r18
    213c:	f3 1f       	adc	r31, r19
    213e:	54 83       	std	Z+4, r21	; 0x04
        objs[n].pos[1] = (*PL).pos[1] + x * (*PL).aimX;
    2140:	84 2f       	mov	r24, r20
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	88 0f       	add	r24, r24
    2146:	99 1f       	adc	r25, r25
    2148:	9c 01       	movw	r18, r24
    214a:	22 0f       	add	r18, r18
    214c:	33 1f       	adc	r19, r19
    214e:	22 0f       	add	r18, r18
    2150:	33 1f       	adc	r19, r19
    2152:	22 0f       	add	r18, r18
    2154:	33 1f       	adc	r19, r19
    2156:	28 1b       	sub	r18, r24
    2158:	39 0b       	sbc	r19, r25
    215a:	fe 01       	movw	r30, r28
    215c:	e2 0f       	add	r30, r18
    215e:	f3 1f       	adc	r31, r19
    2160:	12 96       	adiw	r26, 0x02	; 2
    2162:	9c 91       	ld	r25, X
    2164:	12 97       	sbiw	r26, 0x02	; 2
    2166:	19 9f       	mul	r17, r25
    2168:	90 2d       	mov	r25, r0
    216a:	11 24       	eor	r1, r1
    216c:	15 96       	adiw	r26, 0x05	; 5
    216e:	8c 91       	ld	r24, X
    2170:	15 97       	sbiw	r26, 0x05	; 5
    2172:	89 0f       	add	r24, r25
    2174:	85 83       	std	Z+5, r24	; 0x05
        objs[n].pos[2] = (*PL).pos[2];
    2176:	16 96       	adiw	r26, 0x06	; 6
    2178:	5c 91       	ld	r21, X
    217a:	16 97       	sbiw	r26, 0x06	; 6
    217c:	84 2f       	mov	r24, r20
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	88 0f       	add	r24, r24
    2182:	99 1f       	adc	r25, r25
    2184:	9c 01       	movw	r18, r24
    2186:	22 0f       	add	r18, r18
    2188:	33 1f       	adc	r19, r19
    218a:	22 0f       	add	r18, r18
    218c:	33 1f       	adc	r19, r19
    218e:	22 0f       	add	r18, r18
    2190:	33 1f       	adc	r19, r19
    2192:	28 1b       	sub	r18, r24
    2194:	39 0b       	sbc	r19, r25
    2196:	fe 01       	movw	r30, r28
    2198:	e2 0f       	add	r30, r18
    219a:	f3 1f       	adc	r31, r19
    219c:	56 83       	std	Z+6, r21	; 0x06
        objs[n].pos[3] = (*PL).pos[3];
    219e:	17 96       	adiw	r26, 0x07	; 7
    21a0:	5c 91       	ld	r21, X
    21a2:	17 97       	sbiw	r26, 0x07	; 7
    21a4:	84 2f       	mov	r24, r20
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	88 0f       	add	r24, r24
    21aa:	99 1f       	adc	r25, r25
    21ac:	9c 01       	movw	r18, r24
    21ae:	22 0f       	add	r18, r18
    21b0:	33 1f       	adc	r19, r19
    21b2:	22 0f       	add	r18, r18
    21b4:	33 1f       	adc	r19, r19
    21b6:	22 0f       	add	r18, r18
    21b8:	33 1f       	adc	r19, r19
    21ba:	28 1b       	sub	r18, r24
    21bc:	39 0b       	sbc	r19, r25
    21be:	fe 01       	movw	r30, r28
    21c0:	e2 0f       	add	r30, r18
    21c2:	f3 1f       	adc	r31, r19
    21c4:	57 83       	std	Z+7, r21	; 0x07
        objs[n].next[0] = (*PL).aimX;
    21c6:	84 2f       	mov	r24, r20
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	88 0f       	add	r24, r24
    21cc:	99 1f       	adc	r25, r25
    21ce:	9c 01       	movw	r18, r24
    21d0:	22 0f       	add	r18, r18
    21d2:	33 1f       	adc	r19, r19
    21d4:	22 0f       	add	r18, r18
    21d6:	33 1f       	adc	r19, r19
    21d8:	22 0f       	add	r18, r18
    21da:	33 1f       	adc	r19, r19
    21dc:	28 1b       	sub	r18, r24
    21de:	39 0b       	sbc	r19, r25
    21e0:	fe 01       	movw	r30, r28
    21e2:	e2 0f       	add	r30, r18
    21e4:	f3 1f       	adc	r31, r19
    21e6:	12 96       	adiw	r26, 0x02	; 2
    21e8:	8c 91       	ld	r24, X
    21ea:	12 97       	sbiw	r26, 0x02	; 2
    21ec:	80 87       	std	Z+8, r24	; 0x08
        objs[n].next[1] = 0;
    21ee:	84 2f       	mov	r24, r20
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	88 0f       	add	r24, r24
    21f4:	99 1f       	adc	r25, r25
    21f6:	9c 01       	movw	r18, r24
    21f8:	22 0f       	add	r18, r18
    21fa:	33 1f       	adc	r19, r19
    21fc:	22 0f       	add	r18, r18
    21fe:	33 1f       	adc	r19, r19
    2200:	22 0f       	add	r18, r18
    2202:	33 1f       	adc	r19, r19
    2204:	28 1b       	sub	r18, r24
    2206:	39 0b       	sbc	r19, r25
    2208:	fe 01       	movw	r30, r28
    220a:	e2 0f       	add	r30, r18
    220c:	f3 1f       	adc	r31, r19
    220e:	11 86       	std	Z+9, r1	; 0x09
// Creates projectiles for the player based on what's equiped
void genProjectile( player *PL ) {
  if( getNewObj() == -1 ) return;
  switch((*PL).equip) {
    case 0: // PISTOL, uses 2 objects
      for(char x = 0; x < 2; ++x) {
    2210:	1f 5f       	subi	r17, 0xFF	; 255
    2212:	12 30       	cpi	r17, 0x02	; 2
    2214:	09 f0       	breq	.+2      	; 0x2218 <genProjectile+0x298>
    2216:	f3 ce       	rjmp	.-538    	; 0x1ffe <genProjectile+0x7e>
        objs[n].pos[2] = (*PL).pos[2];
        objs[n].pos[3] = (*PL).pos[3];
        objs[n].next[0] = (*PL).aimX;
        objs[n].next[1] = 0;
      }
      (*PL).cooldown = PISTOL_COOL;
    2218:	88 e0       	ldi	r24, 0x08	; 8
    221a:	1c 96       	adiw	r26, 0x0c	; 12
    221c:	8c 93       	st	X, r24
    221e:	1c 97       	sbiw	r26, 0x0c	; 12
      return;
    2220:	0c 94 f0 1b 	jmp	0x37e0	; 0x37e0 <genProjectile+0x1860>
}

// Creates projectiles for the player based on what's equiped
void genProjectile( player *PL ) {
  if( getNewObj() == -1 ) return;
  switch((*PL).equip) {
    2224:	10 e0       	ldi	r17, 0x00	; 0
      return;
    case 1: // RIFLE, uses 3 objects
      for(char x = 0; x < 3; ++x) {
        char n = getNewObj();
        if( n == -1 ) return;
        objs[n].exist = true;
    2226:	c3 e8       	ldi	r28, 0x83	; 131
    2228:	d1 e0       	ldi	r29, 0x01	; 1
    222a:	01 e0       	ldi	r16, 0x01	; 1
        objs[n].collide = false;
        objs[n].who = (*PL).who;
        objs[n].type = 1;
        objs[n].jump = -1;
    222c:	ff 24       	eor	r15, r15
    222e:	fa 94       	dec	r15
        objs[n].period = RIFLE_PER;
    2230:	ee 24       	eor	r14, r14
    2232:	68 94       	set
    2234:	e1 f8       	bld	r14, 1
      }
      (*PL).cooldown = PISTOL_COOL;
      return;
    case 1: // RIFLE, uses 3 objects
      for(char x = 0; x < 3; ++x) {
        char n = getNewObj();
    2236:	0e 94 ab 04 	call	0x956	; 0x956 <getNewObj>
    223a:	48 2f       	mov	r20, r24
        if( n == -1 ) return;
        objs[n].exist = true;
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	88 0f       	add	r24, r24
    2240:	99 1f       	adc	r25, r25
    2242:	9c 01       	movw	r18, r24
    2244:	22 0f       	add	r18, r18
    2246:	33 1f       	adc	r19, r19
    2248:	22 0f       	add	r18, r18
    224a:	33 1f       	adc	r19, r19
    224c:	22 0f       	add	r18, r18
    224e:	33 1f       	adc	r19, r19
    2250:	28 1b       	sub	r18, r24
    2252:	39 0b       	sbc	r19, r25
    2254:	fe 01       	movw	r30, r28
    2256:	e2 0f       	add	r30, r18
    2258:	f3 1f       	adc	r31, r19
    225a:	00 83       	st	Z, r16
        objs[n].collide = false;
    225c:	84 2f       	mov	r24, r20
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	88 0f       	add	r24, r24
    2262:	99 1f       	adc	r25, r25
    2264:	9c 01       	movw	r18, r24
    2266:	22 0f       	add	r18, r18
    2268:	33 1f       	adc	r19, r19
    226a:	22 0f       	add	r18, r18
    226c:	33 1f       	adc	r19, r19
    226e:	22 0f       	add	r18, r18
    2270:	33 1f       	adc	r19, r19
    2272:	28 1b       	sub	r18, r24
    2274:	39 0b       	sbc	r19, r25
    2276:	fe 01       	movw	r30, r28
    2278:	e2 0f       	add	r30, r18
    227a:	f3 1f       	adc	r31, r19
    227c:	11 82       	std	Z+1, r1	; 0x01
        objs[n].who = (*PL).who;
    227e:	f5 01       	movw	r30, r10
    2280:	50 81       	ld	r21, Z
    2282:	84 2f       	mov	r24, r20
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	88 0f       	add	r24, r24
    2288:	99 1f       	adc	r25, r25
    228a:	9c 01       	movw	r18, r24
    228c:	22 0f       	add	r18, r18
    228e:	33 1f       	adc	r19, r19
    2290:	22 0f       	add	r18, r18
    2292:	33 1f       	adc	r19, r19
    2294:	22 0f       	add	r18, r18
    2296:	33 1f       	adc	r19, r19
    2298:	28 1b       	sub	r18, r24
    229a:	39 0b       	sbc	r19, r25
    229c:	fe 01       	movw	r30, r28
    229e:	e2 0f       	add	r30, r18
    22a0:	f3 1f       	adc	r31, r19
    22a2:	53 83       	std	Z+3, r21	; 0x03
        objs[n].type = 1;
    22a4:	84 2f       	mov	r24, r20
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	88 0f       	add	r24, r24
    22aa:	99 1f       	adc	r25, r25
    22ac:	9c 01       	movw	r18, r24
    22ae:	22 0f       	add	r18, r18
    22b0:	33 1f       	adc	r19, r19
    22b2:	22 0f       	add	r18, r18
    22b4:	33 1f       	adc	r19, r19
    22b6:	22 0f       	add	r18, r18
    22b8:	33 1f       	adc	r19, r19
    22ba:	28 1b       	sub	r18, r24
    22bc:	39 0b       	sbc	r19, r25
    22be:	fe 01       	movw	r30, r28
    22c0:	e2 0f       	add	r30, r18
    22c2:	f3 1f       	adc	r31, r19
    22c4:	02 83       	std	Z+2, r16	; 0x02
        objs[n].jump = -1;
    22c6:	84 2f       	mov	r24, r20
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	88 0f       	add	r24, r24
    22cc:	99 1f       	adc	r25, r25
    22ce:	9c 01       	movw	r18, r24
    22d0:	22 0f       	add	r18, r18
    22d2:	33 1f       	adc	r19, r19
    22d4:	22 0f       	add	r18, r18
    22d6:	33 1f       	adc	r19, r19
    22d8:	22 0f       	add	r18, r18
    22da:	33 1f       	adc	r19, r19
    22dc:	28 1b       	sub	r18, r24
    22de:	39 0b       	sbc	r19, r25
    22e0:	fe 01       	movw	r30, r28
    22e2:	e2 0f       	add	r30, r18
    22e4:	f3 1f       	adc	r31, r19
    22e6:	f2 86       	std	Z+10, r15	; 0x0a
        objs[n].period = RIFLE_PER;
    22e8:	84 2f       	mov	r24, r20
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	88 0f       	add	r24, r24
    22ee:	99 1f       	adc	r25, r25
    22f0:	9c 01       	movw	r18, r24
    22f2:	22 0f       	add	r18, r18
    22f4:	33 1f       	adc	r19, r19
    22f6:	22 0f       	add	r18, r18
    22f8:	33 1f       	adc	r19, r19
    22fa:	22 0f       	add	r18, r18
    22fc:	33 1f       	adc	r19, r19
    22fe:	28 1b       	sub	r18, r24
    2300:	39 0b       	sbc	r19, r25
    2302:	fe 01       	movw	r30, r28
    2304:	e2 0f       	add	r30, r18
    2306:	f3 1f       	adc	r31, r19
    2308:	e3 86       	std	Z+11, r14	; 0x0b
        objs[n].elapsedTime = objs[n].period;
    230a:	84 2f       	mov	r24, r20
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	88 0f       	add	r24, r24
    2310:	99 1f       	adc	r25, r25
    2312:	9c 01       	movw	r18, r24
    2314:	22 0f       	add	r18, r18
    2316:	33 1f       	adc	r19, r19
    2318:	22 0f       	add	r18, r18
    231a:	33 1f       	adc	r19, r19
    231c:	22 0f       	add	r18, r18
    231e:	33 1f       	adc	r19, r19
    2320:	28 1b       	sub	r18, r24
    2322:	39 0b       	sbc	r19, r25
    2324:	fe 01       	movw	r30, r28
    2326:	e2 0f       	add	r30, r18
    2328:	f3 1f       	adc	r31, r19
    232a:	e4 86       	std	Z+12, r14	; 0x0c
        objs[n].expire = -1;
    232c:	84 2f       	mov	r24, r20
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	88 0f       	add	r24, r24
    2332:	99 1f       	adc	r25, r25
    2334:	9c 01       	movw	r18, r24
    2336:	22 0f       	add	r18, r18
    2338:	33 1f       	adc	r19, r19
    233a:	22 0f       	add	r18, r18
    233c:	33 1f       	adc	r19, r19
    233e:	22 0f       	add	r18, r18
    2340:	33 1f       	adc	r19, r19
    2342:	28 1b       	sub	r18, r24
    2344:	39 0b       	sbc	r19, r25
    2346:	fe 01       	movw	r30, r28
    2348:	e2 0f       	add	r30, r18
    234a:	f3 1f       	adc	r31, r19
    234c:	f5 86       	std	Z+13, r15	; 0x0d
        objs[n].pos[0] = (*PL).pos[0];
    234e:	d5 01       	movw	r26, r10
    2350:	14 96       	adiw	r26, 0x04	; 4
    2352:	5c 91       	ld	r21, X
    2354:	14 97       	sbiw	r26, 0x04	; 4
    2356:	84 2f       	mov	r24, r20
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	88 0f       	add	r24, r24
    235c:	99 1f       	adc	r25, r25
    235e:	9c 01       	movw	r18, r24
    2360:	22 0f       	add	r18, r18
    2362:	33 1f       	adc	r19, r19
    2364:	22 0f       	add	r18, r18
    2366:	33 1f       	adc	r19, r19
    2368:	22 0f       	add	r18, r18
    236a:	33 1f       	adc	r19, r19
    236c:	28 1b       	sub	r18, r24
    236e:	39 0b       	sbc	r19, r25
    2370:	fe 01       	movw	r30, r28
    2372:	e2 0f       	add	r30, r18
    2374:	f3 1f       	adc	r31, r19
    2376:	54 83       	std	Z+4, r21	; 0x04
        objs[n].pos[1] = (*PL).pos[1] + x * (*PL).aimX;
    2378:	84 2f       	mov	r24, r20
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	88 0f       	add	r24, r24
    237e:	99 1f       	adc	r25, r25
    2380:	9c 01       	movw	r18, r24
    2382:	22 0f       	add	r18, r18
    2384:	33 1f       	adc	r19, r19
    2386:	22 0f       	add	r18, r18
    2388:	33 1f       	adc	r19, r19
    238a:	22 0f       	add	r18, r18
    238c:	33 1f       	adc	r19, r19
    238e:	28 1b       	sub	r18, r24
    2390:	39 0b       	sbc	r19, r25
    2392:	fe 01       	movw	r30, r28
    2394:	e2 0f       	add	r30, r18
    2396:	f3 1f       	adc	r31, r19
    2398:	12 96       	adiw	r26, 0x02	; 2
    239a:	9c 91       	ld	r25, X
    239c:	12 97       	sbiw	r26, 0x02	; 2
    239e:	19 9f       	mul	r17, r25
    23a0:	90 2d       	mov	r25, r0
    23a2:	11 24       	eor	r1, r1
    23a4:	15 96       	adiw	r26, 0x05	; 5
    23a6:	8c 91       	ld	r24, X
    23a8:	15 97       	sbiw	r26, 0x05	; 5
    23aa:	89 0f       	add	r24, r25
    23ac:	85 83       	std	Z+5, r24	; 0x05
        objs[n].pos[2] = (*PL).pos[2];
    23ae:	16 96       	adiw	r26, 0x06	; 6
    23b0:	5c 91       	ld	r21, X
    23b2:	16 97       	sbiw	r26, 0x06	; 6
    23b4:	84 2f       	mov	r24, r20
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	88 0f       	add	r24, r24
    23ba:	99 1f       	adc	r25, r25
    23bc:	9c 01       	movw	r18, r24
    23be:	22 0f       	add	r18, r18
    23c0:	33 1f       	adc	r19, r19
    23c2:	22 0f       	add	r18, r18
    23c4:	33 1f       	adc	r19, r19
    23c6:	22 0f       	add	r18, r18
    23c8:	33 1f       	adc	r19, r19
    23ca:	28 1b       	sub	r18, r24
    23cc:	39 0b       	sbc	r19, r25
    23ce:	fe 01       	movw	r30, r28
    23d0:	e2 0f       	add	r30, r18
    23d2:	f3 1f       	adc	r31, r19
    23d4:	56 83       	std	Z+6, r21	; 0x06
        objs[n].pos[3] = (*PL).pos[3];
    23d6:	17 96       	adiw	r26, 0x07	; 7
    23d8:	5c 91       	ld	r21, X
    23da:	17 97       	sbiw	r26, 0x07	; 7
    23dc:	84 2f       	mov	r24, r20
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	88 0f       	add	r24, r24
    23e2:	99 1f       	adc	r25, r25
    23e4:	9c 01       	movw	r18, r24
    23e6:	22 0f       	add	r18, r18
    23e8:	33 1f       	adc	r19, r19
    23ea:	22 0f       	add	r18, r18
    23ec:	33 1f       	adc	r19, r19
    23ee:	22 0f       	add	r18, r18
    23f0:	33 1f       	adc	r19, r19
    23f2:	28 1b       	sub	r18, r24
    23f4:	39 0b       	sbc	r19, r25
    23f6:	fe 01       	movw	r30, r28
    23f8:	e2 0f       	add	r30, r18
    23fa:	f3 1f       	adc	r31, r19
    23fc:	57 83       	std	Z+7, r21	; 0x07
        objs[n].next[0] = (*PL).aimX;
    23fe:	84 2f       	mov	r24, r20
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	88 0f       	add	r24, r24
    2404:	99 1f       	adc	r25, r25
    2406:	9c 01       	movw	r18, r24
    2408:	22 0f       	add	r18, r18
    240a:	33 1f       	adc	r19, r19
    240c:	22 0f       	add	r18, r18
    240e:	33 1f       	adc	r19, r19
    2410:	22 0f       	add	r18, r18
    2412:	33 1f       	adc	r19, r19
    2414:	28 1b       	sub	r18, r24
    2416:	39 0b       	sbc	r19, r25
    2418:	fe 01       	movw	r30, r28
    241a:	e2 0f       	add	r30, r18
    241c:	f3 1f       	adc	r31, r19
    241e:	12 96       	adiw	r26, 0x02	; 2
    2420:	8c 91       	ld	r24, X
    2422:	12 97       	sbiw	r26, 0x02	; 2
    2424:	80 87       	std	Z+8, r24	; 0x08
        objs[n].next[1] = 0;
    2426:	84 2f       	mov	r24, r20
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	88 0f       	add	r24, r24
    242c:	99 1f       	adc	r25, r25
    242e:	9c 01       	movw	r18, r24
    2430:	22 0f       	add	r18, r18
    2432:	33 1f       	adc	r19, r19
    2434:	22 0f       	add	r18, r18
    2436:	33 1f       	adc	r19, r19
    2438:	22 0f       	add	r18, r18
    243a:	33 1f       	adc	r19, r19
    243c:	28 1b       	sub	r18, r24
    243e:	39 0b       	sbc	r19, r25
    2440:	fe 01       	movw	r30, r28
    2442:	e2 0f       	add	r30, r18
    2444:	f3 1f       	adc	r31, r19
    2446:	11 86       	std	Z+9, r1	; 0x09
        objs[n].next[1] = 0;
      }
      (*PL).cooldown = PISTOL_COOL;
      return;
    case 1: // RIFLE, uses 3 objects
      for(char x = 0; x < 3; ++x) {
    2448:	1f 5f       	subi	r17, 0xFF	; 255
    244a:	13 30       	cpi	r17, 0x03	; 3
    244c:	09 f0       	breq	.+2      	; 0x2450 <genProjectile+0x4d0>
    244e:	f3 ce       	rjmp	.-538    	; 0x2236 <genProjectile+0x2b6>
        objs[n].pos[2] = (*PL).pos[2];
        objs[n].pos[3] = (*PL).pos[3];
        objs[n].next[0] = (*PL).aimX;
        objs[n].next[1] = 0;
      }
      (*PL).cooldown = RIFLE_COOL;
    2450:	8c e0       	ldi	r24, 0x0C	; 12
    2452:	1c 96       	adiw	r26, 0x0c	; 12
    2454:	8c 93       	st	X, r24
    2456:	1c 97       	sbiw	r26, 0x0c	; 12
      return;
    2458:	0c 94 f0 1b 	jmp	0x37e0	; 0x37e0 <genProjectile+0x1860>
    case 2: // RAIL/ION uses -40 objects
      for(char x = (*PL).pos[1]; x >= 0 && x <= 4; x -= (*PL).aimX) {
    245c:	f5 01       	movw	r30, r10
    245e:	15 81       	ldd	r17, Z+5	; 0x05
    2460:	15 30       	cpi	r17, 0x05	; 5
    2462:	08 f0       	brcs	.+2      	; 0x2466 <genProjectile+0x4e6>
    2464:	0d c1       	rjmp	.+538    	; 0x2680 <genProjectile+0x700>
        char n = getNewObj();
        if( n == -1 ) return;
        objs[n].exist = true;
    2466:	c3 e8       	ldi	r28, 0x83	; 131
    2468:	d1 e0       	ldi	r29, 0x01	; 1
    246a:	01 e0       	ldi	r16, 0x01	; 1
        objs[n].collide = false;
        objs[n].who = (*PL).who;
        objs[n].type = 1;
        objs[n].jump = -1;
    246c:	ee 24       	eor	r14, r14
    246e:	ea 94       	dec	r14
        objs[n].period = RAIL_PER;
    2470:	0f 2e       	mov	r0, r31
    2472:	f5 e0       	ldi	r31, 0x05	; 5
    2474:	ff 2e       	mov	r15, r31
    2476:	f0 2d       	mov	r31, r0
        objs[n].elapsedTime = objs[n].period;
        objs[n].expire = 2;
    2478:	dd 24       	eor	r13, r13
    247a:	68 94       	set
    247c:	d1 f8       	bld	r13, 1
      }
      (*PL).cooldown = RIFLE_COOL;
      return;
    case 2: // RAIL/ION uses -40 objects
      for(char x = (*PL).pos[1]; x >= 0 && x <= 4; x -= (*PL).aimX) {
        char n = getNewObj();
    247e:	0e 94 ab 04 	call	0x956	; 0x956 <getNewObj>
    2482:	48 2f       	mov	r20, r24
        if( n == -1 ) return;
        objs[n].exist = true;
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	88 0f       	add	r24, r24
    2488:	99 1f       	adc	r25, r25
    248a:	9c 01       	movw	r18, r24
    248c:	22 0f       	add	r18, r18
    248e:	33 1f       	adc	r19, r19
    2490:	22 0f       	add	r18, r18
    2492:	33 1f       	adc	r19, r19
    2494:	22 0f       	add	r18, r18
    2496:	33 1f       	adc	r19, r19
    2498:	28 1b       	sub	r18, r24
    249a:	39 0b       	sbc	r19, r25
    249c:	fe 01       	movw	r30, r28
    249e:	e2 0f       	add	r30, r18
    24a0:	f3 1f       	adc	r31, r19
    24a2:	00 83       	st	Z, r16
        objs[n].collide = false;
    24a4:	84 2f       	mov	r24, r20
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	88 0f       	add	r24, r24
    24aa:	99 1f       	adc	r25, r25
    24ac:	9c 01       	movw	r18, r24
    24ae:	22 0f       	add	r18, r18
    24b0:	33 1f       	adc	r19, r19
    24b2:	22 0f       	add	r18, r18
    24b4:	33 1f       	adc	r19, r19
    24b6:	22 0f       	add	r18, r18
    24b8:	33 1f       	adc	r19, r19
    24ba:	28 1b       	sub	r18, r24
    24bc:	39 0b       	sbc	r19, r25
    24be:	fe 01       	movw	r30, r28
    24c0:	e2 0f       	add	r30, r18
    24c2:	f3 1f       	adc	r31, r19
    24c4:	11 82       	std	Z+1, r1	; 0x01
        objs[n].who = (*PL).who;
    24c6:	d5 01       	movw	r26, r10
    24c8:	5c 91       	ld	r21, X
    24ca:	84 2f       	mov	r24, r20
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	88 0f       	add	r24, r24
    24d0:	99 1f       	adc	r25, r25
    24d2:	9c 01       	movw	r18, r24
    24d4:	22 0f       	add	r18, r18
    24d6:	33 1f       	adc	r19, r19
    24d8:	22 0f       	add	r18, r18
    24da:	33 1f       	adc	r19, r19
    24dc:	22 0f       	add	r18, r18
    24de:	33 1f       	adc	r19, r19
    24e0:	28 1b       	sub	r18, r24
    24e2:	39 0b       	sbc	r19, r25
    24e4:	fe 01       	movw	r30, r28
    24e6:	e2 0f       	add	r30, r18
    24e8:	f3 1f       	adc	r31, r19
    24ea:	53 83       	std	Z+3, r21	; 0x03
        objs[n].type = 1;
    24ec:	84 2f       	mov	r24, r20
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	88 0f       	add	r24, r24
    24f2:	99 1f       	adc	r25, r25
    24f4:	9c 01       	movw	r18, r24
    24f6:	22 0f       	add	r18, r18
    24f8:	33 1f       	adc	r19, r19
    24fa:	22 0f       	add	r18, r18
    24fc:	33 1f       	adc	r19, r19
    24fe:	22 0f       	add	r18, r18
    2500:	33 1f       	adc	r19, r19
    2502:	28 1b       	sub	r18, r24
    2504:	39 0b       	sbc	r19, r25
    2506:	fe 01       	movw	r30, r28
    2508:	e2 0f       	add	r30, r18
    250a:	f3 1f       	adc	r31, r19
    250c:	02 83       	std	Z+2, r16	; 0x02
        objs[n].jump = -1;
    250e:	84 2f       	mov	r24, r20
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	88 0f       	add	r24, r24
    2514:	99 1f       	adc	r25, r25
    2516:	9c 01       	movw	r18, r24
    2518:	22 0f       	add	r18, r18
    251a:	33 1f       	adc	r19, r19
    251c:	22 0f       	add	r18, r18
    251e:	33 1f       	adc	r19, r19
    2520:	22 0f       	add	r18, r18
    2522:	33 1f       	adc	r19, r19
    2524:	28 1b       	sub	r18, r24
    2526:	39 0b       	sbc	r19, r25
    2528:	fe 01       	movw	r30, r28
    252a:	e2 0f       	add	r30, r18
    252c:	f3 1f       	adc	r31, r19
    252e:	e2 86       	std	Z+10, r14	; 0x0a
        objs[n].period = RAIL_PER;
    2530:	84 2f       	mov	r24, r20
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	88 0f       	add	r24, r24
    2536:	99 1f       	adc	r25, r25
    2538:	9c 01       	movw	r18, r24
    253a:	22 0f       	add	r18, r18
    253c:	33 1f       	adc	r19, r19
    253e:	22 0f       	add	r18, r18
    2540:	33 1f       	adc	r19, r19
    2542:	22 0f       	add	r18, r18
    2544:	33 1f       	adc	r19, r19
    2546:	28 1b       	sub	r18, r24
    2548:	39 0b       	sbc	r19, r25
    254a:	fe 01       	movw	r30, r28
    254c:	e2 0f       	add	r30, r18
    254e:	f3 1f       	adc	r31, r19
    2550:	f3 86       	std	Z+11, r15	; 0x0b
        objs[n].elapsedTime = objs[n].period;
    2552:	84 2f       	mov	r24, r20
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	88 0f       	add	r24, r24
    2558:	99 1f       	adc	r25, r25
    255a:	9c 01       	movw	r18, r24
    255c:	22 0f       	add	r18, r18
    255e:	33 1f       	adc	r19, r19
    2560:	22 0f       	add	r18, r18
    2562:	33 1f       	adc	r19, r19
    2564:	22 0f       	add	r18, r18
    2566:	33 1f       	adc	r19, r19
    2568:	28 1b       	sub	r18, r24
    256a:	39 0b       	sbc	r19, r25
    256c:	fe 01       	movw	r30, r28
    256e:	e2 0f       	add	r30, r18
    2570:	f3 1f       	adc	r31, r19
    2572:	f4 86       	std	Z+12, r15	; 0x0c
        objs[n].expire = 2;
    2574:	84 2f       	mov	r24, r20
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	88 0f       	add	r24, r24
    257a:	99 1f       	adc	r25, r25
    257c:	9c 01       	movw	r18, r24
    257e:	22 0f       	add	r18, r18
    2580:	33 1f       	adc	r19, r19
    2582:	22 0f       	add	r18, r18
    2584:	33 1f       	adc	r19, r19
    2586:	22 0f       	add	r18, r18
    2588:	33 1f       	adc	r19, r19
    258a:	28 1b       	sub	r18, r24
    258c:	39 0b       	sbc	r19, r25
    258e:	fe 01       	movw	r30, r28
    2590:	e2 0f       	add	r30, r18
    2592:	f3 1f       	adc	r31, r19
    2594:	d5 86       	std	Z+13, r13	; 0x0d
        objs[n].pos[0] = (*PL).pos[0];
    2596:	14 96       	adiw	r26, 0x04	; 4
    2598:	5c 91       	ld	r21, X
    259a:	14 97       	sbiw	r26, 0x04	; 4
    259c:	84 2f       	mov	r24, r20
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	88 0f       	add	r24, r24
    25a2:	99 1f       	adc	r25, r25
    25a4:	9c 01       	movw	r18, r24
    25a6:	22 0f       	add	r18, r18
    25a8:	33 1f       	adc	r19, r19
    25aa:	22 0f       	add	r18, r18
    25ac:	33 1f       	adc	r19, r19
    25ae:	22 0f       	add	r18, r18
    25b0:	33 1f       	adc	r19, r19
    25b2:	28 1b       	sub	r18, r24
    25b4:	39 0b       	sbc	r19, r25
    25b6:	fe 01       	movw	r30, r28
    25b8:	e2 0f       	add	r30, r18
    25ba:	f3 1f       	adc	r31, r19
    25bc:	54 83       	std	Z+4, r21	; 0x04
        objs[n].pos[1] = x;
    25be:	84 2f       	mov	r24, r20
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	88 0f       	add	r24, r24
    25c4:	99 1f       	adc	r25, r25
    25c6:	9c 01       	movw	r18, r24
    25c8:	22 0f       	add	r18, r18
    25ca:	33 1f       	adc	r19, r19
    25cc:	22 0f       	add	r18, r18
    25ce:	33 1f       	adc	r19, r19
    25d0:	22 0f       	add	r18, r18
    25d2:	33 1f       	adc	r19, r19
    25d4:	28 1b       	sub	r18, r24
    25d6:	39 0b       	sbc	r19, r25
    25d8:	fe 01       	movw	r30, r28
    25da:	e2 0f       	add	r30, r18
    25dc:	f3 1f       	adc	r31, r19
    25de:	15 83       	std	Z+5, r17	; 0x05
        objs[n].pos[2] = (*PL).pos[2];
    25e0:	16 96       	adiw	r26, 0x06	; 6
    25e2:	5c 91       	ld	r21, X
    25e4:	16 97       	sbiw	r26, 0x06	; 6
    25e6:	84 2f       	mov	r24, r20
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	88 0f       	add	r24, r24
    25ec:	99 1f       	adc	r25, r25
    25ee:	9c 01       	movw	r18, r24
    25f0:	22 0f       	add	r18, r18
    25f2:	33 1f       	adc	r19, r19
    25f4:	22 0f       	add	r18, r18
    25f6:	33 1f       	adc	r19, r19
    25f8:	22 0f       	add	r18, r18
    25fa:	33 1f       	adc	r19, r19
    25fc:	28 1b       	sub	r18, r24
    25fe:	39 0b       	sbc	r19, r25
    2600:	fe 01       	movw	r30, r28
    2602:	e2 0f       	add	r30, r18
    2604:	f3 1f       	adc	r31, r19
    2606:	56 83       	std	Z+6, r21	; 0x06
        objs[n].pos[3] = (*PL).pos[3];
    2608:	17 96       	adiw	r26, 0x07	; 7
    260a:	5c 91       	ld	r21, X
    260c:	17 97       	sbiw	r26, 0x07	; 7
    260e:	84 2f       	mov	r24, r20
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	88 0f       	add	r24, r24
    2614:	99 1f       	adc	r25, r25
    2616:	9c 01       	movw	r18, r24
    2618:	22 0f       	add	r18, r18
    261a:	33 1f       	adc	r19, r19
    261c:	22 0f       	add	r18, r18
    261e:	33 1f       	adc	r19, r19
    2620:	22 0f       	add	r18, r18
    2622:	33 1f       	adc	r19, r19
    2624:	28 1b       	sub	r18, r24
    2626:	39 0b       	sbc	r19, r25
    2628:	fe 01       	movw	r30, r28
    262a:	e2 0f       	add	r30, r18
    262c:	f3 1f       	adc	r31, r19
    262e:	57 83       	std	Z+7, r21	; 0x07
        objs[n].next[0] = 0;
    2630:	84 2f       	mov	r24, r20
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	88 0f       	add	r24, r24
    2636:	99 1f       	adc	r25, r25
    2638:	9c 01       	movw	r18, r24
    263a:	22 0f       	add	r18, r18
    263c:	33 1f       	adc	r19, r19
    263e:	22 0f       	add	r18, r18
    2640:	33 1f       	adc	r19, r19
    2642:	22 0f       	add	r18, r18
    2644:	33 1f       	adc	r19, r19
    2646:	28 1b       	sub	r18, r24
    2648:	39 0b       	sbc	r19, r25
    264a:	fe 01       	movw	r30, r28
    264c:	e2 0f       	add	r30, r18
    264e:	f3 1f       	adc	r31, r19
    2650:	10 86       	std	Z+8, r1	; 0x08
        objs[n].next[1] = 0;
    2652:	84 2f       	mov	r24, r20
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	88 0f       	add	r24, r24
    2658:	99 1f       	adc	r25, r25
    265a:	9c 01       	movw	r18, r24
    265c:	22 0f       	add	r18, r18
    265e:	33 1f       	adc	r19, r19
    2660:	22 0f       	add	r18, r18
    2662:	33 1f       	adc	r19, r19
    2664:	22 0f       	add	r18, r18
    2666:	33 1f       	adc	r19, r19
    2668:	28 1b       	sub	r18, r24
    266a:	39 0b       	sbc	r19, r25
    266c:	fe 01       	movw	r30, r28
    266e:	e2 0f       	add	r30, r18
    2670:	f3 1f       	adc	r31, r19
    2672:	11 86       	std	Z+9, r1	; 0x09
        objs[n].next[1] = 0;
      }
      (*PL).cooldown = RIFLE_COOL;
      return;
    case 2: // RAIL/ION uses -40 objects
      for(char x = (*PL).pos[1]; x >= 0 && x <= 4; x -= (*PL).aimX) {
    2674:	f5 01       	movw	r30, r10
    2676:	82 81       	ldd	r24, Z+2	; 0x02
    2678:	18 1b       	sub	r17, r24
    267a:	15 30       	cpi	r17, 0x05	; 5
    267c:	08 f4       	brcc	.+2      	; 0x2680 <genProjectile+0x700>
    267e:	ff ce       	rjmp	.-514    	; 0x247e <genProjectile+0x4fe>
        objs[n].pos[2] = (*PL).pos[2];
        objs[n].pos[3] = (*PL).pos[3];
        objs[n].next[0] = 0;
        objs[n].next[1] = 0;
      }
      for(signed char c = (*PL).pos[0] + (*PL).aimX; c >= 0 && c <= COL_SPACE; c += (*PL).aimX) {
    2680:	d5 01       	movw	r26, r10
    2682:	14 96       	adiw	r26, 0x04	; 4
    2684:	ec 90       	ld	r14, X
    2686:	14 97       	sbiw	r26, 0x04	; 4
    2688:	12 96       	adiw	r26, 0x02	; 2
    268a:	8c 91       	ld	r24, X
    268c:	e8 0e       	add	r14, r24
    268e:	9e 2c       	mov	r9, r14
    2690:	b8 e0       	ldi	r27, 0x08	; 8
    2692:	be 15       	cp	r27, r14
    2694:	08 f0       	brcs	.+2      	; 0x2698 <genProjectile+0x718>
    2696:	06 c1       	rjmp	.+524    	; 0x28a4 <genProjectile+0x924>
    2698:	14 c1       	rjmp	.+552    	; 0x28c2 <genProjectile+0x942>
        for(char x = 0; x != 5; ++x) {
          char n = getNewObj();
    269a:	0e 94 ab 04 	call	0x956	; 0x956 <getNewObj>
    269e:	48 2f       	mov	r20, r24
          if( n == -1 ) return;
          objs[n].exist = true;
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	88 0f       	add	r24, r24
    26a4:	99 1f       	adc	r25, r25
    26a6:	9c 01       	movw	r18, r24
    26a8:	22 0f       	add	r18, r18
    26aa:	33 1f       	adc	r19, r19
    26ac:	22 0f       	add	r18, r18
    26ae:	33 1f       	adc	r19, r19
    26b0:	22 0f       	add	r18, r18
    26b2:	33 1f       	adc	r19, r19
    26b4:	28 1b       	sub	r18, r24
    26b6:	39 0b       	sbc	r19, r25
    26b8:	fe 01       	movw	r30, r28
    26ba:	e2 0f       	add	r30, r18
    26bc:	f3 1f       	adc	r31, r19
    26be:	00 83       	st	Z, r16
          objs[n].collide = false;
    26c0:	84 2f       	mov	r24, r20
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	88 0f       	add	r24, r24
    26c6:	99 1f       	adc	r25, r25
    26c8:	9c 01       	movw	r18, r24
    26ca:	22 0f       	add	r18, r18
    26cc:	33 1f       	adc	r19, r19
    26ce:	22 0f       	add	r18, r18
    26d0:	33 1f       	adc	r19, r19
    26d2:	22 0f       	add	r18, r18
    26d4:	33 1f       	adc	r19, r19
    26d6:	28 1b       	sub	r18, r24
    26d8:	39 0b       	sbc	r19, r25
    26da:	fe 01       	movw	r30, r28
    26dc:	e2 0f       	add	r30, r18
    26de:	f3 1f       	adc	r31, r19
    26e0:	11 82       	std	Z+1, r1	; 0x01
          objs[n].who = (*PL).who;
    26e2:	f5 01       	movw	r30, r10
    26e4:	50 81       	ld	r21, Z
    26e6:	84 2f       	mov	r24, r20
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	88 0f       	add	r24, r24
    26ec:	99 1f       	adc	r25, r25
    26ee:	9c 01       	movw	r18, r24
    26f0:	22 0f       	add	r18, r18
    26f2:	33 1f       	adc	r19, r19
    26f4:	22 0f       	add	r18, r18
    26f6:	33 1f       	adc	r19, r19
    26f8:	22 0f       	add	r18, r18
    26fa:	33 1f       	adc	r19, r19
    26fc:	28 1b       	sub	r18, r24
    26fe:	39 0b       	sbc	r19, r25
    2700:	fe 01       	movw	r30, r28
    2702:	e2 0f       	add	r30, r18
    2704:	f3 1f       	adc	r31, r19
    2706:	53 83       	std	Z+3, r21	; 0x03
          objs[n].type = 1;
    2708:	84 2f       	mov	r24, r20
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	88 0f       	add	r24, r24
    270e:	99 1f       	adc	r25, r25
    2710:	9c 01       	movw	r18, r24
    2712:	22 0f       	add	r18, r18
    2714:	33 1f       	adc	r19, r19
    2716:	22 0f       	add	r18, r18
    2718:	33 1f       	adc	r19, r19
    271a:	22 0f       	add	r18, r18
    271c:	33 1f       	adc	r19, r19
    271e:	28 1b       	sub	r18, r24
    2720:	39 0b       	sbc	r19, r25
    2722:	fe 01       	movw	r30, r28
    2724:	e2 0f       	add	r30, r18
    2726:	f3 1f       	adc	r31, r19
    2728:	02 83       	std	Z+2, r16	; 0x02
          objs[n].jump = -1;
    272a:	84 2f       	mov	r24, r20
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	88 0f       	add	r24, r24
    2730:	99 1f       	adc	r25, r25
    2732:	9c 01       	movw	r18, r24
    2734:	22 0f       	add	r18, r18
    2736:	33 1f       	adc	r19, r19
    2738:	22 0f       	add	r18, r18
    273a:	33 1f       	adc	r19, r19
    273c:	22 0f       	add	r18, r18
    273e:	33 1f       	adc	r19, r19
    2740:	28 1b       	sub	r18, r24
    2742:	39 0b       	sbc	r19, r25
    2744:	fe 01       	movw	r30, r28
    2746:	e2 0f       	add	r30, r18
    2748:	f3 1f       	adc	r31, r19
    274a:	d2 86       	std	Z+10, r13	; 0x0a
          objs[n].period = RAIL_PER;
    274c:	84 2f       	mov	r24, r20
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	88 0f       	add	r24, r24
    2752:	99 1f       	adc	r25, r25
    2754:	9c 01       	movw	r18, r24
    2756:	22 0f       	add	r18, r18
    2758:	33 1f       	adc	r19, r19
    275a:	22 0f       	add	r18, r18
    275c:	33 1f       	adc	r19, r19
    275e:	22 0f       	add	r18, r18
    2760:	33 1f       	adc	r19, r19
    2762:	28 1b       	sub	r18, r24
    2764:	39 0b       	sbc	r19, r25
    2766:	fe 01       	movw	r30, r28
    2768:	e2 0f       	add	r30, r18
    276a:	f3 1f       	adc	r31, r19
    276c:	f3 86       	std	Z+11, r15	; 0x0b
          objs[n].elapsedTime = objs[n].period;
    276e:	84 2f       	mov	r24, r20
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	88 0f       	add	r24, r24
    2774:	99 1f       	adc	r25, r25
    2776:	9c 01       	movw	r18, r24
    2778:	22 0f       	add	r18, r18
    277a:	33 1f       	adc	r19, r19
    277c:	22 0f       	add	r18, r18
    277e:	33 1f       	adc	r19, r19
    2780:	22 0f       	add	r18, r18
    2782:	33 1f       	adc	r19, r19
    2784:	28 1b       	sub	r18, r24
    2786:	39 0b       	sbc	r19, r25
    2788:	fe 01       	movw	r30, r28
    278a:	e2 0f       	add	r30, r18
    278c:	f3 1f       	adc	r31, r19
    278e:	f4 86       	std	Z+12, r15	; 0x0c
          objs[n].expire = 2;
    2790:	84 2f       	mov	r24, r20
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	88 0f       	add	r24, r24
    2796:	99 1f       	adc	r25, r25
    2798:	9c 01       	movw	r18, r24
    279a:	22 0f       	add	r18, r18
    279c:	33 1f       	adc	r19, r19
    279e:	22 0f       	add	r18, r18
    27a0:	33 1f       	adc	r19, r19
    27a2:	22 0f       	add	r18, r18
    27a4:	33 1f       	adc	r19, r19
    27a6:	28 1b       	sub	r18, r24
    27a8:	39 0b       	sbc	r19, r25
    27aa:	fe 01       	movw	r30, r28
    27ac:	e2 0f       	add	r30, r18
    27ae:	f3 1f       	adc	r31, r19
    27b0:	c5 86       	std	Z+13, r12	; 0x0d
          objs[n].pos[0] = c;
    27b2:	84 2f       	mov	r24, r20
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	88 0f       	add	r24, r24
    27b8:	99 1f       	adc	r25, r25
    27ba:	9c 01       	movw	r18, r24
    27bc:	22 0f       	add	r18, r18
    27be:	33 1f       	adc	r19, r19
    27c0:	22 0f       	add	r18, r18
    27c2:	33 1f       	adc	r19, r19
    27c4:	22 0f       	add	r18, r18
    27c6:	33 1f       	adc	r19, r19
    27c8:	28 1b       	sub	r18, r24
    27ca:	39 0b       	sbc	r19, r25
    27cc:	fe 01       	movw	r30, r28
    27ce:	e2 0f       	add	r30, r18
    27d0:	f3 1f       	adc	r31, r19
    27d2:	e4 82       	std	Z+4, r14	; 0x04
          objs[n].pos[1] = x;
    27d4:	84 2f       	mov	r24, r20
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	88 0f       	add	r24, r24
    27da:	99 1f       	adc	r25, r25
    27dc:	9c 01       	movw	r18, r24
    27de:	22 0f       	add	r18, r18
    27e0:	33 1f       	adc	r19, r19
    27e2:	22 0f       	add	r18, r18
    27e4:	33 1f       	adc	r19, r19
    27e6:	22 0f       	add	r18, r18
    27e8:	33 1f       	adc	r19, r19
    27ea:	28 1b       	sub	r18, r24
    27ec:	39 0b       	sbc	r19, r25
    27ee:	fe 01       	movw	r30, r28
    27f0:	e2 0f       	add	r30, r18
    27f2:	f3 1f       	adc	r31, r19
    27f4:	15 83       	std	Z+5, r17	; 0x05
          objs[n].pos[2] = (*PL).pos[2];
    27f6:	d5 01       	movw	r26, r10
    27f8:	16 96       	adiw	r26, 0x06	; 6
    27fa:	5c 91       	ld	r21, X
    27fc:	16 97       	sbiw	r26, 0x06	; 6
    27fe:	84 2f       	mov	r24, r20
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	88 0f       	add	r24, r24
    2804:	99 1f       	adc	r25, r25
    2806:	9c 01       	movw	r18, r24
    2808:	22 0f       	add	r18, r18
    280a:	33 1f       	adc	r19, r19
    280c:	22 0f       	add	r18, r18
    280e:	33 1f       	adc	r19, r19
    2810:	22 0f       	add	r18, r18
    2812:	33 1f       	adc	r19, r19
    2814:	28 1b       	sub	r18, r24
    2816:	39 0b       	sbc	r19, r25
    2818:	fe 01       	movw	r30, r28
    281a:	e2 0f       	add	r30, r18
    281c:	f3 1f       	adc	r31, r19
    281e:	56 83       	std	Z+6, r21	; 0x06
          objs[n].pos[3] = (*PL).pos[3];
    2820:	17 96       	adiw	r26, 0x07	; 7
    2822:	5c 91       	ld	r21, X
    2824:	17 97       	sbiw	r26, 0x07	; 7
    2826:	84 2f       	mov	r24, r20
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	88 0f       	add	r24, r24
    282c:	99 1f       	adc	r25, r25
    282e:	9c 01       	movw	r18, r24
    2830:	22 0f       	add	r18, r18
    2832:	33 1f       	adc	r19, r19
    2834:	22 0f       	add	r18, r18
    2836:	33 1f       	adc	r19, r19
    2838:	22 0f       	add	r18, r18
    283a:	33 1f       	adc	r19, r19
    283c:	28 1b       	sub	r18, r24
    283e:	39 0b       	sbc	r19, r25
    2840:	fe 01       	movw	r30, r28
    2842:	e2 0f       	add	r30, r18
    2844:	f3 1f       	adc	r31, r19
    2846:	57 83       	std	Z+7, r21	; 0x07
          objs[n].next[0] = 0;
    2848:	84 2f       	mov	r24, r20
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	88 0f       	add	r24, r24
    284e:	99 1f       	adc	r25, r25
    2850:	9c 01       	movw	r18, r24
    2852:	22 0f       	add	r18, r18
    2854:	33 1f       	adc	r19, r19
    2856:	22 0f       	add	r18, r18
    2858:	33 1f       	adc	r19, r19
    285a:	22 0f       	add	r18, r18
    285c:	33 1f       	adc	r19, r19
    285e:	28 1b       	sub	r18, r24
    2860:	39 0b       	sbc	r19, r25
    2862:	fe 01       	movw	r30, r28
    2864:	e2 0f       	add	r30, r18
    2866:	f3 1f       	adc	r31, r19
    2868:	10 86       	std	Z+8, r1	; 0x08
          objs[n].next[1] = 0;
    286a:	84 2f       	mov	r24, r20
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	88 0f       	add	r24, r24
    2870:	99 1f       	adc	r25, r25
    2872:	9c 01       	movw	r18, r24
    2874:	22 0f       	add	r18, r18
    2876:	33 1f       	adc	r19, r19
    2878:	22 0f       	add	r18, r18
    287a:	33 1f       	adc	r19, r19
    287c:	22 0f       	add	r18, r18
    287e:	33 1f       	adc	r19, r19
    2880:	28 1b       	sub	r18, r24
    2882:	39 0b       	sbc	r19, r25
    2884:	fe 01       	movw	r30, r28
    2886:	e2 0f       	add	r30, r18
    2888:	f3 1f       	adc	r31, r19
    288a:	11 86       	std	Z+9, r1	; 0x09
        objs[n].pos[3] = (*PL).pos[3];
        objs[n].next[0] = 0;
        objs[n].next[1] = 0;
      }
      for(signed char c = (*PL).pos[0] + (*PL).aimX; c >= 0 && c <= COL_SPACE; c += (*PL).aimX) {
        for(char x = 0; x != 5; ++x) {
    288c:	1f 5f       	subi	r17, 0xFF	; 255
    288e:	15 30       	cpi	r17, 0x05	; 5
    2890:	09 f0       	breq	.+2      	; 0x2894 <genProjectile+0x914>
    2892:	03 cf       	rjmp	.-506    	; 0x269a <genProjectile+0x71a>
        objs[n].pos[2] = (*PL).pos[2];
        objs[n].pos[3] = (*PL).pos[3];
        objs[n].next[0] = 0;
        objs[n].next[1] = 0;
      }
      for(signed char c = (*PL).pos[0] + (*PL).aimX; c >= 0 && c <= COL_SPACE; c += (*PL).aimX) {
    2894:	12 96       	adiw	r26, 0x02	; 2
    2896:	8c 91       	ld	r24, X
    2898:	98 0e       	add	r9, r24
    289a:	e9 2c       	mov	r14, r9
    289c:	b8 e0       	ldi	r27, 0x08	; 8
    289e:	b9 15       	cp	r27, r9
    28a0:	70 f4       	brcc	.+28     	; 0x28be <genProjectile+0x93e>
    28a2:	0f c0       	rjmp	.+30     	; 0x28c2 <genProjectile+0x942>
}

// Creates projectiles for the player based on what's equiped
void genProjectile( player *PL ) {
  if( getNewObj() == -1 ) return;
  switch((*PL).equip) {
    28a4:	88 24       	eor	r8, r8
      }
      for(signed char c = (*PL).pos[0] + (*PL).aimX; c >= 0 && c <= COL_SPACE; c += (*PL).aimX) {
        for(char x = 0; x != 5; ++x) {
          char n = getNewObj();
          if( n == -1 ) return;
          objs[n].exist = true;
    28a6:	c3 e8       	ldi	r28, 0x83	; 131
    28a8:	d1 e0       	ldi	r29, 0x01	; 1
    28aa:	01 e0       	ldi	r16, 0x01	; 1
          objs[n].collide = false;
          objs[n].who = (*PL).who;
          objs[n].type = 1;
          objs[n].jump = -1;
    28ac:	dd 24       	eor	r13, r13
    28ae:	da 94       	dec	r13
          objs[n].period = RAIL_PER;
    28b0:	0f 2e       	mov	r0, r31
    28b2:	f5 e0       	ldi	r31, 0x05	; 5
    28b4:	ff 2e       	mov	r15, r31
    28b6:	f0 2d       	mov	r31, r0
          objs[n].elapsedTime = objs[n].period;
          objs[n].expire = 2;
    28b8:	cc 24       	eor	r12, r12
    28ba:	68 94       	set
    28bc:	c1 f8       	bld	r12, 1
}

// Creates projectiles for the player based on what's equiped
void genProjectile( player *PL ) {
  if( getNewObj() == -1 ) return;
  switch((*PL).equip) {
    28be:	18 2d       	mov	r17, r8
    28c0:	ec ce       	rjmp	.-552    	; 0x269a <genProjectile+0x71a>
          objs[n].pos[3] = (*PL).pos[3];
          objs[n].next[0] = 0;
          objs[n].next[1] = 0;
        }
      }
      (*PL).cooldown = RAIL_COOL;
    28c2:	81 e2       	ldi	r24, 0x21	; 33
    28c4:	f5 01       	movw	r30, r10
    28c6:	84 87       	std	Z+12, r24	; 0x0c
      return;
    28c8:	8b c7       	rjmp	.+3862   	; 0x37e0 <genProjectile+0x1860>
    case 3: // WAVE, uses 10 obj
      for(signed char x = 0; x < 2; ++x) {  
        for(signed char y = -2; y < 3; ++y) {
          char n = getNewObj();
    28ca:	0e 94 ab 04 	call	0x956	; 0x956 <getNewObj>
    28ce:	48 2f       	mov	r20, r24
          if( n == -1 ) return;
          objs[n].exist = true;
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	88 0f       	add	r24, r24
    28d4:	99 1f       	adc	r25, r25
    28d6:	9c 01       	movw	r18, r24
    28d8:	22 0f       	add	r18, r18
    28da:	33 1f       	adc	r19, r19
    28dc:	22 0f       	add	r18, r18
    28de:	33 1f       	adc	r19, r19
    28e0:	22 0f       	add	r18, r18
    28e2:	33 1f       	adc	r19, r19
    28e4:	28 1b       	sub	r18, r24
    28e6:	39 0b       	sbc	r19, r25
    28e8:	fe 01       	movw	r30, r28
    28ea:	e2 0f       	add	r30, r18
    28ec:	f3 1f       	adc	r31, r19
    28ee:	e0 82       	st	Z, r14
          objs[n].collide = false;
    28f0:	84 2f       	mov	r24, r20
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	88 0f       	add	r24, r24
    28f6:	99 1f       	adc	r25, r25
    28f8:	9c 01       	movw	r18, r24
    28fa:	22 0f       	add	r18, r18
    28fc:	33 1f       	adc	r19, r19
    28fe:	22 0f       	add	r18, r18
    2900:	33 1f       	adc	r19, r19
    2902:	22 0f       	add	r18, r18
    2904:	33 1f       	adc	r19, r19
    2906:	28 1b       	sub	r18, r24
    2908:	39 0b       	sbc	r19, r25
    290a:	fe 01       	movw	r30, r28
    290c:	e2 0f       	add	r30, r18
    290e:	f3 1f       	adc	r31, r19
    2910:	11 82       	std	Z+1, r1	; 0x01
          objs[n].who = (*PL).who;
    2912:	d5 01       	movw	r26, r10
    2914:	5c 91       	ld	r21, X
    2916:	84 2f       	mov	r24, r20
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	88 0f       	add	r24, r24
    291c:	99 1f       	adc	r25, r25
    291e:	9c 01       	movw	r18, r24
    2920:	22 0f       	add	r18, r18
    2922:	33 1f       	adc	r19, r19
    2924:	22 0f       	add	r18, r18
    2926:	33 1f       	adc	r19, r19
    2928:	22 0f       	add	r18, r18
    292a:	33 1f       	adc	r19, r19
    292c:	28 1b       	sub	r18, r24
    292e:	39 0b       	sbc	r19, r25
    2930:	fe 01       	movw	r30, r28
    2932:	e2 0f       	add	r30, r18
    2934:	f3 1f       	adc	r31, r19
    2936:	53 83       	std	Z+3, r21	; 0x03
          objs[n].type = 0;
    2938:	84 2f       	mov	r24, r20
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	88 0f       	add	r24, r24
    293e:	99 1f       	adc	r25, r25
    2940:	9c 01       	movw	r18, r24
    2942:	22 0f       	add	r18, r18
    2944:	33 1f       	adc	r19, r19
    2946:	22 0f       	add	r18, r18
    2948:	33 1f       	adc	r19, r19
    294a:	22 0f       	add	r18, r18
    294c:	33 1f       	adc	r19, r19
    294e:	28 1b       	sub	r18, r24
    2950:	39 0b       	sbc	r19, r25
    2952:	fe 01       	movw	r30, r28
    2954:	e2 0f       	add	r30, r18
    2956:	f3 1f       	adc	r31, r19
    2958:	12 82       	std	Z+2, r1	; 0x02
          objs[n].jump = -1;
    295a:	84 2f       	mov	r24, r20
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	88 0f       	add	r24, r24
    2960:	99 1f       	adc	r25, r25
    2962:	9c 01       	movw	r18, r24
    2964:	22 0f       	add	r18, r18
    2966:	33 1f       	adc	r19, r19
    2968:	22 0f       	add	r18, r18
    296a:	33 1f       	adc	r19, r19
    296c:	22 0f       	add	r18, r18
    296e:	33 1f       	adc	r19, r19
    2970:	28 1b       	sub	r18, r24
    2972:	39 0b       	sbc	r19, r25
    2974:	fe 01       	movw	r30, r28
    2976:	e2 0f       	add	r30, r18
    2978:	f3 1f       	adc	r31, r19
    297a:	d2 86       	std	Z+10, r13	; 0x0a
          objs[n].period = WAVE_PER;
    297c:	84 2f       	mov	r24, r20
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	88 0f       	add	r24, r24
    2982:	99 1f       	adc	r25, r25
    2984:	9c 01       	movw	r18, r24
    2986:	22 0f       	add	r18, r18
    2988:	33 1f       	adc	r19, r19
    298a:	22 0f       	add	r18, r18
    298c:	33 1f       	adc	r19, r19
    298e:	22 0f       	add	r18, r18
    2990:	33 1f       	adc	r19, r19
    2992:	28 1b       	sub	r18, r24
    2994:	39 0b       	sbc	r19, r25
    2996:	fe 01       	movw	r30, r28
    2998:	e2 0f       	add	r30, r18
    299a:	f3 1f       	adc	r31, r19
    299c:	03 87       	std	Z+11, r16	; 0x0b
          objs[n].elapsedTime = objs[n].period;
    299e:	84 2f       	mov	r24, r20
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	88 0f       	add	r24, r24
    29a4:	99 1f       	adc	r25, r25
    29a6:	9c 01       	movw	r18, r24
    29a8:	22 0f       	add	r18, r18
    29aa:	33 1f       	adc	r19, r19
    29ac:	22 0f       	add	r18, r18
    29ae:	33 1f       	adc	r19, r19
    29b0:	22 0f       	add	r18, r18
    29b2:	33 1f       	adc	r19, r19
    29b4:	28 1b       	sub	r18, r24
    29b6:	39 0b       	sbc	r19, r25
    29b8:	fe 01       	movw	r30, r28
    29ba:	e2 0f       	add	r30, r18
    29bc:	f3 1f       	adc	r31, r19
    29be:	04 87       	std	Z+12, r16	; 0x0c
          if(y == 2 || y == -2)  objs[n].expire = WAVE_RANGE - 10;
    29c0:	12 30       	cpi	r17, 0x02	; 2
    29c2:	11 f0       	breq	.+4      	; 0x29c8 <genProjectile+0xa48>
    29c4:	1e 3f       	cpi	r17, 0xFE	; 254
    29c6:	91 f4       	brne	.+36     	; 0x29ec <genProjectile+0xa6c>
    29c8:	84 2f       	mov	r24, r20
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	88 0f       	add	r24, r24
    29ce:	99 1f       	adc	r25, r25
    29d0:	9c 01       	movw	r18, r24
    29d2:	22 0f       	add	r18, r18
    29d4:	33 1f       	adc	r19, r19
    29d6:	22 0f       	add	r18, r18
    29d8:	33 1f       	adc	r19, r19
    29da:	22 0f       	add	r18, r18
    29dc:	33 1f       	adc	r19, r19
    29de:	28 1b       	sub	r18, r24
    29e0:	39 0b       	sbc	r19, r25
    29e2:	fe 01       	movw	r30, r28
    29e4:	e2 0f       	add	r30, r18
    29e6:	f3 1f       	adc	r31, r19
    29e8:	c5 86       	std	Z+13, r12	; 0x0d
    29ea:	27 c0       	rjmp	.+78     	; 0x2a3a <genProjectile+0xaba>
          else if(y == 1 || y == -1)  objs[n].expire = WAVE_RANGE - 1;
    29ec:	11 30       	cpi	r17, 0x01	; 1
    29ee:	11 f0       	breq	.+4      	; 0x29f4 <genProjectile+0xa74>
    29f0:	1f 3f       	cpi	r17, 0xFF	; 255
    29f2:	91 f4       	brne	.+36     	; 0x2a18 <genProjectile+0xa98>
    29f4:	84 2f       	mov	r24, r20
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	88 0f       	add	r24, r24
    29fa:	99 1f       	adc	r25, r25
    29fc:	9c 01       	movw	r18, r24
    29fe:	22 0f       	add	r18, r18
    2a00:	33 1f       	adc	r19, r19
    2a02:	22 0f       	add	r18, r18
    2a04:	33 1f       	adc	r19, r19
    2a06:	22 0f       	add	r18, r18
    2a08:	33 1f       	adc	r19, r19
    2a0a:	28 1b       	sub	r18, r24
    2a0c:	39 0b       	sbc	r19, r25
    2a0e:	fe 01       	movw	r30, r28
    2a10:	e2 0f       	add	r30, r18
    2a12:	f3 1f       	adc	r31, r19
    2a14:	85 86       	std	Z+13, r8	; 0x0d
    2a16:	11 c0       	rjmp	.+34     	; 0x2a3a <genProjectile+0xaba>
          else objs[n].expire = WAVE_RANGE;
    2a18:	84 2f       	mov	r24, r20
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	88 0f       	add	r24, r24
    2a1e:	99 1f       	adc	r25, r25
    2a20:	9c 01       	movw	r18, r24
    2a22:	22 0f       	add	r18, r18
    2a24:	33 1f       	adc	r19, r19
    2a26:	22 0f       	add	r18, r18
    2a28:	33 1f       	adc	r19, r19
    2a2a:	22 0f       	add	r18, r18
    2a2c:	33 1f       	adc	r19, r19
    2a2e:	28 1b       	sub	r18, r24
    2a30:	39 0b       	sbc	r19, r25
    2a32:	fe 01       	movw	r30, r28
    2a34:	e2 0f       	add	r30, r18
    2a36:	f3 1f       	adc	r31, r19
    2a38:	95 86       	std	Z+13, r9	; 0x0d
          objs[n].pos[0] = (*PL).pos[0];
    2a3a:	f5 01       	movw	r30, r10
    2a3c:	54 81       	ldd	r21, Z+4	; 0x04
    2a3e:	84 2f       	mov	r24, r20
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	88 0f       	add	r24, r24
    2a44:	99 1f       	adc	r25, r25
    2a46:	9c 01       	movw	r18, r24
    2a48:	22 0f       	add	r18, r18
    2a4a:	33 1f       	adc	r19, r19
    2a4c:	22 0f       	add	r18, r18
    2a4e:	33 1f       	adc	r19, r19
    2a50:	22 0f       	add	r18, r18
    2a52:	33 1f       	adc	r19, r19
    2a54:	28 1b       	sub	r18, r24
    2a56:	39 0b       	sbc	r19, r25
    2a58:	fe 01       	movw	r30, r28
    2a5a:	e2 0f       	add	r30, r18
    2a5c:	f3 1f       	adc	r31, r19
    2a5e:	54 83       	std	Z+4, r21	; 0x04
          objs[n].pos[1] = (*PL).pos[1] + x;
    2a60:	84 2f       	mov	r24, r20
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	88 0f       	add	r24, r24
    2a66:	99 1f       	adc	r25, r25
    2a68:	9c 01       	movw	r18, r24
    2a6a:	22 0f       	add	r18, r18
    2a6c:	33 1f       	adc	r19, r19
    2a6e:	22 0f       	add	r18, r18
    2a70:	33 1f       	adc	r19, r19
    2a72:	22 0f       	add	r18, r18
    2a74:	33 1f       	adc	r19, r19
    2a76:	28 1b       	sub	r18, r24
    2a78:	39 0b       	sbc	r19, r25
    2a7a:	fe 01       	movw	r30, r28
    2a7c:	e2 0f       	add	r30, r18
    2a7e:	f3 1f       	adc	r31, r19
    2a80:	d5 01       	movw	r26, r10
    2a82:	15 96       	adiw	r26, 0x05	; 5
    2a84:	8c 91       	ld	r24, X
    2a86:	15 97       	sbiw	r26, 0x05	; 5
    2a88:	8f 0d       	add	r24, r15
    2a8a:	85 83       	std	Z+5, r24	; 0x05
          objs[n].pos[2] = (*PL).pos[2] + y;
    2a8c:	84 2f       	mov	r24, r20
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	88 0f       	add	r24, r24
    2a92:	99 1f       	adc	r25, r25
    2a94:	9c 01       	movw	r18, r24
    2a96:	22 0f       	add	r18, r18
    2a98:	33 1f       	adc	r19, r19
    2a9a:	22 0f       	add	r18, r18
    2a9c:	33 1f       	adc	r19, r19
    2a9e:	22 0f       	add	r18, r18
    2aa0:	33 1f       	adc	r19, r19
    2aa2:	28 1b       	sub	r18, r24
    2aa4:	39 0b       	sbc	r19, r25
    2aa6:	fe 01       	movw	r30, r28
    2aa8:	e2 0f       	add	r30, r18
    2aaa:	f3 1f       	adc	r31, r19
    2aac:	16 96       	adiw	r26, 0x06	; 6
    2aae:	8c 91       	ld	r24, X
    2ab0:	16 97       	sbiw	r26, 0x06	; 6
    2ab2:	81 0f       	add	r24, r17
    2ab4:	86 83       	std	Z+6, r24	; 0x06
          objs[n].pos[3] = (*PL).pos[3];
    2ab6:	17 96       	adiw	r26, 0x07	; 7
    2ab8:	5c 91       	ld	r21, X
    2aba:	17 97       	sbiw	r26, 0x07	; 7
    2abc:	84 2f       	mov	r24, r20
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	88 0f       	add	r24, r24
    2ac2:	99 1f       	adc	r25, r25
    2ac4:	9c 01       	movw	r18, r24
    2ac6:	22 0f       	add	r18, r18
    2ac8:	33 1f       	adc	r19, r19
    2aca:	22 0f       	add	r18, r18
    2acc:	33 1f       	adc	r19, r19
    2ace:	22 0f       	add	r18, r18
    2ad0:	33 1f       	adc	r19, r19
    2ad2:	28 1b       	sub	r18, r24
    2ad4:	39 0b       	sbc	r19, r25
    2ad6:	fe 01       	movw	r30, r28
    2ad8:	e2 0f       	add	r30, r18
    2ada:	f3 1f       	adc	r31, r19
    2adc:	57 83       	std	Z+7, r21	; 0x07
          objs[n].next[0] = (*PL).aimX;
    2ade:	84 2f       	mov	r24, r20
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	88 0f       	add	r24, r24
    2ae4:	99 1f       	adc	r25, r25
    2ae6:	9c 01       	movw	r18, r24
    2ae8:	22 0f       	add	r18, r18
    2aea:	33 1f       	adc	r19, r19
    2aec:	22 0f       	add	r18, r18
    2aee:	33 1f       	adc	r19, r19
    2af0:	22 0f       	add	r18, r18
    2af2:	33 1f       	adc	r19, r19
    2af4:	28 1b       	sub	r18, r24
    2af6:	39 0b       	sbc	r19, r25
    2af8:	fe 01       	movw	r30, r28
    2afa:	e2 0f       	add	r30, r18
    2afc:	f3 1f       	adc	r31, r19
    2afe:	12 96       	adiw	r26, 0x02	; 2
    2b00:	8c 91       	ld	r24, X
    2b02:	12 97       	sbiw	r26, 0x02	; 2
    2b04:	80 87       	std	Z+8, r24	; 0x08
          objs[n].next[1] = 0;
    2b06:	84 2f       	mov	r24, r20
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	88 0f       	add	r24, r24
    2b0c:	99 1f       	adc	r25, r25
    2b0e:	9c 01       	movw	r18, r24
    2b10:	22 0f       	add	r18, r18
    2b12:	33 1f       	adc	r19, r19
    2b14:	22 0f       	add	r18, r18
    2b16:	33 1f       	adc	r19, r19
    2b18:	22 0f       	add	r18, r18
    2b1a:	33 1f       	adc	r19, r19
    2b1c:	28 1b       	sub	r18, r24
    2b1e:	39 0b       	sbc	r19, r25
    2b20:	fe 01       	movw	r30, r28
    2b22:	e2 0f       	add	r30, r18
    2b24:	f3 1f       	adc	r31, r19
    2b26:	11 86       	std	Z+9, r1	; 0x09
      }
      (*PL).cooldown = RAIL_COOL;
      return;
    case 3: // WAVE, uses 10 obj
      for(signed char x = 0; x < 2; ++x) {  
        for(signed char y = -2; y < 3; ++y) {
    2b28:	1f 5f       	subi	r17, 0xFF	; 255
    2b2a:	13 30       	cpi	r17, 0x03	; 3
    2b2c:	09 f0       	breq	.+2      	; 0x2b30 <genProjectile+0xbb0>
    2b2e:	cd ce       	rjmp	.-614    	; 0x28ca <genProjectile+0x94a>
        }
      }
      (*PL).cooldown = RAIL_COOL;
      return;
    case 3: // WAVE, uses 10 obj
      for(signed char x = 0; x < 2; ++x) {  
    2b30:	f3 94       	inc	r15
    2b32:	b2 e0       	ldi	r27, 0x02	; 2
    2b34:	fb 16       	cp	r15, r27
    2b36:	c9 f4       	brne	.+50     	; 0x2b6a <genProjectile+0xbea>
    2b38:	1a c0       	rjmp	.+52     	; 0x2b6e <genProjectile+0xbee>
}

// Creates projectiles for the player based on what's equiped
void genProjectile( player *PL ) {
  if( getNewObj() == -1 ) return;
  switch((*PL).equip) {
    2b3a:	ff 24       	eor	r15, r15
    2b3c:	0f 2e       	mov	r0, r31
    2b3e:	fe ef       	ldi	r31, 0xFE	; 254
    2b40:	7f 2e       	mov	r7, r31
    2b42:	f0 2d       	mov	r31, r0
    case 3: // WAVE, uses 10 obj
      for(signed char x = 0; x < 2; ++x) {  
        for(signed char y = -2; y < 3; ++y) {
          char n = getNewObj();
          if( n == -1 ) return;
          objs[n].exist = true;
    2b44:	c3 e8       	ldi	r28, 0x83	; 131
    2b46:	d1 e0       	ldi	r29, 0x01	; 1
    2b48:	ee 24       	eor	r14, r14
    2b4a:	e3 94       	inc	r14
          objs[n].collide = false;
          objs[n].who = (*PL).who;
          objs[n].type = 0;
          objs[n].jump = -1;
    2b4c:	dd 24       	eor	r13, r13
    2b4e:	da 94       	dec	r13
          objs[n].period = WAVE_PER;
    2b50:	05 e0       	ldi	r16, 0x05	; 5
          objs[n].elapsedTime = objs[n].period;
          if(y == 2 || y == -2)  objs[n].expire = WAVE_RANGE - 10;
    2b52:	0f 2e       	mov	r0, r31
    2b54:	f3 e0       	ldi	r31, 0x03	; 3
    2b56:	cf 2e       	mov	r12, r31
    2b58:	f0 2d       	mov	r31, r0
          else if(y == 1 || y == -1)  objs[n].expire = WAVE_RANGE - 1;
    2b5a:	0f 2e       	mov	r0, r31
    2b5c:	fc e0       	ldi	r31, 0x0C	; 12
    2b5e:	8f 2e       	mov	r8, r31
    2b60:	f0 2d       	mov	r31, r0
          else objs[n].expire = WAVE_RANGE;
    2b62:	0f 2e       	mov	r0, r31
    2b64:	fd e0       	ldi	r31, 0x0D	; 13
    2b66:	9f 2e       	mov	r9, r31
    2b68:	f0 2d       	mov	r31, r0
}

// Creates projectiles for the player based on what's equiped
void genProjectile( player *PL ) {
  if( getNewObj() == -1 ) return;
  switch((*PL).equip) {
    2b6a:	17 2d       	mov	r17, r7
    2b6c:	ae ce       	rjmp	.-676    	; 0x28ca <genProjectile+0x94a>
          objs[n].pos[3] = (*PL).pos[3];
          objs[n].next[0] = (*PL).aimX;
          objs[n].next[1] = 0;
        }
      }
      (*PL).cooldown = WAVE_COOL;
    2b6e:	80 e1       	ldi	r24, 0x10	; 16
    2b70:	f5 01       	movw	r30, r10
    2b72:	84 87       	std	Z+12, r24	; 0x0c
      return;
    2b74:	35 c6       	rjmp	.+3178   	; 0x37e0 <genProjectile+0x1860>
}

// Creates projectiles for the player based on what's equiped
void genProjectile( player *PL ) {
  if( getNewObj() == -1 ) return;
  switch((*PL).equip) {
    2b76:	10 e0       	ldi	r17, 0x00	; 0
      return;
    case 4: // Rocket uses 4/ 45 objs
      for(char x = 0; x < 4; ++x) {
        char n = getNewObj();
        if( n == -1 ) return;
        objs[n].exist = true;
    2b78:	c3 e8       	ldi	r28, 0x83	; 131
    2b7a:	d1 e0       	ldi	r29, 0x01	; 1
    2b7c:	ff 24       	eor	r15, r15
    2b7e:	f3 94       	inc	r15
        objs[n].collide = false;
        objs[n].who = (*PL).who;
        if(x == 0) objs[n].type = 2;
    2b80:	02 e0       	ldi	r16, 0x02	; 2
        else objs[n].type = 0;
        objs[n].jump = -1;
    2b82:	ee 24       	eor	r14, r14
    2b84:	ea 94       	dec	r14
        objs[n].period = ROCKET_PER;
        objs[n].elapsedTime = objs[n].period;
        objs[n].expire = ROCKET_RANGE;
    2b86:	0f 2e       	mov	r0, r31
    2b88:	f3 e1       	ldi	r31, 0x13	; 19
    2b8a:	df 2e       	mov	r13, r31
    2b8c:	f0 2d       	mov	r31, r0
      }
      (*PL).cooldown = WAVE_COOL;
      return;
    case 4: // Rocket uses 4/ 45 objs
      for(char x = 0; x < 4; ++x) {
        char n = getNewObj();
    2b8e:	0e 94 ab 04 	call	0x956	; 0x956 <getNewObj>
    2b92:	48 2f       	mov	r20, r24
        if( n == -1 ) return;
        objs[n].exist = true;
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	88 0f       	add	r24, r24
    2b98:	99 1f       	adc	r25, r25
    2b9a:	9c 01       	movw	r18, r24
    2b9c:	22 0f       	add	r18, r18
    2b9e:	33 1f       	adc	r19, r19
    2ba0:	22 0f       	add	r18, r18
    2ba2:	33 1f       	adc	r19, r19
    2ba4:	22 0f       	add	r18, r18
    2ba6:	33 1f       	adc	r19, r19
    2ba8:	28 1b       	sub	r18, r24
    2baa:	39 0b       	sbc	r19, r25
    2bac:	fe 01       	movw	r30, r28
    2bae:	e2 0f       	add	r30, r18
    2bb0:	f3 1f       	adc	r31, r19
    2bb2:	f0 82       	st	Z, r15
        objs[n].collide = false;
    2bb4:	84 2f       	mov	r24, r20
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	88 0f       	add	r24, r24
    2bba:	99 1f       	adc	r25, r25
    2bbc:	9c 01       	movw	r18, r24
    2bbe:	22 0f       	add	r18, r18
    2bc0:	33 1f       	adc	r19, r19
    2bc2:	22 0f       	add	r18, r18
    2bc4:	33 1f       	adc	r19, r19
    2bc6:	22 0f       	add	r18, r18
    2bc8:	33 1f       	adc	r19, r19
    2bca:	28 1b       	sub	r18, r24
    2bcc:	39 0b       	sbc	r19, r25
    2bce:	fe 01       	movw	r30, r28
    2bd0:	e2 0f       	add	r30, r18
    2bd2:	f3 1f       	adc	r31, r19
    2bd4:	11 82       	std	Z+1, r1	; 0x01
        objs[n].who = (*PL).who;
    2bd6:	d5 01       	movw	r26, r10
    2bd8:	5c 91       	ld	r21, X
    2bda:	84 2f       	mov	r24, r20
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	88 0f       	add	r24, r24
    2be0:	99 1f       	adc	r25, r25
    2be2:	9c 01       	movw	r18, r24
    2be4:	22 0f       	add	r18, r18
    2be6:	33 1f       	adc	r19, r19
    2be8:	22 0f       	add	r18, r18
    2bea:	33 1f       	adc	r19, r19
    2bec:	22 0f       	add	r18, r18
    2bee:	33 1f       	adc	r19, r19
    2bf0:	28 1b       	sub	r18, r24
    2bf2:	39 0b       	sbc	r19, r25
    2bf4:	fe 01       	movw	r30, r28
    2bf6:	e2 0f       	add	r30, r18
    2bf8:	f3 1f       	adc	r31, r19
    2bfa:	53 83       	std	Z+3, r21	; 0x03
        if(x == 0) objs[n].type = 2;
    2bfc:	11 23       	and	r17, r17
    2bfe:	91 f4       	brne	.+36     	; 0x2c24 <genProjectile+0xca4>
    2c00:	84 2f       	mov	r24, r20
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	88 0f       	add	r24, r24
    2c06:	99 1f       	adc	r25, r25
    2c08:	9c 01       	movw	r18, r24
    2c0a:	22 0f       	add	r18, r18
    2c0c:	33 1f       	adc	r19, r19
    2c0e:	22 0f       	add	r18, r18
    2c10:	33 1f       	adc	r19, r19
    2c12:	22 0f       	add	r18, r18
    2c14:	33 1f       	adc	r19, r19
    2c16:	28 1b       	sub	r18, r24
    2c18:	39 0b       	sbc	r19, r25
    2c1a:	fe 01       	movw	r30, r28
    2c1c:	e2 0f       	add	r30, r18
    2c1e:	f3 1f       	adc	r31, r19
    2c20:	02 83       	std	Z+2, r16	; 0x02
    2c22:	11 c0       	rjmp	.+34     	; 0x2c46 <genProjectile+0xcc6>
        else objs[n].type = 0;
    2c24:	84 2f       	mov	r24, r20
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	88 0f       	add	r24, r24
    2c2a:	99 1f       	adc	r25, r25
    2c2c:	9c 01       	movw	r18, r24
    2c2e:	22 0f       	add	r18, r18
    2c30:	33 1f       	adc	r19, r19
    2c32:	22 0f       	add	r18, r18
    2c34:	33 1f       	adc	r19, r19
    2c36:	22 0f       	add	r18, r18
    2c38:	33 1f       	adc	r19, r19
    2c3a:	28 1b       	sub	r18, r24
    2c3c:	39 0b       	sbc	r19, r25
    2c3e:	fe 01       	movw	r30, r28
    2c40:	e2 0f       	add	r30, r18
    2c42:	f3 1f       	adc	r31, r19
    2c44:	12 82       	std	Z+2, r1	; 0x02
        objs[n].jump = -1;
    2c46:	84 2f       	mov	r24, r20
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	88 0f       	add	r24, r24
    2c4c:	99 1f       	adc	r25, r25
    2c4e:	9c 01       	movw	r18, r24
    2c50:	22 0f       	add	r18, r18
    2c52:	33 1f       	adc	r19, r19
    2c54:	22 0f       	add	r18, r18
    2c56:	33 1f       	adc	r19, r19
    2c58:	22 0f       	add	r18, r18
    2c5a:	33 1f       	adc	r19, r19
    2c5c:	28 1b       	sub	r18, r24
    2c5e:	39 0b       	sbc	r19, r25
    2c60:	fe 01       	movw	r30, r28
    2c62:	e2 0f       	add	r30, r18
    2c64:	f3 1f       	adc	r31, r19
    2c66:	e2 86       	std	Z+10, r14	; 0x0a
        objs[n].period = ROCKET_PER;
    2c68:	84 2f       	mov	r24, r20
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	88 0f       	add	r24, r24
    2c6e:	99 1f       	adc	r25, r25
    2c70:	9c 01       	movw	r18, r24
    2c72:	22 0f       	add	r18, r18
    2c74:	33 1f       	adc	r19, r19
    2c76:	22 0f       	add	r18, r18
    2c78:	33 1f       	adc	r19, r19
    2c7a:	22 0f       	add	r18, r18
    2c7c:	33 1f       	adc	r19, r19
    2c7e:	28 1b       	sub	r18, r24
    2c80:	39 0b       	sbc	r19, r25
    2c82:	fe 01       	movw	r30, r28
    2c84:	e2 0f       	add	r30, r18
    2c86:	f3 1f       	adc	r31, r19
    2c88:	03 87       	std	Z+11, r16	; 0x0b
        objs[n].elapsedTime = objs[n].period;
    2c8a:	84 2f       	mov	r24, r20
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	88 0f       	add	r24, r24
    2c90:	99 1f       	adc	r25, r25
    2c92:	9c 01       	movw	r18, r24
    2c94:	22 0f       	add	r18, r18
    2c96:	33 1f       	adc	r19, r19
    2c98:	22 0f       	add	r18, r18
    2c9a:	33 1f       	adc	r19, r19
    2c9c:	22 0f       	add	r18, r18
    2c9e:	33 1f       	adc	r19, r19
    2ca0:	28 1b       	sub	r18, r24
    2ca2:	39 0b       	sbc	r19, r25
    2ca4:	fe 01       	movw	r30, r28
    2ca6:	e2 0f       	add	r30, r18
    2ca8:	f3 1f       	adc	r31, r19
    2caa:	04 87       	std	Z+12, r16	; 0x0c
        objs[n].expire = ROCKET_RANGE;
    2cac:	84 2f       	mov	r24, r20
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	88 0f       	add	r24, r24
    2cb2:	99 1f       	adc	r25, r25
    2cb4:	9c 01       	movw	r18, r24
    2cb6:	22 0f       	add	r18, r18
    2cb8:	33 1f       	adc	r19, r19
    2cba:	22 0f       	add	r18, r18
    2cbc:	33 1f       	adc	r19, r19
    2cbe:	22 0f       	add	r18, r18
    2cc0:	33 1f       	adc	r19, r19
    2cc2:	28 1b       	sub	r18, r24
    2cc4:	39 0b       	sbc	r19, r25
    2cc6:	fe 01       	movw	r30, r28
    2cc8:	e2 0f       	add	r30, r18
    2cca:	f3 1f       	adc	r31, r19
    2ccc:	d5 86       	std	Z+13, r13	; 0x0d
        objs[n].pos[0] = (*PL).pos[0];
    2cce:	f5 01       	movw	r30, r10
    2cd0:	54 81       	ldd	r21, Z+4	; 0x04
    2cd2:	84 2f       	mov	r24, r20
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	88 0f       	add	r24, r24
    2cd8:	99 1f       	adc	r25, r25
    2cda:	9c 01       	movw	r18, r24
    2cdc:	22 0f       	add	r18, r18
    2cde:	33 1f       	adc	r19, r19
    2ce0:	22 0f       	add	r18, r18
    2ce2:	33 1f       	adc	r19, r19
    2ce4:	22 0f       	add	r18, r18
    2ce6:	33 1f       	adc	r19, r19
    2ce8:	28 1b       	sub	r18, r24
    2cea:	39 0b       	sbc	r19, r25
    2cec:	fe 01       	movw	r30, r28
    2cee:	e2 0f       	add	r30, r18
    2cf0:	f3 1f       	adc	r31, r19
    2cf2:	54 83       	std	Z+4, r21	; 0x04
        objs[n].pos[1] = (*PL).pos[1] + x * (*PL).aimX;
    2cf4:	84 2f       	mov	r24, r20
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	88 0f       	add	r24, r24
    2cfa:	99 1f       	adc	r25, r25
    2cfc:	9c 01       	movw	r18, r24
    2cfe:	22 0f       	add	r18, r18
    2d00:	33 1f       	adc	r19, r19
    2d02:	22 0f       	add	r18, r18
    2d04:	33 1f       	adc	r19, r19
    2d06:	22 0f       	add	r18, r18
    2d08:	33 1f       	adc	r19, r19
    2d0a:	28 1b       	sub	r18, r24
    2d0c:	39 0b       	sbc	r19, r25
    2d0e:	fe 01       	movw	r30, r28
    2d10:	e2 0f       	add	r30, r18
    2d12:	f3 1f       	adc	r31, r19
    2d14:	d5 01       	movw	r26, r10
    2d16:	12 96       	adiw	r26, 0x02	; 2
    2d18:	8c 91       	ld	r24, X
    2d1a:	12 97       	sbiw	r26, 0x02	; 2
    2d1c:	18 9f       	mul	r17, r24
    2d1e:	80 2d       	mov	r24, r0
    2d20:	11 24       	eor	r1, r1
    2d22:	15 96       	adiw	r26, 0x05	; 5
    2d24:	9c 91       	ld	r25, X
    2d26:	15 97       	sbiw	r26, 0x05	; 5
    2d28:	89 0f       	add	r24, r25
    2d2a:	85 83       	std	Z+5, r24	; 0x05
        objs[n].pos[2] = (*PL).pos[2];
    2d2c:	16 96       	adiw	r26, 0x06	; 6
    2d2e:	5c 91       	ld	r21, X
    2d30:	16 97       	sbiw	r26, 0x06	; 6
    2d32:	84 2f       	mov	r24, r20
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	88 0f       	add	r24, r24
    2d38:	99 1f       	adc	r25, r25
    2d3a:	9c 01       	movw	r18, r24
    2d3c:	22 0f       	add	r18, r18
    2d3e:	33 1f       	adc	r19, r19
    2d40:	22 0f       	add	r18, r18
    2d42:	33 1f       	adc	r19, r19
    2d44:	22 0f       	add	r18, r18
    2d46:	33 1f       	adc	r19, r19
    2d48:	28 1b       	sub	r18, r24
    2d4a:	39 0b       	sbc	r19, r25
    2d4c:	fe 01       	movw	r30, r28
    2d4e:	e2 0f       	add	r30, r18
    2d50:	f3 1f       	adc	r31, r19
    2d52:	56 83       	std	Z+6, r21	; 0x06
        objs[n].pos[3] = (*PL).pos[3];
    2d54:	17 96       	adiw	r26, 0x07	; 7
    2d56:	5c 91       	ld	r21, X
    2d58:	17 97       	sbiw	r26, 0x07	; 7
    2d5a:	84 2f       	mov	r24, r20
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	88 0f       	add	r24, r24
    2d60:	99 1f       	adc	r25, r25
    2d62:	9c 01       	movw	r18, r24
    2d64:	22 0f       	add	r18, r18
    2d66:	33 1f       	adc	r19, r19
    2d68:	22 0f       	add	r18, r18
    2d6a:	33 1f       	adc	r19, r19
    2d6c:	22 0f       	add	r18, r18
    2d6e:	33 1f       	adc	r19, r19
    2d70:	28 1b       	sub	r18, r24
    2d72:	39 0b       	sbc	r19, r25
    2d74:	fe 01       	movw	r30, r28
    2d76:	e2 0f       	add	r30, r18
    2d78:	f3 1f       	adc	r31, r19
    2d7a:	57 83       	std	Z+7, r21	; 0x07
        objs[n].next[0] = (*PL).aimX;
    2d7c:	84 2f       	mov	r24, r20
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	88 0f       	add	r24, r24
    2d82:	99 1f       	adc	r25, r25
    2d84:	9c 01       	movw	r18, r24
    2d86:	22 0f       	add	r18, r18
    2d88:	33 1f       	adc	r19, r19
    2d8a:	22 0f       	add	r18, r18
    2d8c:	33 1f       	adc	r19, r19
    2d8e:	22 0f       	add	r18, r18
    2d90:	33 1f       	adc	r19, r19
    2d92:	28 1b       	sub	r18, r24
    2d94:	39 0b       	sbc	r19, r25
    2d96:	fe 01       	movw	r30, r28
    2d98:	e2 0f       	add	r30, r18
    2d9a:	f3 1f       	adc	r31, r19
    2d9c:	12 96       	adiw	r26, 0x02	; 2
    2d9e:	8c 91       	ld	r24, X
    2da0:	12 97       	sbiw	r26, 0x02	; 2
    2da2:	80 87       	std	Z+8, r24	; 0x08
        objs[n].next[1] = 0;
    2da4:	84 2f       	mov	r24, r20
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	88 0f       	add	r24, r24
    2daa:	99 1f       	adc	r25, r25
    2dac:	9c 01       	movw	r18, r24
    2dae:	22 0f       	add	r18, r18
    2db0:	33 1f       	adc	r19, r19
    2db2:	22 0f       	add	r18, r18
    2db4:	33 1f       	adc	r19, r19
    2db6:	22 0f       	add	r18, r18
    2db8:	33 1f       	adc	r19, r19
    2dba:	28 1b       	sub	r18, r24
    2dbc:	39 0b       	sbc	r19, r25
    2dbe:	fe 01       	movw	r30, r28
    2dc0:	e2 0f       	add	r30, r18
    2dc2:	f3 1f       	adc	r31, r19
    2dc4:	11 86       	std	Z+9, r1	; 0x09
        }
      }
      (*PL).cooldown = WAVE_COOL;
      return;
    case 4: // Rocket uses 4/ 45 objs
      for(char x = 0; x < 4; ++x) {
    2dc6:	1f 5f       	subi	r17, 0xFF	; 255
    2dc8:	14 30       	cpi	r17, 0x04	; 4
    2dca:	09 f0       	breq	.+2      	; 0x2dce <genProjectile+0xe4e>
    2dcc:	e0 ce       	rjmp	.-576    	; 0x2b8e <genProjectile+0xc0e>
        objs[n].pos[2] = (*PL).pos[2];
        objs[n].pos[3] = (*PL).pos[3];
        objs[n].next[0] = (*PL).aimX;
        objs[n].next[1] = 0;
      }
      (*PL).cooldown = ROCKET_COOL;        
    2dce:	88 e2       	ldi	r24, 0x28	; 40
    2dd0:	1c 96       	adiw	r26, 0x0c	; 12
    2dd2:	8c 93       	st	X, r24
    2dd4:	1c 97       	sbiw	r26, 0x0c	; 12
      return;
    2dd6:	04 c5       	rjmp	.+2568   	; 0x37e0 <genProjectile+0x1860>
    case 5: // MGUN, uses 1 objects
    {
      char n;
      if((n = getNewObj()) == -1 ) return;
    2dd8:	0e 94 ab 04 	call	0x956	; 0x956 <getNewObj>
    2ddc:	58 2f       	mov	r21, r24
      objs[n].exist = true;
    2dde:	63 e8       	ldi	r22, 0x83	; 131
    2de0:	71 e0       	ldi	r23, 0x01	; 1
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	88 0f       	add	r24, r24
    2de6:	99 1f       	adc	r25, r25
    2de8:	9c 01       	movw	r18, r24
    2dea:	22 0f       	add	r18, r18
    2dec:	33 1f       	adc	r19, r19
    2dee:	22 0f       	add	r18, r18
    2df0:	33 1f       	adc	r19, r19
    2df2:	22 0f       	add	r18, r18
    2df4:	33 1f       	adc	r19, r19
    2df6:	28 1b       	sub	r18, r24
    2df8:	39 0b       	sbc	r19, r25
    2dfa:	fb 01       	movw	r30, r22
    2dfc:	e2 0f       	add	r30, r18
    2dfe:	f3 1f       	adc	r31, r19
    2e00:	a1 e0       	ldi	r26, 0x01	; 1
    2e02:	a0 83       	st	Z, r26
      objs[n].collide = false;
    2e04:	85 2f       	mov	r24, r21
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	88 0f       	add	r24, r24
    2e0a:	99 1f       	adc	r25, r25
    2e0c:	9c 01       	movw	r18, r24
    2e0e:	22 0f       	add	r18, r18
    2e10:	33 1f       	adc	r19, r19
    2e12:	22 0f       	add	r18, r18
    2e14:	33 1f       	adc	r19, r19
    2e16:	22 0f       	add	r18, r18
    2e18:	33 1f       	adc	r19, r19
    2e1a:	28 1b       	sub	r18, r24
    2e1c:	39 0b       	sbc	r19, r25
    2e1e:	fb 01       	movw	r30, r22
    2e20:	e2 0f       	add	r30, r18
    2e22:	f3 1f       	adc	r31, r19
    2e24:	11 82       	std	Z+1, r1	; 0x01
      objs[n].who = (*PL).who;
    2e26:	f5 01       	movw	r30, r10
    2e28:	40 81       	ld	r20, Z
    2e2a:	85 2f       	mov	r24, r21
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	88 0f       	add	r24, r24
    2e30:	99 1f       	adc	r25, r25
    2e32:	9c 01       	movw	r18, r24
    2e34:	22 0f       	add	r18, r18
    2e36:	33 1f       	adc	r19, r19
    2e38:	22 0f       	add	r18, r18
    2e3a:	33 1f       	adc	r19, r19
    2e3c:	22 0f       	add	r18, r18
    2e3e:	33 1f       	adc	r19, r19
    2e40:	28 1b       	sub	r18, r24
    2e42:	39 0b       	sbc	r19, r25
    2e44:	fb 01       	movw	r30, r22
    2e46:	e2 0f       	add	r30, r18
    2e48:	f3 1f       	adc	r31, r19
    2e4a:	43 83       	std	Z+3, r20	; 0x03
      objs[n].type = 1;
    2e4c:	85 2f       	mov	r24, r21
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	88 0f       	add	r24, r24
    2e52:	99 1f       	adc	r25, r25
    2e54:	9c 01       	movw	r18, r24
    2e56:	22 0f       	add	r18, r18
    2e58:	33 1f       	adc	r19, r19
    2e5a:	22 0f       	add	r18, r18
    2e5c:	33 1f       	adc	r19, r19
    2e5e:	22 0f       	add	r18, r18
    2e60:	33 1f       	adc	r19, r19
    2e62:	28 1b       	sub	r18, r24
    2e64:	39 0b       	sbc	r19, r25
    2e66:	fb 01       	movw	r30, r22
    2e68:	e2 0f       	add	r30, r18
    2e6a:	f3 1f       	adc	r31, r19
    2e6c:	a2 83       	std	Z+2, r26	; 0x02
      objs[n].jump = -1;
    2e6e:	85 2f       	mov	r24, r21
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	88 0f       	add	r24, r24
    2e74:	99 1f       	adc	r25, r25
    2e76:	9c 01       	movw	r18, r24
    2e78:	22 0f       	add	r18, r18
    2e7a:	33 1f       	adc	r19, r19
    2e7c:	22 0f       	add	r18, r18
    2e7e:	33 1f       	adc	r19, r19
    2e80:	22 0f       	add	r18, r18
    2e82:	33 1f       	adc	r19, r19
    2e84:	28 1b       	sub	r18, r24
    2e86:	39 0b       	sbc	r19, r25
    2e88:	fb 01       	movw	r30, r22
    2e8a:	e2 0f       	add	r30, r18
    2e8c:	f3 1f       	adc	r31, r19
    2e8e:	8f ef       	ldi	r24, 0xFF	; 255
    2e90:	82 87       	std	Z+10, r24	; 0x0a
      objs[n].period = MGUN_PER;
    2e92:	85 2f       	mov	r24, r21
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	88 0f       	add	r24, r24
    2e98:	99 1f       	adc	r25, r25
    2e9a:	9c 01       	movw	r18, r24
    2e9c:	22 0f       	add	r18, r18
    2e9e:	33 1f       	adc	r19, r19
    2ea0:	22 0f       	add	r18, r18
    2ea2:	33 1f       	adc	r19, r19
    2ea4:	22 0f       	add	r18, r18
    2ea6:	33 1f       	adc	r19, r19
    2ea8:	28 1b       	sub	r18, r24
    2eaa:	39 0b       	sbc	r19, r25
    2eac:	fb 01       	movw	r30, r22
    2eae:	e2 0f       	add	r30, r18
    2eb0:	f3 1f       	adc	r31, r19
    2eb2:	42 e0       	ldi	r20, 0x02	; 2
    2eb4:	43 87       	std	Z+11, r20	; 0x0b
      objs[n].elapsedTime = objs[n].period;
    2eb6:	85 2f       	mov	r24, r21
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	88 0f       	add	r24, r24
    2ebc:	99 1f       	adc	r25, r25
    2ebe:	9c 01       	movw	r18, r24
    2ec0:	22 0f       	add	r18, r18
    2ec2:	33 1f       	adc	r19, r19
    2ec4:	22 0f       	add	r18, r18
    2ec6:	33 1f       	adc	r19, r19
    2ec8:	22 0f       	add	r18, r18
    2eca:	33 1f       	adc	r19, r19
    2ecc:	28 1b       	sub	r18, r24
    2ece:	39 0b       	sbc	r19, r25
    2ed0:	fb 01       	movw	r30, r22
    2ed2:	e2 0f       	add	r30, r18
    2ed4:	f3 1f       	adc	r31, r19
    2ed6:	44 87       	std	Z+12, r20	; 0x0c
      objs[n].expire = MGUN_RANGE;
    2ed8:	85 2f       	mov	r24, r21
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	88 0f       	add	r24, r24
    2ede:	99 1f       	adc	r25, r25
    2ee0:	9c 01       	movw	r18, r24
    2ee2:	22 0f       	add	r18, r18
    2ee4:	33 1f       	adc	r19, r19
    2ee6:	22 0f       	add	r18, r18
    2ee8:	33 1f       	adc	r19, r19
    2eea:	22 0f       	add	r18, r18
    2eec:	33 1f       	adc	r19, r19
    2eee:	28 1b       	sub	r18, r24
    2ef0:	39 0b       	sbc	r19, r25
    2ef2:	fb 01       	movw	r30, r22
    2ef4:	e2 0f       	add	r30, r18
    2ef6:	f3 1f       	adc	r31, r19
    2ef8:	8f e0       	ldi	r24, 0x0F	; 15
    2efa:	85 87       	std	Z+13, r24	; 0x0d
      objs[n].pos[0] = (*PL).pos[0];
    2efc:	d5 01       	movw	r26, r10
    2efe:	14 96       	adiw	r26, 0x04	; 4
    2f00:	4c 91       	ld	r20, X
    2f02:	14 97       	sbiw	r26, 0x04	; 4
    2f04:	85 2f       	mov	r24, r21
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	88 0f       	add	r24, r24
    2f0a:	99 1f       	adc	r25, r25
    2f0c:	9c 01       	movw	r18, r24
    2f0e:	22 0f       	add	r18, r18
    2f10:	33 1f       	adc	r19, r19
    2f12:	22 0f       	add	r18, r18
    2f14:	33 1f       	adc	r19, r19
    2f16:	22 0f       	add	r18, r18
    2f18:	33 1f       	adc	r19, r19
    2f1a:	28 1b       	sub	r18, r24
    2f1c:	39 0b       	sbc	r19, r25
    2f1e:	fb 01       	movw	r30, r22
    2f20:	e2 0f       	add	r30, r18
    2f22:	f3 1f       	adc	r31, r19
    2f24:	44 83       	std	Z+4, r20	; 0x04
      objs[n].pos[1] = (*PL).pos[1] + (*PL).aimX;
    2f26:	85 2f       	mov	r24, r21
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	88 0f       	add	r24, r24
    2f2c:	99 1f       	adc	r25, r25
    2f2e:	9c 01       	movw	r18, r24
    2f30:	22 0f       	add	r18, r18
    2f32:	33 1f       	adc	r19, r19
    2f34:	22 0f       	add	r18, r18
    2f36:	33 1f       	adc	r19, r19
    2f38:	22 0f       	add	r18, r18
    2f3a:	33 1f       	adc	r19, r19
    2f3c:	28 1b       	sub	r18, r24
    2f3e:	39 0b       	sbc	r19, r25
    2f40:	fb 01       	movw	r30, r22
    2f42:	e2 0f       	add	r30, r18
    2f44:	f3 1f       	adc	r31, r19
    2f46:	15 96       	adiw	r26, 0x05	; 5
    2f48:	9c 91       	ld	r25, X
    2f4a:	15 97       	sbiw	r26, 0x05	; 5
    2f4c:	12 96       	adiw	r26, 0x02	; 2
    2f4e:	8c 91       	ld	r24, X
    2f50:	12 97       	sbiw	r26, 0x02	; 2
    2f52:	89 0f       	add	r24, r25
    2f54:	85 83       	std	Z+5, r24	; 0x05
      objs[n].pos[2] = (*PL).pos[2];
    2f56:	16 96       	adiw	r26, 0x06	; 6
    2f58:	4c 91       	ld	r20, X
    2f5a:	16 97       	sbiw	r26, 0x06	; 6
    2f5c:	85 2f       	mov	r24, r21
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	88 0f       	add	r24, r24
    2f62:	99 1f       	adc	r25, r25
    2f64:	9c 01       	movw	r18, r24
    2f66:	22 0f       	add	r18, r18
    2f68:	33 1f       	adc	r19, r19
    2f6a:	22 0f       	add	r18, r18
    2f6c:	33 1f       	adc	r19, r19
    2f6e:	22 0f       	add	r18, r18
    2f70:	33 1f       	adc	r19, r19
    2f72:	28 1b       	sub	r18, r24
    2f74:	39 0b       	sbc	r19, r25
    2f76:	fb 01       	movw	r30, r22
    2f78:	e2 0f       	add	r30, r18
    2f7a:	f3 1f       	adc	r31, r19
    2f7c:	46 83       	std	Z+6, r20	; 0x06
      objs[n].pos[3] = (*PL).pos[3];
    2f7e:	17 96       	adiw	r26, 0x07	; 7
    2f80:	4c 91       	ld	r20, X
    2f82:	17 97       	sbiw	r26, 0x07	; 7
    2f84:	85 2f       	mov	r24, r21
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	88 0f       	add	r24, r24
    2f8a:	99 1f       	adc	r25, r25
    2f8c:	9c 01       	movw	r18, r24
    2f8e:	22 0f       	add	r18, r18
    2f90:	33 1f       	adc	r19, r19
    2f92:	22 0f       	add	r18, r18
    2f94:	33 1f       	adc	r19, r19
    2f96:	22 0f       	add	r18, r18
    2f98:	33 1f       	adc	r19, r19
    2f9a:	28 1b       	sub	r18, r24
    2f9c:	39 0b       	sbc	r19, r25
    2f9e:	fb 01       	movw	r30, r22
    2fa0:	e2 0f       	add	r30, r18
    2fa2:	f3 1f       	adc	r31, r19
    2fa4:	47 83       	std	Z+7, r20	; 0x07
      objs[n].next[0] = (*PL).aimX;
    2fa6:	85 2f       	mov	r24, r21
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	88 0f       	add	r24, r24
    2fac:	99 1f       	adc	r25, r25
    2fae:	9c 01       	movw	r18, r24
    2fb0:	22 0f       	add	r18, r18
    2fb2:	33 1f       	adc	r19, r19
    2fb4:	22 0f       	add	r18, r18
    2fb6:	33 1f       	adc	r19, r19
    2fb8:	22 0f       	add	r18, r18
    2fba:	33 1f       	adc	r19, r19
    2fbc:	28 1b       	sub	r18, r24
    2fbe:	39 0b       	sbc	r19, r25
    2fc0:	fb 01       	movw	r30, r22
    2fc2:	e2 0f       	add	r30, r18
    2fc4:	f3 1f       	adc	r31, r19
    2fc6:	12 96       	adiw	r26, 0x02	; 2
    2fc8:	8c 91       	ld	r24, X
    2fca:	12 97       	sbiw	r26, 0x02	; 2
    2fcc:	80 87       	std	Z+8, r24	; 0x08
      objs[n].next[1] = 0;
    2fce:	85 2f       	mov	r24, r21
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	88 0f       	add	r24, r24
    2fd4:	99 1f       	adc	r25, r25
    2fd6:	9c 01       	movw	r18, r24
    2fd8:	22 0f       	add	r18, r18
    2fda:	33 1f       	adc	r19, r19
    2fdc:	22 0f       	add	r18, r18
    2fde:	33 1f       	adc	r19, r19
    2fe0:	22 0f       	add	r18, r18
    2fe2:	33 1f       	adc	r19, r19
    2fe4:	28 1b       	sub	r18, r24
    2fe6:	39 0b       	sbc	r19, r25
    2fe8:	62 0f       	add	r22, r18
    2fea:	73 1f       	adc	r23, r19
    2fec:	fb 01       	movw	r30, r22
    2fee:	11 86       	std	Z+9, r1	; 0x09
      (*PL).cooldown = MGUN_COOL;
    2ff0:	84 e0       	ldi	r24, 0x04	; 4
    2ff2:	1c 96       	adiw	r26, 0x0c	; 12
    2ff4:	8c 93       	st	X, r24
    2ff6:	1c 97       	sbiw	r26, 0x0c	; 12
    }   
      return;
    2ff8:	f3 c3       	rjmp	.+2022   	; 0x37e0 <genProjectile+0x1860>
    case 6: // CLUSTER GRENADE
      {
        char n;
        if((n = getNewObj()) == -1 ) return;
    2ffa:	0e 94 ab 04 	call	0x956	; 0x956 <getNewObj>
    2ffe:	58 2f       	mov	r21, r24
        objs[n].exist = true;
    3000:	63 e8       	ldi	r22, 0x83	; 131
    3002:	71 e0       	ldi	r23, 0x01	; 1
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	88 0f       	add	r24, r24
    3008:	99 1f       	adc	r25, r25
    300a:	9c 01       	movw	r18, r24
    300c:	22 0f       	add	r18, r18
    300e:	33 1f       	adc	r19, r19
    3010:	22 0f       	add	r18, r18
    3012:	33 1f       	adc	r19, r19
    3014:	22 0f       	add	r18, r18
    3016:	33 1f       	adc	r19, r19
    3018:	28 1b       	sub	r18, r24
    301a:	39 0b       	sbc	r19, r25
    301c:	fb 01       	movw	r30, r22
    301e:	e2 0f       	add	r30, r18
    3020:	f3 1f       	adc	r31, r19
    3022:	81 e0       	ldi	r24, 0x01	; 1
    3024:	80 83       	st	Z, r24
        objs[n].collide = false;
    3026:	85 2f       	mov	r24, r21
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	88 0f       	add	r24, r24
    302c:	99 1f       	adc	r25, r25
    302e:	9c 01       	movw	r18, r24
    3030:	22 0f       	add	r18, r18
    3032:	33 1f       	adc	r19, r19
    3034:	22 0f       	add	r18, r18
    3036:	33 1f       	adc	r19, r19
    3038:	22 0f       	add	r18, r18
    303a:	33 1f       	adc	r19, r19
    303c:	28 1b       	sub	r18, r24
    303e:	39 0b       	sbc	r19, r25
    3040:	fb 01       	movw	r30, r22
    3042:	e2 0f       	add	r30, r18
    3044:	f3 1f       	adc	r31, r19
    3046:	11 82       	std	Z+1, r1	; 0x01
        objs[n].who = 0;
    3048:	85 2f       	mov	r24, r21
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	88 0f       	add	r24, r24
    304e:	99 1f       	adc	r25, r25
    3050:	9c 01       	movw	r18, r24
    3052:	22 0f       	add	r18, r18
    3054:	33 1f       	adc	r19, r19
    3056:	22 0f       	add	r18, r18
    3058:	33 1f       	adc	r19, r19
    305a:	22 0f       	add	r18, r18
    305c:	33 1f       	adc	r19, r19
    305e:	28 1b       	sub	r18, r24
    3060:	39 0b       	sbc	r19, r25
    3062:	fb 01       	movw	r30, r22
    3064:	e2 0f       	add	r30, r18
    3066:	f3 1f       	adc	r31, r19
    3068:	13 82       	std	Z+3, r1	; 0x03
        objs[n].type = 3;
    306a:	85 2f       	mov	r24, r21
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	88 0f       	add	r24, r24
    3070:	99 1f       	adc	r25, r25
    3072:	9c 01       	movw	r18, r24
    3074:	22 0f       	add	r18, r18
    3076:	33 1f       	adc	r19, r19
    3078:	22 0f       	add	r18, r18
    307a:	33 1f       	adc	r19, r19
    307c:	22 0f       	add	r18, r18
    307e:	33 1f       	adc	r19, r19
    3080:	28 1b       	sub	r18, r24
    3082:	39 0b       	sbc	r19, r25
    3084:	fb 01       	movw	r30, r22
    3086:	e2 0f       	add	r30, r18
    3088:	f3 1f       	adc	r31, r19
    308a:	83 e0       	ldi	r24, 0x03	; 3
    308c:	82 83       	std	Z+2, r24	; 0x02
        objs[n].jump = 5;
    308e:	85 2f       	mov	r24, r21
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	88 0f       	add	r24, r24
    3094:	99 1f       	adc	r25, r25
    3096:	9c 01       	movw	r18, r24
    3098:	22 0f       	add	r18, r18
    309a:	33 1f       	adc	r19, r19
    309c:	22 0f       	add	r18, r18
    309e:	33 1f       	adc	r19, r19
    30a0:	22 0f       	add	r18, r18
    30a2:	33 1f       	adc	r19, r19
    30a4:	28 1b       	sub	r18, r24
    30a6:	39 0b       	sbc	r19, r25
    30a8:	fb 01       	movw	r30, r22
    30aa:	e2 0f       	add	r30, r18
    30ac:	f3 1f       	adc	r31, r19
    30ae:	85 e0       	ldi	r24, 0x05	; 5
    30b0:	82 87       	std	Z+10, r24	; 0x0a
        objs[n].period = CLUSTER_PER;
    30b2:	85 2f       	mov	r24, r21
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	88 0f       	add	r24, r24
    30b8:	99 1f       	adc	r25, r25
    30ba:	9c 01       	movw	r18, r24
    30bc:	22 0f       	add	r18, r18
    30be:	33 1f       	adc	r19, r19
    30c0:	22 0f       	add	r18, r18
    30c2:	33 1f       	adc	r19, r19
    30c4:	22 0f       	add	r18, r18
    30c6:	33 1f       	adc	r19, r19
    30c8:	28 1b       	sub	r18, r24
    30ca:	39 0b       	sbc	r19, r25
    30cc:	fb 01       	movw	r30, r22
    30ce:	e2 0f       	add	r30, r18
    30d0:	f3 1f       	adc	r31, r19
    30d2:	4b e0       	ldi	r20, 0x0B	; 11
    30d4:	43 87       	std	Z+11, r20	; 0x0b
        objs[n].elapsedTime = objs[n].period;
    30d6:	85 2f       	mov	r24, r21
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	88 0f       	add	r24, r24
    30dc:	99 1f       	adc	r25, r25
    30de:	9c 01       	movw	r18, r24
    30e0:	22 0f       	add	r18, r18
    30e2:	33 1f       	adc	r19, r19
    30e4:	22 0f       	add	r18, r18
    30e6:	33 1f       	adc	r19, r19
    30e8:	22 0f       	add	r18, r18
    30ea:	33 1f       	adc	r19, r19
    30ec:	28 1b       	sub	r18, r24
    30ee:	39 0b       	sbc	r19, r25
    30f0:	fb 01       	movw	r30, r22
    30f2:	e2 0f       	add	r30, r18
    30f4:	f3 1f       	adc	r31, r19
    30f6:	44 87       	std	Z+12, r20	; 0x0c
        objs[n].expire = CLUSTER_RANGE;
    30f8:	85 2f       	mov	r24, r21
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	88 0f       	add	r24, r24
    30fe:	99 1f       	adc	r25, r25
    3100:	9c 01       	movw	r18, r24
    3102:	22 0f       	add	r18, r18
    3104:	33 1f       	adc	r19, r19
    3106:	22 0f       	add	r18, r18
    3108:	33 1f       	adc	r19, r19
    310a:	22 0f       	add	r18, r18
    310c:	33 1f       	adc	r19, r19
    310e:	28 1b       	sub	r18, r24
    3110:	39 0b       	sbc	r19, r25
    3112:	fb 01       	movw	r30, r22
    3114:	e2 0f       	add	r30, r18
    3116:	f3 1f       	adc	r31, r19
    3118:	8e e0       	ldi	r24, 0x0E	; 14
    311a:	85 87       	std	Z+13, r24	; 0x0d
        objs[n].pos[0] = (*PL).pos[0];
    311c:	d5 01       	movw	r26, r10
    311e:	14 96       	adiw	r26, 0x04	; 4
    3120:	4c 91       	ld	r20, X
    3122:	14 97       	sbiw	r26, 0x04	; 4
    3124:	85 2f       	mov	r24, r21
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	88 0f       	add	r24, r24
    312a:	99 1f       	adc	r25, r25
    312c:	9c 01       	movw	r18, r24
    312e:	22 0f       	add	r18, r18
    3130:	33 1f       	adc	r19, r19
    3132:	22 0f       	add	r18, r18
    3134:	33 1f       	adc	r19, r19
    3136:	22 0f       	add	r18, r18
    3138:	33 1f       	adc	r19, r19
    313a:	28 1b       	sub	r18, r24
    313c:	39 0b       	sbc	r19, r25
    313e:	fb 01       	movw	r30, r22
    3140:	e2 0f       	add	r30, r18
    3142:	f3 1f       	adc	r31, r19
    3144:	44 83       	std	Z+4, r20	; 0x04
        objs[n].pos[1] = (*PL).pos[1];
    3146:	15 96       	adiw	r26, 0x05	; 5
    3148:	4c 91       	ld	r20, X
    314a:	15 97       	sbiw	r26, 0x05	; 5
    314c:	85 2f       	mov	r24, r21
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	88 0f       	add	r24, r24
    3152:	99 1f       	adc	r25, r25
    3154:	9c 01       	movw	r18, r24
    3156:	22 0f       	add	r18, r18
    3158:	33 1f       	adc	r19, r19
    315a:	22 0f       	add	r18, r18
    315c:	33 1f       	adc	r19, r19
    315e:	22 0f       	add	r18, r18
    3160:	33 1f       	adc	r19, r19
    3162:	28 1b       	sub	r18, r24
    3164:	39 0b       	sbc	r19, r25
    3166:	fb 01       	movw	r30, r22
    3168:	e2 0f       	add	r30, r18
    316a:	f3 1f       	adc	r31, r19
    316c:	45 83       	std	Z+5, r20	; 0x05
        objs[n].pos[2] = (*PL).pos[2];
    316e:	16 96       	adiw	r26, 0x06	; 6
    3170:	4c 91       	ld	r20, X
    3172:	16 97       	sbiw	r26, 0x06	; 6
    3174:	85 2f       	mov	r24, r21
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	88 0f       	add	r24, r24
    317a:	99 1f       	adc	r25, r25
    317c:	9c 01       	movw	r18, r24
    317e:	22 0f       	add	r18, r18
    3180:	33 1f       	adc	r19, r19
    3182:	22 0f       	add	r18, r18
    3184:	33 1f       	adc	r19, r19
    3186:	22 0f       	add	r18, r18
    3188:	33 1f       	adc	r19, r19
    318a:	28 1b       	sub	r18, r24
    318c:	39 0b       	sbc	r19, r25
    318e:	fb 01       	movw	r30, r22
    3190:	e2 0f       	add	r30, r18
    3192:	f3 1f       	adc	r31, r19
    3194:	46 83       	std	Z+6, r20	; 0x06
        objs[n].pos[3] = (*PL).pos[3];
    3196:	17 96       	adiw	r26, 0x07	; 7
    3198:	4c 91       	ld	r20, X
    319a:	17 97       	sbiw	r26, 0x07	; 7
    319c:	85 2f       	mov	r24, r21
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	88 0f       	add	r24, r24
    31a2:	99 1f       	adc	r25, r25
    31a4:	9c 01       	movw	r18, r24
    31a6:	22 0f       	add	r18, r18
    31a8:	33 1f       	adc	r19, r19
    31aa:	22 0f       	add	r18, r18
    31ac:	33 1f       	adc	r19, r19
    31ae:	22 0f       	add	r18, r18
    31b0:	33 1f       	adc	r19, r19
    31b2:	28 1b       	sub	r18, r24
    31b4:	39 0b       	sbc	r19, r25
    31b6:	fb 01       	movw	r30, r22
    31b8:	e2 0f       	add	r30, r18
    31ba:	f3 1f       	adc	r31, r19
    31bc:	47 83       	std	Z+7, r20	; 0x07
        objs[n].next[0] = (*PL).aimX;
    31be:	85 2f       	mov	r24, r21
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	88 0f       	add	r24, r24
    31c4:	99 1f       	adc	r25, r25
    31c6:	9c 01       	movw	r18, r24
    31c8:	22 0f       	add	r18, r18
    31ca:	33 1f       	adc	r19, r19
    31cc:	22 0f       	add	r18, r18
    31ce:	33 1f       	adc	r19, r19
    31d0:	22 0f       	add	r18, r18
    31d2:	33 1f       	adc	r19, r19
    31d4:	28 1b       	sub	r18, r24
    31d6:	39 0b       	sbc	r19, r25
    31d8:	fb 01       	movw	r30, r22
    31da:	e2 0f       	add	r30, r18
    31dc:	f3 1f       	adc	r31, r19
    31de:	12 96       	adiw	r26, 0x02	; 2
    31e0:	8c 91       	ld	r24, X
    31e2:	12 97       	sbiw	r26, 0x02	; 2
    31e4:	80 87       	std	Z+8, r24	; 0x08
        objs[n].next[1] = 0;
    31e6:	85 2f       	mov	r24, r21
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	88 0f       	add	r24, r24
    31ec:	99 1f       	adc	r25, r25
    31ee:	9c 01       	movw	r18, r24
    31f0:	22 0f       	add	r18, r18
    31f2:	33 1f       	adc	r19, r19
    31f4:	22 0f       	add	r18, r18
    31f6:	33 1f       	adc	r19, r19
    31f8:	22 0f       	add	r18, r18
    31fa:	33 1f       	adc	r19, r19
    31fc:	28 1b       	sub	r18, r24
    31fe:	39 0b       	sbc	r19, r25
    3200:	62 0f       	add	r22, r18
    3202:	73 1f       	adc	r23, r19
    3204:	fb 01       	movw	r30, r22
    3206:	11 86       	std	Z+9, r1	; 0x09
        (*PL).cooldown = CLUSTER_COOL;
    3208:	8a e0       	ldi	r24, 0x0A	; 10
    320a:	1c 96       	adiw	r26, 0x0c	; 12
    320c:	8c 93       	st	X, r24
    320e:	1c 97       	sbiw	r26, 0x0c	; 12
      }
      return;
    3210:	e7 c2       	rjmp	.+1486   	; 0x37e0 <genProjectile+0x1860>
}

// Creates projectiles for the player based on what's equiped
void genProjectile( player *PL ) {
  if( getNewObj() == -1 ) return;
  switch((*PL).equip) {
    3212:	1b ef       	ldi	r17, 0xFB	; 251
    case 7: // HEAL
      {
        for(signed char x = -5; x < 6; ++x) {
          char n = getNewObj();
          if( n == -1 ) return;
          objs[n].exist = true;
    3214:	c3 e8       	ldi	r28, 0x83	; 131
    3216:	d1 e0       	ldi	r29, 0x01	; 1
    3218:	ff 24       	eor	r15, r15
    321a:	f3 94       	inc	r15
          objs[n].collide = false;
          objs[n].who = (*PL).who;
          objs[n].type = 0;
          objs[n].jump = -1;
    321c:	ee 24       	eor	r14, r14
    321e:	ea 94       	dec	r14
          objs[n].period = 4;
    3220:	04 e0       	ldi	r16, 0x04	; 4
          objs[n].elapsedTime = objs[n].period;
          objs[n].expire = 5;
    3222:	0f 2e       	mov	r0, r31
    3224:	f5 e0       	ldi	r31, 0x05	; 5
    3226:	df 2e       	mov	r13, r31
    3228:	f0 2d       	mov	r31, r0
      }
      return;
    case 7: // HEAL
      {
        for(signed char x = -5; x < 6; ++x) {
          char n = getNewObj();
    322a:	0e 94 ab 04 	call	0x956	; 0x956 <getNewObj>
    322e:	48 2f       	mov	r20, r24
          if( n == -1 ) return;
          objs[n].exist = true;
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	88 0f       	add	r24, r24
    3234:	99 1f       	adc	r25, r25
    3236:	9c 01       	movw	r18, r24
    3238:	22 0f       	add	r18, r18
    323a:	33 1f       	adc	r19, r19
    323c:	22 0f       	add	r18, r18
    323e:	33 1f       	adc	r19, r19
    3240:	22 0f       	add	r18, r18
    3242:	33 1f       	adc	r19, r19
    3244:	28 1b       	sub	r18, r24
    3246:	39 0b       	sbc	r19, r25
    3248:	fe 01       	movw	r30, r28
    324a:	e2 0f       	add	r30, r18
    324c:	f3 1f       	adc	r31, r19
    324e:	f0 82       	st	Z, r15
          objs[n].collide = false;
    3250:	84 2f       	mov	r24, r20
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	88 0f       	add	r24, r24
    3256:	99 1f       	adc	r25, r25
    3258:	9c 01       	movw	r18, r24
    325a:	22 0f       	add	r18, r18
    325c:	33 1f       	adc	r19, r19
    325e:	22 0f       	add	r18, r18
    3260:	33 1f       	adc	r19, r19
    3262:	22 0f       	add	r18, r18
    3264:	33 1f       	adc	r19, r19
    3266:	28 1b       	sub	r18, r24
    3268:	39 0b       	sbc	r19, r25
    326a:	fe 01       	movw	r30, r28
    326c:	e2 0f       	add	r30, r18
    326e:	f3 1f       	adc	r31, r19
    3270:	11 82       	std	Z+1, r1	; 0x01
          objs[n].who = (*PL).who;
    3272:	d5 01       	movw	r26, r10
    3274:	5c 91       	ld	r21, X
    3276:	84 2f       	mov	r24, r20
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	88 0f       	add	r24, r24
    327c:	99 1f       	adc	r25, r25
    327e:	9c 01       	movw	r18, r24
    3280:	22 0f       	add	r18, r18
    3282:	33 1f       	adc	r19, r19
    3284:	22 0f       	add	r18, r18
    3286:	33 1f       	adc	r19, r19
    3288:	22 0f       	add	r18, r18
    328a:	33 1f       	adc	r19, r19
    328c:	28 1b       	sub	r18, r24
    328e:	39 0b       	sbc	r19, r25
    3290:	fe 01       	movw	r30, r28
    3292:	e2 0f       	add	r30, r18
    3294:	f3 1f       	adc	r31, r19
    3296:	53 83       	std	Z+3, r21	; 0x03
          objs[n].type = 0;
    3298:	84 2f       	mov	r24, r20
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	88 0f       	add	r24, r24
    329e:	99 1f       	adc	r25, r25
    32a0:	9c 01       	movw	r18, r24
    32a2:	22 0f       	add	r18, r18
    32a4:	33 1f       	adc	r19, r19
    32a6:	22 0f       	add	r18, r18
    32a8:	33 1f       	adc	r19, r19
    32aa:	22 0f       	add	r18, r18
    32ac:	33 1f       	adc	r19, r19
    32ae:	28 1b       	sub	r18, r24
    32b0:	39 0b       	sbc	r19, r25
    32b2:	fe 01       	movw	r30, r28
    32b4:	e2 0f       	add	r30, r18
    32b6:	f3 1f       	adc	r31, r19
    32b8:	12 82       	std	Z+2, r1	; 0x02
          objs[n].jump = -1;
    32ba:	84 2f       	mov	r24, r20
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	88 0f       	add	r24, r24
    32c0:	99 1f       	adc	r25, r25
    32c2:	9c 01       	movw	r18, r24
    32c4:	22 0f       	add	r18, r18
    32c6:	33 1f       	adc	r19, r19
    32c8:	22 0f       	add	r18, r18
    32ca:	33 1f       	adc	r19, r19
    32cc:	22 0f       	add	r18, r18
    32ce:	33 1f       	adc	r19, r19
    32d0:	28 1b       	sub	r18, r24
    32d2:	39 0b       	sbc	r19, r25
    32d4:	fe 01       	movw	r30, r28
    32d6:	e2 0f       	add	r30, r18
    32d8:	f3 1f       	adc	r31, r19
    32da:	e2 86       	std	Z+10, r14	; 0x0a
          objs[n].period = 4;
    32dc:	84 2f       	mov	r24, r20
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	88 0f       	add	r24, r24
    32e2:	99 1f       	adc	r25, r25
    32e4:	9c 01       	movw	r18, r24
    32e6:	22 0f       	add	r18, r18
    32e8:	33 1f       	adc	r19, r19
    32ea:	22 0f       	add	r18, r18
    32ec:	33 1f       	adc	r19, r19
    32ee:	22 0f       	add	r18, r18
    32f0:	33 1f       	adc	r19, r19
    32f2:	28 1b       	sub	r18, r24
    32f4:	39 0b       	sbc	r19, r25
    32f6:	fe 01       	movw	r30, r28
    32f8:	e2 0f       	add	r30, r18
    32fa:	f3 1f       	adc	r31, r19
    32fc:	03 87       	std	Z+11, r16	; 0x0b
          objs[n].elapsedTime = objs[n].period;
    32fe:	84 2f       	mov	r24, r20
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	88 0f       	add	r24, r24
    3304:	99 1f       	adc	r25, r25
    3306:	9c 01       	movw	r18, r24
    3308:	22 0f       	add	r18, r18
    330a:	33 1f       	adc	r19, r19
    330c:	22 0f       	add	r18, r18
    330e:	33 1f       	adc	r19, r19
    3310:	22 0f       	add	r18, r18
    3312:	33 1f       	adc	r19, r19
    3314:	28 1b       	sub	r18, r24
    3316:	39 0b       	sbc	r19, r25
    3318:	fe 01       	movw	r30, r28
    331a:	e2 0f       	add	r30, r18
    331c:	f3 1f       	adc	r31, r19
    331e:	04 87       	std	Z+12, r16	; 0x0c
          objs[n].expire = 5;
    3320:	84 2f       	mov	r24, r20
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	88 0f       	add	r24, r24
    3326:	99 1f       	adc	r25, r25
    3328:	9c 01       	movw	r18, r24
    332a:	22 0f       	add	r18, r18
    332c:	33 1f       	adc	r19, r19
    332e:	22 0f       	add	r18, r18
    3330:	33 1f       	adc	r19, r19
    3332:	22 0f       	add	r18, r18
    3334:	33 1f       	adc	r19, r19
    3336:	28 1b       	sub	r18, r24
    3338:	39 0b       	sbc	r19, r25
    333a:	fe 01       	movw	r30, r28
    333c:	e2 0f       	add	r30, r18
    333e:	f3 1f       	adc	r31, r19
    3340:	d5 86       	std	Z+13, r13	; 0x0d
          objs[n].pos[0] = (*PL).pos[0];
    3342:	14 96       	adiw	r26, 0x04	; 4
    3344:	5c 91       	ld	r21, X
    3346:	14 97       	sbiw	r26, 0x04	; 4
    3348:	84 2f       	mov	r24, r20
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	88 0f       	add	r24, r24
    334e:	99 1f       	adc	r25, r25
    3350:	9c 01       	movw	r18, r24
    3352:	22 0f       	add	r18, r18
    3354:	33 1f       	adc	r19, r19
    3356:	22 0f       	add	r18, r18
    3358:	33 1f       	adc	r19, r19
    335a:	22 0f       	add	r18, r18
    335c:	33 1f       	adc	r19, r19
    335e:	28 1b       	sub	r18, r24
    3360:	39 0b       	sbc	r19, r25
    3362:	fe 01       	movw	r30, r28
    3364:	e2 0f       	add	r30, r18
    3366:	f3 1f       	adc	r31, r19
    3368:	54 83       	std	Z+4, r21	; 0x04
          objs[n].pos[1] = (*PL).pos[1] + x;
    336a:	84 2f       	mov	r24, r20
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	88 0f       	add	r24, r24
    3370:	99 1f       	adc	r25, r25
    3372:	9c 01       	movw	r18, r24
    3374:	22 0f       	add	r18, r18
    3376:	33 1f       	adc	r19, r19
    3378:	22 0f       	add	r18, r18
    337a:	33 1f       	adc	r19, r19
    337c:	22 0f       	add	r18, r18
    337e:	33 1f       	adc	r19, r19
    3380:	28 1b       	sub	r18, r24
    3382:	39 0b       	sbc	r19, r25
    3384:	fe 01       	movw	r30, r28
    3386:	e2 0f       	add	r30, r18
    3388:	f3 1f       	adc	r31, r19
    338a:	15 96       	adiw	r26, 0x05	; 5
    338c:	8c 91       	ld	r24, X
    338e:	15 97       	sbiw	r26, 0x05	; 5
    3390:	81 0f       	add	r24, r17
    3392:	85 83       	std	Z+5, r24	; 0x05
          objs[n].pos[2] = (*PL).pos[2];
    3394:	16 96       	adiw	r26, 0x06	; 6
    3396:	5c 91       	ld	r21, X
    3398:	16 97       	sbiw	r26, 0x06	; 6
    339a:	84 2f       	mov	r24, r20
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	88 0f       	add	r24, r24
    33a0:	99 1f       	adc	r25, r25
    33a2:	9c 01       	movw	r18, r24
    33a4:	22 0f       	add	r18, r18
    33a6:	33 1f       	adc	r19, r19
    33a8:	22 0f       	add	r18, r18
    33aa:	33 1f       	adc	r19, r19
    33ac:	22 0f       	add	r18, r18
    33ae:	33 1f       	adc	r19, r19
    33b0:	28 1b       	sub	r18, r24
    33b2:	39 0b       	sbc	r19, r25
    33b4:	fe 01       	movw	r30, r28
    33b6:	e2 0f       	add	r30, r18
    33b8:	f3 1f       	adc	r31, r19
    33ba:	56 83       	std	Z+6, r21	; 0x06
          objs[n].pos[3] = (*PL).pos[3];
    33bc:	17 96       	adiw	r26, 0x07	; 7
    33be:	5c 91       	ld	r21, X
    33c0:	17 97       	sbiw	r26, 0x07	; 7
    33c2:	84 2f       	mov	r24, r20
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	88 0f       	add	r24, r24
    33c8:	99 1f       	adc	r25, r25
    33ca:	9c 01       	movw	r18, r24
    33cc:	22 0f       	add	r18, r18
    33ce:	33 1f       	adc	r19, r19
    33d0:	22 0f       	add	r18, r18
    33d2:	33 1f       	adc	r19, r19
    33d4:	22 0f       	add	r18, r18
    33d6:	33 1f       	adc	r19, r19
    33d8:	28 1b       	sub	r18, r24
    33da:	39 0b       	sbc	r19, r25
    33dc:	fe 01       	movw	r30, r28
    33de:	e2 0f       	add	r30, r18
    33e0:	f3 1f       	adc	r31, r19
    33e2:	57 83       	std	Z+7, r21	; 0x07
          objs[n].next[0] = 0;
    33e4:	84 2f       	mov	r24, r20
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	88 0f       	add	r24, r24
    33ea:	99 1f       	adc	r25, r25
    33ec:	9c 01       	movw	r18, r24
    33ee:	22 0f       	add	r18, r18
    33f0:	33 1f       	adc	r19, r19
    33f2:	22 0f       	add	r18, r18
    33f4:	33 1f       	adc	r19, r19
    33f6:	22 0f       	add	r18, r18
    33f8:	33 1f       	adc	r19, r19
    33fa:	28 1b       	sub	r18, r24
    33fc:	39 0b       	sbc	r19, r25
    33fe:	fe 01       	movw	r30, r28
    3400:	e2 0f       	add	r30, r18
    3402:	f3 1f       	adc	r31, r19
    3404:	10 86       	std	Z+8, r1	; 0x08
          objs[n].next[1] = 0;
    3406:	84 2f       	mov	r24, r20
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	88 0f       	add	r24, r24
    340c:	99 1f       	adc	r25, r25
    340e:	9c 01       	movw	r18, r24
    3410:	22 0f       	add	r18, r18
    3412:	33 1f       	adc	r19, r19
    3414:	22 0f       	add	r18, r18
    3416:	33 1f       	adc	r19, r19
    3418:	22 0f       	add	r18, r18
    341a:	33 1f       	adc	r19, r19
    341c:	28 1b       	sub	r18, r24
    341e:	39 0b       	sbc	r19, r25
    3420:	fe 01       	movw	r30, r28
    3422:	e2 0f       	add	r30, r18
    3424:	f3 1f       	adc	r31, r19
    3426:	11 86       	std	Z+9, r1	; 0x09
        (*PL).cooldown = CLUSTER_COOL;
      }
      return;
    case 7: // HEAL
      {
        for(signed char x = -5; x < 6; ++x) {
    3428:	1f 5f       	subi	r17, 0xFF	; 255
    342a:	16 30       	cpi	r17, 0x06	; 6
    342c:	09 f0       	breq	.+2      	; 0x3430 <genProjectile+0x14b0>
    342e:	fd ce       	rjmp	.-518    	; 0x322a <genProjectile+0x12aa>
    3430:	1b ef       	ldi	r17, 0xFB	; 251
          objs[n].next[1] = 0;
        }
        for(signed char y = -5; y < 6; ++y) {
          char n = getNewObj();
          if( n == -1 ) return;
          objs[n].exist = true;
    3432:	c3 e8       	ldi	r28, 0x83	; 131
    3434:	d1 e0       	ldi	r29, 0x01	; 1
    3436:	ff 24       	eor	r15, r15
    3438:	f3 94       	inc	r15
          objs[n].collide = false;
          objs[n].who = (*PL).who;
          objs[n].type = 0;
          objs[n].jump = -1;
    343a:	ee 24       	eor	r14, r14
    343c:	ea 94       	dec	r14
          objs[n].period = 4;
    343e:	04 e0       	ldi	r16, 0x04	; 4
          objs[n].elapsedTime = objs[n].period;
          objs[n].expire = 5;
    3440:	0f 2e       	mov	r0, r31
    3442:	f5 e0       	ldi	r31, 0x05	; 5
    3444:	df 2e       	mov	r13, r31
    3446:	f0 2d       	mov	r31, r0
          objs[n].pos[3] = (*PL).pos[3];
          objs[n].next[0] = 0;
          objs[n].next[1] = 0;
        }
        for(signed char y = -5; y < 6; ++y) {
          char n = getNewObj();
    3448:	0e 94 ab 04 	call	0x956	; 0x956 <getNewObj>
    344c:	48 2f       	mov	r20, r24
          if( n == -1 ) return;
          objs[n].exist = true;
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	88 0f       	add	r24, r24
    3452:	99 1f       	adc	r25, r25
    3454:	9c 01       	movw	r18, r24
    3456:	22 0f       	add	r18, r18
    3458:	33 1f       	adc	r19, r19
    345a:	22 0f       	add	r18, r18
    345c:	33 1f       	adc	r19, r19
    345e:	22 0f       	add	r18, r18
    3460:	33 1f       	adc	r19, r19
    3462:	28 1b       	sub	r18, r24
    3464:	39 0b       	sbc	r19, r25
    3466:	fe 01       	movw	r30, r28
    3468:	e2 0f       	add	r30, r18
    346a:	f3 1f       	adc	r31, r19
    346c:	f0 82       	st	Z, r15
          objs[n].collide = false;
    346e:	84 2f       	mov	r24, r20
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	88 0f       	add	r24, r24
    3474:	99 1f       	adc	r25, r25
    3476:	9c 01       	movw	r18, r24
    3478:	22 0f       	add	r18, r18
    347a:	33 1f       	adc	r19, r19
    347c:	22 0f       	add	r18, r18
    347e:	33 1f       	adc	r19, r19
    3480:	22 0f       	add	r18, r18
    3482:	33 1f       	adc	r19, r19
    3484:	28 1b       	sub	r18, r24
    3486:	39 0b       	sbc	r19, r25
    3488:	fe 01       	movw	r30, r28
    348a:	e2 0f       	add	r30, r18
    348c:	f3 1f       	adc	r31, r19
    348e:	11 82       	std	Z+1, r1	; 0x01
          objs[n].who = (*PL).who;
    3490:	f5 01       	movw	r30, r10
    3492:	50 81       	ld	r21, Z
    3494:	84 2f       	mov	r24, r20
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	88 0f       	add	r24, r24
    349a:	99 1f       	adc	r25, r25
    349c:	9c 01       	movw	r18, r24
    349e:	22 0f       	add	r18, r18
    34a0:	33 1f       	adc	r19, r19
    34a2:	22 0f       	add	r18, r18
    34a4:	33 1f       	adc	r19, r19
    34a6:	22 0f       	add	r18, r18
    34a8:	33 1f       	adc	r19, r19
    34aa:	28 1b       	sub	r18, r24
    34ac:	39 0b       	sbc	r19, r25
    34ae:	fe 01       	movw	r30, r28
    34b0:	e2 0f       	add	r30, r18
    34b2:	f3 1f       	adc	r31, r19
    34b4:	53 83       	std	Z+3, r21	; 0x03
          objs[n].type = 0;
    34b6:	84 2f       	mov	r24, r20
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	88 0f       	add	r24, r24
    34bc:	99 1f       	adc	r25, r25
    34be:	9c 01       	movw	r18, r24
    34c0:	22 0f       	add	r18, r18
    34c2:	33 1f       	adc	r19, r19
    34c4:	22 0f       	add	r18, r18
    34c6:	33 1f       	adc	r19, r19
    34c8:	22 0f       	add	r18, r18
    34ca:	33 1f       	adc	r19, r19
    34cc:	28 1b       	sub	r18, r24
    34ce:	39 0b       	sbc	r19, r25
    34d0:	fe 01       	movw	r30, r28
    34d2:	e2 0f       	add	r30, r18
    34d4:	f3 1f       	adc	r31, r19
    34d6:	12 82       	std	Z+2, r1	; 0x02
          objs[n].jump = -1;
    34d8:	84 2f       	mov	r24, r20
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	88 0f       	add	r24, r24
    34de:	99 1f       	adc	r25, r25
    34e0:	9c 01       	movw	r18, r24
    34e2:	22 0f       	add	r18, r18
    34e4:	33 1f       	adc	r19, r19
    34e6:	22 0f       	add	r18, r18
    34e8:	33 1f       	adc	r19, r19
    34ea:	22 0f       	add	r18, r18
    34ec:	33 1f       	adc	r19, r19
    34ee:	28 1b       	sub	r18, r24
    34f0:	39 0b       	sbc	r19, r25
    34f2:	fe 01       	movw	r30, r28
    34f4:	e2 0f       	add	r30, r18
    34f6:	f3 1f       	adc	r31, r19
    34f8:	e2 86       	std	Z+10, r14	; 0x0a
          objs[n].period = 4;
    34fa:	84 2f       	mov	r24, r20
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	88 0f       	add	r24, r24
    3500:	99 1f       	adc	r25, r25
    3502:	9c 01       	movw	r18, r24
    3504:	22 0f       	add	r18, r18
    3506:	33 1f       	adc	r19, r19
    3508:	22 0f       	add	r18, r18
    350a:	33 1f       	adc	r19, r19
    350c:	22 0f       	add	r18, r18
    350e:	33 1f       	adc	r19, r19
    3510:	28 1b       	sub	r18, r24
    3512:	39 0b       	sbc	r19, r25
    3514:	fe 01       	movw	r30, r28
    3516:	e2 0f       	add	r30, r18
    3518:	f3 1f       	adc	r31, r19
    351a:	03 87       	std	Z+11, r16	; 0x0b
          objs[n].elapsedTime = objs[n].period;
    351c:	84 2f       	mov	r24, r20
    351e:	90 e0       	ldi	r25, 0x00	; 0
    3520:	88 0f       	add	r24, r24
    3522:	99 1f       	adc	r25, r25
    3524:	9c 01       	movw	r18, r24
    3526:	22 0f       	add	r18, r18
    3528:	33 1f       	adc	r19, r19
    352a:	22 0f       	add	r18, r18
    352c:	33 1f       	adc	r19, r19
    352e:	22 0f       	add	r18, r18
    3530:	33 1f       	adc	r19, r19
    3532:	28 1b       	sub	r18, r24
    3534:	39 0b       	sbc	r19, r25
    3536:	fe 01       	movw	r30, r28
    3538:	e2 0f       	add	r30, r18
    353a:	f3 1f       	adc	r31, r19
    353c:	04 87       	std	Z+12, r16	; 0x0c
          objs[n].expire = 5;
    353e:	84 2f       	mov	r24, r20
    3540:	90 e0       	ldi	r25, 0x00	; 0
    3542:	88 0f       	add	r24, r24
    3544:	99 1f       	adc	r25, r25
    3546:	9c 01       	movw	r18, r24
    3548:	22 0f       	add	r18, r18
    354a:	33 1f       	adc	r19, r19
    354c:	22 0f       	add	r18, r18
    354e:	33 1f       	adc	r19, r19
    3550:	22 0f       	add	r18, r18
    3552:	33 1f       	adc	r19, r19
    3554:	28 1b       	sub	r18, r24
    3556:	39 0b       	sbc	r19, r25
    3558:	fe 01       	movw	r30, r28
    355a:	e2 0f       	add	r30, r18
    355c:	f3 1f       	adc	r31, r19
    355e:	d5 86       	std	Z+13, r13	; 0x0d
          objs[n].pos[0] = (*PL).pos[0];
    3560:	d5 01       	movw	r26, r10
    3562:	14 96       	adiw	r26, 0x04	; 4
    3564:	5c 91       	ld	r21, X
    3566:	14 97       	sbiw	r26, 0x04	; 4
    3568:	84 2f       	mov	r24, r20
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	88 0f       	add	r24, r24
    356e:	99 1f       	adc	r25, r25
    3570:	9c 01       	movw	r18, r24
    3572:	22 0f       	add	r18, r18
    3574:	33 1f       	adc	r19, r19
    3576:	22 0f       	add	r18, r18
    3578:	33 1f       	adc	r19, r19
    357a:	22 0f       	add	r18, r18
    357c:	33 1f       	adc	r19, r19
    357e:	28 1b       	sub	r18, r24
    3580:	39 0b       	sbc	r19, r25
    3582:	fe 01       	movw	r30, r28
    3584:	e2 0f       	add	r30, r18
    3586:	f3 1f       	adc	r31, r19
    3588:	54 83       	std	Z+4, r21	; 0x04
          objs[n].pos[1] = (*PL).pos[1];
    358a:	15 96       	adiw	r26, 0x05	; 5
    358c:	5c 91       	ld	r21, X
    358e:	15 97       	sbiw	r26, 0x05	; 5
    3590:	84 2f       	mov	r24, r20
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	88 0f       	add	r24, r24
    3596:	99 1f       	adc	r25, r25
    3598:	9c 01       	movw	r18, r24
    359a:	22 0f       	add	r18, r18
    359c:	33 1f       	adc	r19, r19
    359e:	22 0f       	add	r18, r18
    35a0:	33 1f       	adc	r19, r19
    35a2:	22 0f       	add	r18, r18
    35a4:	33 1f       	adc	r19, r19
    35a6:	28 1b       	sub	r18, r24
    35a8:	39 0b       	sbc	r19, r25
    35aa:	fe 01       	movw	r30, r28
    35ac:	e2 0f       	add	r30, r18
    35ae:	f3 1f       	adc	r31, r19
    35b0:	55 83       	std	Z+5, r21	; 0x05
          objs[n].pos[2] = (*PL).pos[2] + y;
    35b2:	84 2f       	mov	r24, r20
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	88 0f       	add	r24, r24
    35b8:	99 1f       	adc	r25, r25
    35ba:	9c 01       	movw	r18, r24
    35bc:	22 0f       	add	r18, r18
    35be:	33 1f       	adc	r19, r19
    35c0:	22 0f       	add	r18, r18
    35c2:	33 1f       	adc	r19, r19
    35c4:	22 0f       	add	r18, r18
    35c6:	33 1f       	adc	r19, r19
    35c8:	28 1b       	sub	r18, r24
    35ca:	39 0b       	sbc	r19, r25
    35cc:	fe 01       	movw	r30, r28
    35ce:	e2 0f       	add	r30, r18
    35d0:	f3 1f       	adc	r31, r19
    35d2:	16 96       	adiw	r26, 0x06	; 6
    35d4:	8c 91       	ld	r24, X
    35d6:	16 97       	sbiw	r26, 0x06	; 6
    35d8:	81 0f       	add	r24, r17
    35da:	86 83       	std	Z+6, r24	; 0x06
          objs[n].pos[3] = (*PL).pos[3];
    35dc:	17 96       	adiw	r26, 0x07	; 7
    35de:	5c 91       	ld	r21, X
    35e0:	17 97       	sbiw	r26, 0x07	; 7
    35e2:	84 2f       	mov	r24, r20
    35e4:	90 e0       	ldi	r25, 0x00	; 0
    35e6:	88 0f       	add	r24, r24
    35e8:	99 1f       	adc	r25, r25
    35ea:	9c 01       	movw	r18, r24
    35ec:	22 0f       	add	r18, r18
    35ee:	33 1f       	adc	r19, r19
    35f0:	22 0f       	add	r18, r18
    35f2:	33 1f       	adc	r19, r19
    35f4:	22 0f       	add	r18, r18
    35f6:	33 1f       	adc	r19, r19
    35f8:	28 1b       	sub	r18, r24
    35fa:	39 0b       	sbc	r19, r25
    35fc:	fe 01       	movw	r30, r28
    35fe:	e2 0f       	add	r30, r18
    3600:	f3 1f       	adc	r31, r19
    3602:	57 83       	std	Z+7, r21	; 0x07
          objs[n].next[0] = 0;
    3604:	84 2f       	mov	r24, r20
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	88 0f       	add	r24, r24
    360a:	99 1f       	adc	r25, r25
    360c:	9c 01       	movw	r18, r24
    360e:	22 0f       	add	r18, r18
    3610:	33 1f       	adc	r19, r19
    3612:	22 0f       	add	r18, r18
    3614:	33 1f       	adc	r19, r19
    3616:	22 0f       	add	r18, r18
    3618:	33 1f       	adc	r19, r19
    361a:	28 1b       	sub	r18, r24
    361c:	39 0b       	sbc	r19, r25
    361e:	fe 01       	movw	r30, r28
    3620:	e2 0f       	add	r30, r18
    3622:	f3 1f       	adc	r31, r19
    3624:	10 86       	std	Z+8, r1	; 0x08
          objs[n].next[1] = 0;
    3626:	84 2f       	mov	r24, r20
    3628:	90 e0       	ldi	r25, 0x00	; 0
    362a:	88 0f       	add	r24, r24
    362c:	99 1f       	adc	r25, r25
    362e:	9c 01       	movw	r18, r24
    3630:	22 0f       	add	r18, r18
    3632:	33 1f       	adc	r19, r19
    3634:	22 0f       	add	r18, r18
    3636:	33 1f       	adc	r19, r19
    3638:	22 0f       	add	r18, r18
    363a:	33 1f       	adc	r19, r19
    363c:	28 1b       	sub	r18, r24
    363e:	39 0b       	sbc	r19, r25
    3640:	fe 01       	movw	r30, r28
    3642:	e2 0f       	add	r30, r18
    3644:	f3 1f       	adc	r31, r19
    3646:	11 86       	std	Z+9, r1	; 0x09
          objs[n].pos[2] = (*PL).pos[2];
          objs[n].pos[3] = (*PL).pos[3];
          objs[n].next[0] = 0;
          objs[n].next[1] = 0;
        }
        for(signed char y = -5; y < 6; ++y) {
    3648:	1f 5f       	subi	r17, 0xFF	; 255
    364a:	16 30       	cpi	r17, 0x06	; 6
    364c:	09 f0       	breq	.+2      	; 0x3650 <genProjectile+0x16d0>
    364e:	fc ce       	rjmp	.-520    	; 0x3448 <genProjectile+0x14c8>
          objs[n].pos[2] = (*PL).pos[2] + y;
          objs[n].pos[3] = (*PL).pos[3];
          objs[n].next[0] = 0;
          objs[n].next[1] = 0;
        }
        (*PL).invul = HEAL_INVUL;
    3650:	89 e1       	ldi	r24, 0x19	; 25
    3652:	1a 96       	adiw	r26, 0x0a	; 10
    3654:	8c 93       	st	X, r24
    3656:	1a 97       	sbiw	r26, 0x0a	; 10
        (*PL).life++;
    3658:	1d 96       	adiw	r26, 0x0d	; 13
    365a:	8c 91       	ld	r24, X
    365c:	1d 97       	sbiw	r26, 0x0d	; 13
    365e:	8f 5f       	subi	r24, 0xFF	; 255
    3660:	1d 96       	adiw	r26, 0x0d	; 13
    3662:	8c 93       	st	X, r24
        char n;
        if((n = getNewObj()) == -1 ) return;
    3664:	0e 94 ab 04 	call	0x956	; 0x956 <getNewObj>
    3668:	18 2f       	mov	r17, r24
        objs[n].exist = true;
    366a:	c3 e8       	ldi	r28, 0x83	; 131
    366c:	d1 e0       	ldi	r29, 0x01	; 1
    366e:	90 e0       	ldi	r25, 0x00	; 0
    3670:	88 0f       	add	r24, r24
    3672:	99 1f       	adc	r25, r25
    3674:	9c 01       	movw	r18, r24
    3676:	22 0f       	add	r18, r18
    3678:	33 1f       	adc	r19, r19
    367a:	22 0f       	add	r18, r18
    367c:	33 1f       	adc	r19, r19
    367e:	22 0f       	add	r18, r18
    3680:	33 1f       	adc	r19, r19
    3682:	28 1b       	sub	r18, r24
    3684:	39 0b       	sbc	r19, r25
    3686:	fe 01       	movw	r30, r28
    3688:	e2 0f       	add	r30, r18
    368a:	f3 1f       	adc	r31, r19
    368c:	01 e0       	ldi	r16, 0x01	; 1
    368e:	00 83       	st	Z, r16
        objs[n].who = 3;
    3690:	81 2f       	mov	r24, r17
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	88 0f       	add	r24, r24
    3696:	99 1f       	adc	r25, r25
    3698:	9c 01       	movw	r18, r24
    369a:	22 0f       	add	r18, r18
    369c:	33 1f       	adc	r19, r19
    369e:	22 0f       	add	r18, r18
    36a0:	33 1f       	adc	r19, r19
    36a2:	22 0f       	add	r18, r18
    36a4:	33 1f       	adc	r19, r19
    36a6:	28 1b       	sub	r18, r24
    36a8:	39 0b       	sbc	r19, r25
    36aa:	fe 01       	movw	r30, r28
    36ac:	e2 0f       	add	r30, r18
    36ae:	f3 1f       	adc	r31, r19
    36b0:	83 e0       	ldi	r24, 0x03	; 3
    36b2:	83 83       	std	Z+3, r24	; 0x03
        objs[n].pos[0] = (*PL).pos[0];
    36b4:	f5 01       	movw	r30, r10
    36b6:	44 81       	ldd	r20, Z+4	; 0x04
    36b8:	81 2f       	mov	r24, r17
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	88 0f       	add	r24, r24
    36be:	99 1f       	adc	r25, r25
    36c0:	9c 01       	movw	r18, r24
    36c2:	22 0f       	add	r18, r18
    36c4:	33 1f       	adc	r19, r19
    36c6:	22 0f       	add	r18, r18
    36c8:	33 1f       	adc	r19, r19
    36ca:	22 0f       	add	r18, r18
    36cc:	33 1f       	adc	r19, r19
    36ce:	28 1b       	sub	r18, r24
    36d0:	39 0b       	sbc	r19, r25
    36d2:	fe 01       	movw	r30, r28
    36d4:	e2 0f       	add	r30, r18
    36d6:	f3 1f       	adc	r31, r19
    36d8:	44 83       	std	Z+4, r20	; 0x04
        objs[n].pos[1] = (*PL).pos[1];
    36da:	d5 01       	movw	r26, r10
    36dc:	15 96       	adiw	r26, 0x05	; 5
    36de:	4c 91       	ld	r20, X
    36e0:	15 97       	sbiw	r26, 0x05	; 5
    36e2:	81 2f       	mov	r24, r17
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	88 0f       	add	r24, r24
    36e8:	99 1f       	adc	r25, r25
    36ea:	9c 01       	movw	r18, r24
    36ec:	22 0f       	add	r18, r18
    36ee:	33 1f       	adc	r19, r19
    36f0:	22 0f       	add	r18, r18
    36f2:	33 1f       	adc	r19, r19
    36f4:	22 0f       	add	r18, r18
    36f6:	33 1f       	adc	r19, r19
    36f8:	28 1b       	sub	r18, r24
    36fa:	39 0b       	sbc	r19, r25
    36fc:	fe 01       	movw	r30, r28
    36fe:	e2 0f       	add	r30, r18
    3700:	f3 1f       	adc	r31, r19
    3702:	45 83       	std	Z+5, r20	; 0x05
        objs[n].pos[2] = (*PL).pos[2];
    3704:	16 96       	adiw	r26, 0x06	; 6
    3706:	4c 91       	ld	r20, X
    3708:	16 97       	sbiw	r26, 0x06	; 6
    370a:	81 2f       	mov	r24, r17
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	88 0f       	add	r24, r24
    3710:	99 1f       	adc	r25, r25
    3712:	9c 01       	movw	r18, r24
    3714:	22 0f       	add	r18, r18
    3716:	33 1f       	adc	r19, r19
    3718:	22 0f       	add	r18, r18
    371a:	33 1f       	adc	r19, r19
    371c:	22 0f       	add	r18, r18
    371e:	33 1f       	adc	r19, r19
    3720:	28 1b       	sub	r18, r24
    3722:	39 0b       	sbc	r19, r25
    3724:	fe 01       	movw	r30, r28
    3726:	e2 0f       	add	r30, r18
    3728:	f3 1f       	adc	r31, r19
    372a:	46 83       	std	Z+6, r20	; 0x06
        objs[n].pos[3] = (*PL).pos[3];
    372c:	17 96       	adiw	r26, 0x07	; 7
    372e:	4c 91       	ld	r20, X
    3730:	81 2f       	mov	r24, r17
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	88 0f       	add	r24, r24
    3736:	99 1f       	adc	r25, r25
    3738:	9c 01       	movw	r18, r24
    373a:	22 0f       	add	r18, r18
    373c:	33 1f       	adc	r19, r19
    373e:	22 0f       	add	r18, r18
    3740:	33 1f       	adc	r19, r19
    3742:	22 0f       	add	r18, r18
    3744:	33 1f       	adc	r19, r19
    3746:	28 1b       	sub	r18, r24
    3748:	39 0b       	sbc	r19, r25
    374a:	fe 01       	movw	r30, r28
    374c:	e2 0f       	add	r30, r18
    374e:	f3 1f       	adc	r31, r19
    3750:	47 83       	std	Z+7, r20	; 0x07
        objs[n].next[0] = 0;
    3752:	81 2f       	mov	r24, r17
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	88 0f       	add	r24, r24
    3758:	99 1f       	adc	r25, r25
    375a:	9c 01       	movw	r18, r24
    375c:	22 0f       	add	r18, r18
    375e:	33 1f       	adc	r19, r19
    3760:	22 0f       	add	r18, r18
    3762:	33 1f       	adc	r19, r19
    3764:	22 0f       	add	r18, r18
    3766:	33 1f       	adc	r19, r19
    3768:	28 1b       	sub	r18, r24
    376a:	39 0b       	sbc	r19, r25
    376c:	fe 01       	movw	r30, r28
    376e:	e2 0f       	add	r30, r18
    3770:	f3 1f       	adc	r31, r19
    3772:	10 86       	std	Z+8, r1	; 0x08
        objs[n].next[1] = 0;
    3774:	81 2f       	mov	r24, r17
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	88 0f       	add	r24, r24
    377a:	99 1f       	adc	r25, r25
    377c:	9c 01       	movw	r18, r24
    377e:	22 0f       	add	r18, r18
    3780:	33 1f       	adc	r19, r19
    3782:	22 0f       	add	r18, r18
    3784:	33 1f       	adc	r19, r19
    3786:	22 0f       	add	r18, r18
    3788:	33 1f       	adc	r19, r19
    378a:	28 1b       	sub	r18, r24
    378c:	39 0b       	sbc	r19, r25
    378e:	fe 01       	movw	r30, r28
    3790:	e2 0f       	add	r30, r18
    3792:	f3 1f       	adc	r31, r19
    3794:	11 86       	std	Z+9, r1	; 0x09
        explosion(&(objs[n]),2);
    3796:	21 2f       	mov	r18, r17
    3798:	30 e0       	ldi	r19, 0x00	; 0
    379a:	22 0f       	add	r18, r18
    379c:	33 1f       	adc	r19, r19
    379e:	c9 01       	movw	r24, r18
    37a0:	88 0f       	add	r24, r24
    37a2:	99 1f       	adc	r25, r25
    37a4:	88 0f       	add	r24, r24
    37a6:	99 1f       	adc	r25, r25
    37a8:	88 0f       	add	r24, r24
    37aa:	99 1f       	adc	r25, r25
    37ac:	82 1b       	sub	r24, r18
    37ae:	93 0b       	sbc	r25, r19
    37b0:	8c 0f       	add	r24, r28
    37b2:	9d 1f       	adc	r25, r29
    37b4:	62 e0       	ldi	r22, 0x02	; 2
    37b6:	0e 94 c2 04 	call	0x984	; 0x984 <explosion>
        objs[n].exist = true;
    37ba:	81 2f       	mov	r24, r17
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	88 0f       	add	r24, r24
    37c0:	99 1f       	adc	r25, r25
    37c2:	9c 01       	movw	r18, r24
    37c4:	22 0f       	add	r18, r18
    37c6:	33 1f       	adc	r19, r19
    37c8:	22 0f       	add	r18, r18
    37ca:	33 1f       	adc	r19, r19
    37cc:	22 0f       	add	r18, r18
    37ce:	33 1f       	adc	r19, r19
    37d0:	28 1b       	sub	r18, r24
    37d2:	39 0b       	sbc	r19, r25
    37d4:	c2 0f       	add	r28, r18
    37d6:	d3 1f       	adc	r29, r19
    37d8:	08 83       	st	Y, r16
        (*PL).cooldown = HEAL_COOL;  
    37da:	88 e2       	ldi	r24, 0x28	; 40
    37dc:	f5 01       	movw	r30, r10
    37de:	84 87       	std	Z+12, r24	; 0x0c
      }  
      return;
    default:
      break;
  }
}
    37e0:	df 91       	pop	r29
    37e2:	cf 91       	pop	r28
    37e4:	1f 91       	pop	r17
    37e6:	0f 91       	pop	r16
    37e8:	ff 90       	pop	r15
    37ea:	ef 90       	pop	r14
    37ec:	df 90       	pop	r13
    37ee:	cf 90       	pop	r12
    37f0:	bf 90       	pop	r11
    37f2:	af 90       	pop	r10
    37f4:	9f 90       	pop	r9
    37f6:	8f 90       	pop	r8
    37f8:	7f 90       	pop	r7
    37fa:	08 95       	ret

000037fc <swapItem>:

void swapItem( player *PL ) {
    37fc:	fc 01       	movw	r30, r24
  (*PL).equip++;
    37fe:	80 89       	ldd	r24, Z+16	; 0x10
    3800:	8f 5f       	subi	r24, 0xFF	; 255
    3802:	80 8b       	std	Z+16, r24	; 0x10
  if((*PL).equip == NUM_EQUIP)
    3804:	88 30       	cpi	r24, 0x08	; 8
    3806:	39 f4       	brne	.+14     	; 0x3816 <swapItem+0x1a>
      (*PL).equip = 0;
    3808:	10 8a       	std	Z+16, r1	; 0x10
    380a:	05 c0       	rjmp	.+10     	; 0x3816 <swapItem+0x1a>
  for( ; (*PL).inven[(*PL).equip] == 0; ) { // if consecutive items are empty, keep swapping
    (*PL).equip++;
    380c:	8f 5f       	subi	r24, 0xFF	; 255
    380e:	80 8b       	std	Z+16, r24	; 0x10
    if((*PL).equip == NUM_EQUIP)
    3810:	88 30       	cpi	r24, 0x08	; 8
    3812:	09 f4       	brne	.+2      	; 0x3816 <swapItem+0x1a>
      (*PL).equip = 0;
    3814:	10 8a       	std	Z+16, r1	; 0x10

void swapItem( player *PL ) {
  (*PL).equip++;
  if((*PL).equip == NUM_EQUIP)
      (*PL).equip = 0;
  for( ; (*PL).inven[(*PL).equip] == 0; ) { // if consecutive items are empty, keep swapping
    3816:	80 89       	ldd	r24, Z+16	; 0x10
    3818:	a8 2f       	mov	r26, r24
    381a:	bb 27       	eor	r27, r27
    381c:	a7 fd       	sbrc	r26, 7
    381e:	b0 95       	com	r27
    3820:	ae 0f       	add	r26, r30
    3822:	bf 1f       	adc	r27, r31
    3824:	51 96       	adiw	r26, 0x11	; 17
    3826:	9c 91       	ld	r25, X
    3828:	51 97       	sbiw	r26, 0x11	; 17
    382a:	99 23       	and	r25, r25
    382c:	79 f3       	breq	.-34     	; 0x380c <swapItem+0x10>
    (*PL).equip++;
    if((*PL).equip == NUM_EQUIP)
      (*PL).equip = 0;
  }
}
    382e:	08 95       	ret

00003830 <swapItemR>:

void swapItemR( player *PL ) {
    3830:	fc 01       	movw	r30, r24
  (*PL).equip--;
    3832:	80 89       	ldd	r24, Z+16	; 0x10
    3834:	81 50       	subi	r24, 0x01	; 1
    3836:	80 8b       	std	Z+16, r24	; 0x10
  if((*PL).equip == -1)
    3838:	8f 3f       	cpi	r24, 0xFF	; 255
    383a:	49 f4       	brne	.+18     	; 0x384e <swapItemR+0x1e>
      (*PL).equip = NUM_EQUIP - 1;
    383c:	87 e0       	ldi	r24, 0x07	; 7
    383e:	80 8b       	std	Z+16, r24	; 0x10
    3840:	06 c0       	rjmp	.+12     	; 0x384e <swapItemR+0x1e>
  for( ; (*PL).inven[(*PL).equip] == 0; ) { // if consecutive items are empty, keep swapping
    (*PL).equip--;
    3842:	81 50       	subi	r24, 0x01	; 1
    3844:	80 8b       	std	Z+16, r24	; 0x10
    if((*PL).equip == -1)
    3846:	8f 3f       	cpi	r24, 0xFF	; 255
    3848:	19 f4       	brne	.+6      	; 0x3850 <swapItemR+0x20>
      (*PL).equip = NUM_EQUIP - 1;
    384a:	20 8b       	std	Z+16, r18	; 0x10
    384c:	01 c0       	rjmp	.+2      	; 0x3850 <swapItemR+0x20>
    384e:	27 e0       	ldi	r18, 0x07	; 7

void swapItemR( player *PL ) {
  (*PL).equip--;
  if((*PL).equip == -1)
      (*PL).equip = NUM_EQUIP - 1;
  for( ; (*PL).inven[(*PL).equip] == 0; ) { // if consecutive items are empty, keep swapping
    3850:	80 89       	ldd	r24, Z+16	; 0x10
    3852:	a8 2f       	mov	r26, r24
    3854:	bb 27       	eor	r27, r27
    3856:	a7 fd       	sbrc	r26, 7
    3858:	b0 95       	com	r27
    385a:	ae 0f       	add	r26, r30
    385c:	bf 1f       	adc	r27, r31
    385e:	51 96       	adiw	r26, 0x11	; 17
    3860:	9c 91       	ld	r25, X
    3862:	51 97       	sbiw	r26, 0x11	; 17
    3864:	99 23       	and	r25, r25
    3866:	69 f3       	breq	.-38     	; 0x3842 <swapItemR+0x12>
    (*PL).equip--;
    if((*PL).equip == -1)
      (*PL).equip = NUM_EQUIP - 1;
  }
}
    3868:	08 95       	ret

0000386a <handlePLInput>:

void handlePLInput( player *PL, char input ) {
    386a:	cf 93       	push	r28
    386c:	df 93       	push	r29
    386e:	ec 01       	movw	r28, r24
  if((*PL).jump) {
    3870:	8b 85       	ldd	r24, Y+11	; 0x0b
    3872:	88 23       	and	r24, r24
    3874:	29 f0       	breq	.+10     	; 0x3880 <handlePLInput+0x16>
    (*PL).next[1] = 1;
    3876:	91 e0       	ldi	r25, 0x01	; 1
    3878:	99 87       	std	Y+9, r25	; 0x09
    (*PL).jump--;
    387a:	81 50       	subi	r24, 0x01	; 1
    387c:	8b 87       	std	Y+11, r24	; 0x0b
    387e:	02 c0       	rjmp	.+4      	; 0x3884 <handlePLInput+0x1a>
  } else 
    (*PL).next[1] = -1;
    3880:	8f ef       	ldi	r24, 0xFF	; 255
    3882:	89 87       	std	Y+9, r24	; 0x09
  switch(input) { 
    3884:	68 33       	cpi	r22, 0x38	; 56
    3886:	79 f1       	breq	.+94     	; 0x38e6 <handlePLInput+0x7c>
    3888:	69 33       	cpi	r22, 0x39	; 57
    388a:	a0 f4       	brcc	.+40     	; 0x38b4 <handlePLInput+0x4a>
    388c:	64 33       	cpi	r22, 0x34	; 52
    388e:	09 f4       	brne	.+2      	; 0x3892 <handlePLInput+0x28>
    3890:	46 c0       	rjmp	.+140    	; 0x391e <handlePLInput+0xb4>
    3892:	65 33       	cpi	r22, 0x35	; 53
    3894:	58 f4       	brcc	.+22     	; 0x38ac <handlePLInput+0x42>
    3896:	60 33       	cpi	r22, 0x30	; 48
    3898:	e9 f0       	breq	.+58     	; 0x38d4 <handlePLInput+0x6a>
    389a:	61 33       	cpi	r22, 0x31	; 49
    389c:	08 f0       	brcs	.+2      	; 0x38a0 <handlePLInput+0x36>
    389e:	6b c0       	rjmp	.+214    	; 0x3976 <handlePLInput+0x10c>
    38a0:	66 23       	and	r22, r22
    38a2:	81 f0       	breq	.+32     	; 0x38c4 <handlePLInput+0x5a>
    38a4:	6a 32       	cpi	r22, 0x2A	; 42
    38a6:	09 f0       	breq	.+2      	; 0x38aa <handlePLInput+0x40>
    38a8:	66 c0       	rjmp	.+204    	; 0x3976 <handlePLInput+0x10c>
    38aa:	39 c0       	rjmp	.+114    	; 0x391e <handlePLInput+0xb4>
    38ac:	67 33       	cpi	r22, 0x37	; 55
    38ae:	09 f0       	breq	.+2      	; 0x38b2 <handlePLInput+0x48>
    38b0:	62 c0       	rjmp	.+196    	; 0x3976 <handlePLInput+0x10c>
    38b2:	35 c0       	rjmp	.+106    	; 0x391e <handlePLInput+0xb4>
    38b4:	63 34       	cpi	r22, 0x43	; 67
    38b6:	29 f1       	breq	.+74     	; 0x3902 <handlePLInput+0x98>
    38b8:	64 34       	cpi	r22, 0x44	; 68
    38ba:	39 f0       	breq	.+14     	; 0x38ca <handlePLInput+0x60>
    38bc:	69 33       	cpi	r22, 0x39	; 57
    38be:	09 f0       	breq	.+2      	; 0x38c2 <handlePLInput+0x58>
    38c0:	5a c0       	rjmp	.+180    	; 0x3976 <handlePLInput+0x10c>
    38c2:	0d c0       	rjmp	.+26     	; 0x38de <handlePLInput+0x74>
    case '\0':
      (*PL).autofire = 0; 
    38c4:	19 82       	std	Y+1, r1	; 0x01
      (*PL).next[0] = 0;
    38c6:	18 86       	std	Y+8, r1	; 0x08
      break;
    38c8:	56 c0       	rjmp	.+172    	; 0x3976 <handlePLInput+0x10c>
    case 'D':
      (*PL).autofire = 0; 
    38ca:	19 82       	std	Y+1, r1	; 0x01
      (*PL).next[0] = 1;
    38cc:	81 e0       	ldi	r24, 0x01	; 1
    38ce:	88 87       	std	Y+8, r24	; 0x08
      (*PL).aimX = 1;
    38d0:	8a 83       	std	Y+2, r24	; 0x02
      break;
    38d2:	51 c0       	rjmp	.+162    	; 0x3976 <handlePLInput+0x10c>
    case '0':
      (*PL).autofire = 0; 
    38d4:	19 82       	std	Y+1, r1	; 0x01
      (*PL).next[0] = -1;
    38d6:	8f ef       	ldi	r24, 0xFF	; 255
    38d8:	88 87       	std	Y+8, r24	; 0x08
      (*PL).aimX = -1;
    38da:	8a 83       	std	Y+2, r24	; 0x02
      break;
    38dc:	4c c0       	rjmp	.+152    	; 0x3976 <handlePLInput+0x10c>
    case '9':
      (*PL).autofire = 0; 
    38de:	19 82       	std	Y+1, r1	; 0x01
      (*PL).jump = 2;
    38e0:	82 e0       	ldi	r24, 0x02	; 2
    38e2:	8b 87       	std	Y+11, r24	; 0x0b
      break;
    38e4:	48 c0       	rjmp	.+144    	; 0x3976 <handlePLInput+0x10c>
    case '8':
      if((*PL).jump)
    38e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    38e8:	88 23       	and	r24, r24
    38ea:	11 f0       	breq	.+4      	; 0x38f0 <handlePLInput+0x86>
        (*PL).jump = 2;
    38ec:	82 e0       	ldi	r24, 0x02	; 2
    38ee:	8b 87       	std	Y+11, r24	; 0x0b
      if((*PL).autofire != 2) 
    38f0:	89 81       	ldd	r24, Y+1	; 0x01
    38f2:	82 30       	cpi	r24, 0x02	; 2
    38f4:	19 f0       	breq	.+6      	; 0x38fc <handlePLInput+0x92>
        swapItemR(PL);
    38f6:	ce 01       	movw	r24, r28
    38f8:	0e 94 18 1c 	call	0x3830	; 0x3830 <swapItemR>
      (*PL).autofire = 2; 
    38fc:	82 e0       	ldi	r24, 0x02	; 2
    38fe:	89 83       	std	Y+1, r24	; 0x01
      break;
    3900:	3a c0       	rjmp	.+116    	; 0x3976 <handlePLInput+0x10c>
    case 'C':
      if((*PL).jump)
    3902:	8b 85       	ldd	r24, Y+11	; 0x0b
    3904:	88 23       	and	r24, r24
    3906:	11 f0       	breq	.+4      	; 0x390c <handlePLInput+0xa2>
        (*PL).jump = 2;
    3908:	82 e0       	ldi	r24, 0x02	; 2
    390a:	8b 87       	std	Y+11, r24	; 0x0b
      if((*PL).autofire != 3) 
    390c:	89 81       	ldd	r24, Y+1	; 0x01
    390e:	83 30       	cpi	r24, 0x03	; 3
    3910:	19 f0       	breq	.+6      	; 0x3918 <handlePLInput+0xae>
        swapItem(PL);
    3912:	ce 01       	movw	r24, r28
    3914:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <swapItem>
      (*PL).autofire = 3; 
    3918:	83 e0       	ldi	r24, 0x03	; 3
    391a:	89 83       	std	Y+1, r24	; 0x01
      break;
    391c:	2c c0       	rjmp	.+88     	; 0x3976 <handlePLInput+0x10c>
    case '4':
    case '7':
    case '*':
      if((*PL).jump)
    391e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3920:	88 23       	and	r24, r24
    3922:	11 f0       	breq	.+4      	; 0x3928 <handlePLInput+0xbe>
        (*PL).jump = 2;
    3924:	82 e0       	ldi	r24, 0x02	; 2
    3926:	8b 87       	std	Y+11, r24	; 0x0b
      if((*PL).cooldown == 0 && (*PL).autofire != 1) {
    3928:	8c 85       	ldd	r24, Y+12	; 0x0c
    392a:	88 23       	and	r24, r24
    392c:	21 f5       	brne	.+72     	; 0x3976 <handlePLInput+0x10c>
    392e:	89 81       	ldd	r24, Y+1	; 0x01
    3930:	81 30       	cpi	r24, 0x01	; 1
    3932:	09 f1       	breq	.+66     	; 0x3976 <handlePLInput+0x10c>
        if((*PL).inven[(*PL).equip] > 0 )
    3934:	88 89       	ldd	r24, Y+16	; 0x10
    3936:	99 27       	eor	r25, r25
    3938:	87 fd       	sbrc	r24, 7
    393a:	90 95       	com	r25
    393c:	fe 01       	movw	r30, r28
    393e:	e8 0f       	add	r30, r24
    3940:	f9 1f       	adc	r31, r25
    3942:	21 89       	ldd	r18, Z+17	; 0x11
    3944:	12 16       	cp	r1, r18
    3946:	14 f4       	brge	.+4      	; 0x394c <handlePLInput+0xe2>
          (*PL).inven[(*PL).equip]--;
    3948:	21 50       	subi	r18, 0x01	; 1
    394a:	21 8b       	std	Z+17, r18	; 0x11
        genProjectile(PL); // Allocates a projectile, updates on next turn
    394c:	ce 01       	movw	r24, r28
    394e:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <genProjectile>
        if((*PL).inven[(*PL).equip] == 0)
    3952:	e8 89       	ldd	r30, Y+16	; 0x10
    3954:	ff 27       	eor	r31, r31
    3956:	e7 fd       	sbrc	r30, 7
    3958:	f0 95       	com	r31
    395a:	ec 0f       	add	r30, r28
    395c:	fd 1f       	adc	r31, r29
    395e:	81 89       	ldd	r24, Z+17	; 0x11
    3960:	88 23       	and	r24, r24
    3962:	19 f4       	brne	.+6      	; 0x396a <handlePLInput+0x100>
          swapItem(PL);
    3964:	ce 01       	movw	r24, r28
    3966:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <swapItem>
        (*PL).autofire = 1; // Prevent autofiring
    396a:	81 e0       	ldi	r24, 0x01	; 1
    396c:	89 83       	std	Y+1, r24	; 0x01
        if((*PL).equip == 5) // MGUN bypasses any autofiring limitations
    396e:	88 89       	ldd	r24, Y+16	; 0x10
    3970:	85 30       	cpi	r24, 0x05	; 5
    3972:	09 f4       	brne	.+2      	; 0x3976 <handlePLInput+0x10c>
          (*PL).autofire = 0;
    3974:	19 82       	std	Y+1, r1	; 0x01
      }
      break;
    default:
      break;
  }
}
    3976:	df 91       	pop	r29
    3978:	cf 91       	pop	r28
    397a:	08 95       	ret

0000397c <P2_Tick>:
}

// P2 SM
enum P2_States { P2_stand } P2_State;
int P2_Tick(int P2_State) {
  switch(P2_State) { // Transitions
    397c:	01 96       	adiw	r24, 0x01	; 1
    397e:	82 30       	cpi	r24, 0x02	; 2
    3980:	91 05       	cpc	r25, r1
    3982:	50 f4       	brcc	.+20     	; 0x3998 <P2_Tick+0x1c>
  } // Transitions end
  switch(P2_State) { // State actions
    case -1:
      break;
    case P2_stand:
      handlePLInput(&P2,GetKeypadKeyP2());
    3984:	0e 94 6b 00 	call	0xd6	; 0xd6 <GetKeypadKeyP2>
    3988:	68 2f       	mov	r22, r24
    398a:	89 e2       	ldi	r24, 0x29	; 41
    398c:	91 e0       	ldi	r25, 0x01	; 1
    398e:	0e 94 35 1c 	call	0x386a	; 0x386a <handlePLInput>
// P2 SM
enum P2_States { P2_stand } P2_State;
int P2_Tick(int P2_State) {
  switch(P2_State) { // Transitions
    case -1:
      P2_State = P2_stand;
    3992:	80 e0       	ldi	r24, 0x00	; 0
    3994:	90 e0       	ldi	r25, 0x00	; 0
  switch(P2_State) { // State actions
    case -1:
      break;
    case P2_stand:
      handlePLInput(&P2,GetKeypadKeyP2());
      break;
    3996:	08 95       	ret
      break;
    case P2_stand:
      P2_State = P2_stand;
      break;
    default:
      P2_State = -1;
    3998:	8f ef       	ldi	r24, 0xFF	; 255
    399a:	9f ef       	ldi	r25, 0xFF	; 255
      break;
    default:
      break;
  } // State actions end
  return P2_State;
}
    399c:	08 95       	ret

0000399e <P1_Tick>:
} 

// P1 SM
enum P1_States { P1_stand } P1_State;
int P1_Tick(int P1_State) {
  switch(P1_State) { // Transitions
    399e:	01 96       	adiw	r24, 0x01	; 1
    39a0:	82 30       	cpi	r24, 0x02	; 2
    39a2:	91 05       	cpc	r25, r1
    39a4:	50 f4       	brcc	.+20     	; 0x39ba <P1_Tick+0x1c>
    default:
      P1_State = -1;
  } // Transitions end
  switch(P1_State) { // State actions
    case P1_stand:
      handlePLInput(&P1,GetKeypadKeyP1());
    39a6:	0e 94 24 01 	call	0x248	; 0x248 <GetKeypadKeyP1>
    39aa:	68 2f       	mov	r22, r24
    39ac:	8f e0       	ldi	r24, 0x0F	; 15
    39ae:	91 e0       	ldi	r25, 0x01	; 1
    39b0:	0e 94 35 1c 	call	0x386a	; 0x386a <handlePLInput>
// P1 SM
enum P1_States { P1_stand } P1_State;
int P1_Tick(int P1_State) {
  switch(P1_State) { // Transitions
    case -1:
      P1_State = P1_stand;
    39b4:	80 e0       	ldi	r24, 0x00	; 0
    39b6:	90 e0       	ldi	r25, 0x00	; 0
      P1_State = -1;
  } // Transitions end
  switch(P1_State) { // State actions
    case P1_stand:
      handlePLInput(&P1,GetKeypadKeyP1());
      break;
    39b8:	08 95       	ret
      break;
    case P1_stand:
      P1_State = P1_stand;
      break;
    default:
      P1_State = -1;
    39ba:	8f ef       	ldi	r24, 0xFF	; 255
    39bc:	9f ef       	ldi	r25, 0xFF	; 255
      break;
    default:
      break;
  } // State actions end
  return P1_State;
}
    39be:	08 95       	ret

000039c0 <evalStats>:
    default:
      break;
  }
}

void evalStats( player *PL ) {
    39c0:	cf 93       	push	r28
    39c2:	df 93       	push	r29
    39c4:	ec 01       	movw	r28, r24
  setCursor(8, ((*PL).who - 1));
    39c6:	68 81       	ld	r22, Y
    39c8:	61 50       	subi	r22, 0x01	; 1
    39ca:	88 e0       	ldi	r24, 0x08	; 8
    39cc:	0e 94 a9 02 	call	0x552	; 0x552 <setCursor>
  write(255);
    39d0:	8f ef       	ldi	r24, 0xFF	; 255
    39d2:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <write>

  write((*PL).who + '0');
    39d6:	88 81       	ld	r24, Y
    39d8:	80 5d       	subi	r24, 0xD0	; 208
    39da:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <write>
  write((*PL).pos[0] + (*PL).pos[3] * 4);
    39de:	8f 81       	ldd	r24, Y+7	; 0x07
    39e0:	88 0f       	add	r24, r24
    39e2:	88 0f       	add	r24, r24
    39e4:	9c 81       	ldd	r25, Y+4	; 0x04
    39e6:	89 0f       	add	r24, r25
    39e8:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <write>

  write('L');
    39ec:	8c e4       	ldi	r24, 0x4C	; 76
    39ee:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <write>
  if((*PL).life > 9) write(43); // plus sign
    39f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    39f4:	8a 30       	cpi	r24, 0x0A	; 10
    39f6:	24 f0       	brlt	.+8      	; 0x3a00 <evalStats+0x40>
    39f8:	8b e2       	ldi	r24, 0x2B	; 43
    39fa:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <write>
    39fe:	03 c0       	rjmp	.+6      	; 0x3a06 <evalStats+0x46>
  else write((*PL).life + '0');
    3a00:	80 5d       	subi	r24, 0xD0	; 208
    3a02:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <write>

  if ((*PL).cooldown / 2 > 9) write(43); // plus sign
    3a06:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a08:	84 31       	cpi	r24, 0x14	; 20
    3a0a:	20 f0       	brcs	.+8      	; 0x3a14 <evalStats+0x54>
    3a0c:	8b e2       	ldi	r24, 0x2B	; 43
    3a0e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <write>
    3a12:	0a c0       	rjmp	.+20     	; 0x3a28 <evalStats+0x68>
  else if((*PL).cooldown == 0) write('!');
    3a14:	88 23       	and	r24, r24
    3a16:	21 f4       	brne	.+8      	; 0x3a20 <evalStats+0x60>
    3a18:	81 e2       	ldi	r24, 0x21	; 33
    3a1a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <write>
    3a1e:	04 c0       	rjmp	.+8      	; 0x3a28 <evalStats+0x68>
  else write((*PL).cooldown / 2  + '0');
    3a20:	86 95       	lsr	r24
    3a22:	80 5d       	subi	r24, 0xD0	; 208
    3a24:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <write>

  switch((*PL).equip) {
    3a28:	88 89       	ldd	r24, Y+16	; 0x10
    3a2a:	83 30       	cpi	r24, 0x03	; 3
    3a2c:	f1 f0       	breq	.+60     	; 0x3a6a <evalStats+0xaa>
    3a2e:	84 30       	cpi	r24, 0x04	; 4
    3a30:	3c f4       	brge	.+14     	; 0x3a40 <evalStats+0x80>
    3a32:	81 30       	cpi	r24, 0x01	; 1
    3a34:	91 f0       	breq	.+36     	; 0x3a5a <evalStats+0x9a>
    3a36:	82 30       	cpi	r24, 0x02	; 2
    3a38:	a4 f4       	brge	.+40     	; 0x3a62 <evalStats+0xa2>
    3a3a:	88 23       	and	r24, r24
    3a3c:	51 f0       	breq	.+20     	; 0x3a52 <evalStats+0x92>
    3a3e:	29 c0       	rjmp	.+82     	; 0x3a92 <evalStats+0xd2>
    3a40:	85 30       	cpi	r24, 0x05	; 5
    3a42:	d9 f0       	breq	.+54     	; 0x3a7a <evalStats+0xba>
    3a44:	85 30       	cpi	r24, 0x05	; 5
    3a46:	ac f0       	brlt	.+42     	; 0x3a72 <evalStats+0xb2>
    3a48:	86 30       	cpi	r24, 0x06	; 6
    3a4a:	d9 f0       	breq	.+54     	; 0x3a82 <evalStats+0xc2>
    3a4c:	87 30       	cpi	r24, 0x07	; 7
    3a4e:	09 f5       	brne	.+66     	; 0x3a92 <evalStats+0xd2>
    3a50:	1c c0       	rjmp	.+56     	; 0x3a8a <evalStats+0xca>
    case 0:
      write('P');
    3a52:	80 e5       	ldi	r24, 0x50	; 80
    3a54:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <write>
      break;
    3a58:	1f c0       	rjmp	.+62     	; 0x3a98 <evalStats+0xd8>
    case 1:
      write('F');
    3a5a:	86 e4       	ldi	r24, 0x46	; 70
    3a5c:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <write>
      break;
    3a60:	1b c0       	rjmp	.+54     	; 0x3a98 <evalStats+0xd8>
    case 2:
      write('I');
    3a62:	89 e4       	ldi	r24, 0x49	; 73
    3a64:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <write>
      break;
    3a68:	17 c0       	rjmp	.+46     	; 0x3a98 <evalStats+0xd8>
    case 3:
      write('W');
    3a6a:	87 e5       	ldi	r24, 0x57	; 87
    3a6c:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <write>
      break;
    3a70:	13 c0       	rjmp	.+38     	; 0x3a98 <evalStats+0xd8>
    case 4:
      write('R');
    3a72:	82 e5       	ldi	r24, 0x52	; 82
    3a74:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <write>
      break;
    3a78:	0f c0       	rjmp	.+30     	; 0x3a98 <evalStats+0xd8>
    case 5:
      write('M');
    3a7a:	8d e4       	ldi	r24, 0x4D	; 77
    3a7c:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <write>
      break;
    3a80:	0b c0       	rjmp	.+22     	; 0x3a98 <evalStats+0xd8>
    case 6:
      write('C');
    3a82:	83 e4       	ldi	r24, 0x43	; 67
    3a84:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <write>
      break;
    3a88:	07 c0       	rjmp	.+14     	; 0x3a98 <evalStats+0xd8>
    case 7:
      write('H');
    3a8a:	88 e4       	ldi	r24, 0x48	; 72
    3a8c:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <write>
      break;
    3a90:	03 c0       	rjmp	.+6      	; 0x3a98 <evalStats+0xd8>
    default:
      write('?');
    3a92:	8f e3       	ldi	r24, 0x3F	; 63
    3a94:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <write>
      break;
  }
  if((*PL).inven[(*PL).equip] == -1) write(243); // infinity sign
    3a98:	88 89       	ldd	r24, Y+16	; 0x10
    3a9a:	99 27       	eor	r25, r25
    3a9c:	87 fd       	sbrc	r24, 7
    3a9e:	90 95       	com	r25
    3aa0:	c8 0f       	add	r28, r24
    3aa2:	d9 1f       	adc	r29, r25
    3aa4:	89 89       	ldd	r24, Y+17	; 0x11
    3aa6:	8f 3f       	cpi	r24, 0xFF	; 255
    3aa8:	21 f4       	brne	.+8      	; 0x3ab2 <evalStats+0xf2>
    3aaa:	83 ef       	ldi	r24, 0xF3	; 243
    3aac:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <write>
    3ab0:	09 c0       	rjmp	.+18     	; 0x3ac4 <evalStats+0x104>
  else if((*PL).inven[(*PL).equip] > 9) write(43); // plus sign
    3ab2:	8a 30       	cpi	r24, 0x0A	; 10
    3ab4:	24 f0       	brlt	.+8      	; 0x3abe <evalStats+0xfe>
    3ab6:	8b e2       	ldi	r24, 0x2B	; 43
    3ab8:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <write>
    3abc:	03 c0       	rjmp	.+6      	; 0x3ac4 <evalStats+0x104>
  else write((*PL).inven[(*PL).equip] + '0');
    3abe:	80 5d       	subi	r24, 0xD0	; 208
    3ac0:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <write>
}
    3ac4:	df 91       	pop	r29
    3ac6:	cf 91       	pop	r28
    3ac8:	08 95       	ret

00003aca <map>:

void map() {
    3aca:	ef 92       	push	r14
    3acc:	ff 92       	push	r15
    3ace:	0f 93       	push	r16
    3ad0:	1f 93       	push	r17
    3ad2:	cf 93       	push	r28
    3ad4:	df 93       	push	r29
  if(ROW_SPACE == 1) {
    setCursor(0, 1);
    3ad6:	80 e0       	ldi	r24, 0x00	; 0
    3ad8:	61 e0       	ldi	r22, 0x01	; 1
    3ada:	0e 94 a9 02 	call	0x552	; 0x552 <setCursor>
    print("        ");
    3ade:	82 e7       	ldi	r24, 0x72	; 114
    3ae0:	90 e0       	ldi	r25, 0x00	; 0
    3ae2:	0e 94 d6 02 	call	0x5ac	; 0x5ac <print>
    setCursor(P1.pos[0], 1);
    3ae6:	80 91 13 01 	lds	r24, 0x0113
    3aea:	61 e0       	ldi	r22, 0x01	; 1
    3aec:	0e 94 a9 02 	call	0x552	; 0x552 <setCursor>
    write('1');
    3af0:	81 e3       	ldi	r24, 0x31	; 49
    3af2:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <write>
    setCursor(P2.pos[0], 1);
    3af6:	80 91 2d 01 	lds	r24, 0x012D
    3afa:	61 e0       	ldi	r22, 0x01	; 1
    3afc:	0e 94 a9 02 	call	0x552	; 0x552 <setCursor>
    write('2');
    3b00:	82 e3       	ldi	r24, 0x32	; 50
    3b02:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <write>
    3b06:	c7 e8       	ldi	r28, 0x87	; 135
    3b08:	d1 e0       	ldi	r29, 0x01	; 1
  if((*PL).inven[(*PL).equip] == -1) write(243); // infinity sign
  else if((*PL).inven[(*PL).equip] > 9) write(43); // plus sign
  else write((*PL).inven[(*PL).equip] + '0');
}

void map() {
    3b0a:	0f 2e       	mov	r0, r31
    3b0c:	f7 e1       	ldi	r31, 0x17	; 23
    3b0e:	ef 2e       	mov	r14, r31
    3b10:	f8 e0       	ldi	r31, 0x08	; 8
    3b12:	ff 2e       	mov	r15, r31
    3b14:	f0 2d       	mov	r31, r0
    3b16:	8e 01       	movw	r16, r28
    3b18:	fe 01       	movw	r30, r28
    3b1a:	34 97       	sbiw	r30, 0x04	; 4
    setCursor(P1.pos[0], 1);
    write('1');
    setCursor(P2.pos[0], 1);
    write('2');
    for(char n = 0; n < NUM_OBJ; ++n)
      if(objs[n].exist && objs[n].who == 4) {
    3b1c:	80 81       	ld	r24, Z
    3b1e:	88 23       	and	r24, r24
    3b20:	09 f4       	brne	.+2      	; 0x3b24 <map+0x5a>
    3b22:	41 c0       	rjmp	.+130    	; 0x3ba6 <map+0xdc>
  if((*PL).inven[(*PL).equip] == -1) write(243); // infinity sign
  else if((*PL).inven[(*PL).equip] > 9) write(43); // plus sign
  else write((*PL).inven[(*PL).equip] + '0');
}

void map() {
    3b24:	fe 01       	movw	r30, r28
    3b26:	31 97       	sbiw	r30, 0x01	; 1
    setCursor(P1.pos[0], 1);
    write('1');
    setCursor(P2.pos[0], 1);
    write('2');
    for(char n = 0; n < NUM_OBJ; ++n)
      if(objs[n].exist && objs[n].who == 4) {
    3b28:	80 81       	ld	r24, Z
    3b2a:	84 30       	cpi	r24, 0x04	; 4
    3b2c:	e1 f5       	brne	.+120    	; 0x3ba6 <map+0xdc>
        setCursor(objs[n].pos[0], 1);
    3b2e:	88 81       	ld	r24, Y
    3b30:	61 e0       	ldi	r22, 0x01	; 1
    3b32:	0e 94 a9 02 	call	0x552	; 0x552 <setCursor>
  if((*PL).inven[(*PL).equip] == -1) write(243); // infinity sign
  else if((*PL).inven[(*PL).equip] > 9) write(43); // plus sign
  else write((*PL).inven[(*PL).equip] + '0');
}

void map() {
    3b36:	f8 01       	movw	r30, r16
    3b38:	32 97       	sbiw	r30, 0x02	; 2
    setCursor(P2.pos[0], 1);
    write('2');
    for(char n = 0; n < NUM_OBJ; ++n)
      if(objs[n].exist && objs[n].who == 4) {
        setCursor(objs[n].pos[0], 1);
        switch(objs[n].type) {
    3b3a:	80 81       	ld	r24, Z
    3b3c:	83 30       	cpi	r24, 0x03	; 3
    3b3e:	e1 f0       	breq	.+56     	; 0x3b78 <map+0xae>
    3b40:	84 30       	cpi	r24, 0x04	; 4
    3b42:	28 f4       	brcc	.+10     	; 0x3b4e <map+0x84>
    3b44:	81 30       	cpi	r24, 0x01	; 1
    3b46:	81 f0       	breq	.+32     	; 0x3b68 <map+0x9e>
    3b48:	82 30       	cpi	r24, 0x02	; 2
    3b4a:	90 f4       	brcc	.+36     	; 0x3b70 <map+0xa6>
    3b4c:	09 c0       	rjmp	.+18     	; 0x3b60 <map+0x96>
    3b4e:	85 30       	cpi	r24, 0x05	; 5
    3b50:	d9 f0       	breq	.+54     	; 0x3b88 <map+0xbe>
    3b52:	85 30       	cpi	r24, 0x05	; 5
    3b54:	a8 f0       	brcs	.+42     	; 0x3b80 <map+0xb6>
    3b56:	86 30       	cpi	r24, 0x06	; 6
    3b58:	d9 f0       	breq	.+54     	; 0x3b90 <map+0xc6>
    3b5a:	87 30       	cpi	r24, 0x07	; 7
    3b5c:	09 f5       	brne	.+66     	; 0x3ba0 <map+0xd6>
    3b5e:	1c c0       	rjmp	.+56     	; 0x3b98 <map+0xce>
          case 0:
            write('P');
    3b60:	80 e5       	ldi	r24, 0x50	; 80
    3b62:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <write>
            break;
    3b66:	1f c0       	rjmp	.+62     	; 0x3ba6 <map+0xdc>
          case 1:
            write('F');
    3b68:	86 e4       	ldi	r24, 0x46	; 70
    3b6a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <write>
            break;
    3b6e:	1b c0       	rjmp	.+54     	; 0x3ba6 <map+0xdc>
          case 2:
            write('I');
    3b70:	89 e4       	ldi	r24, 0x49	; 73
    3b72:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <write>
            break;
    3b76:	17 c0       	rjmp	.+46     	; 0x3ba6 <map+0xdc>
          case 3:
            write('W');
    3b78:	87 e5       	ldi	r24, 0x57	; 87
    3b7a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <write>
            break;
    3b7e:	13 c0       	rjmp	.+38     	; 0x3ba6 <map+0xdc>
          case 4:
            write('R');
    3b80:	82 e5       	ldi	r24, 0x52	; 82
    3b82:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <write>
            break;
    3b86:	0f c0       	rjmp	.+30     	; 0x3ba6 <map+0xdc>
          case 5:
            write('M');
    3b88:	8d e4       	ldi	r24, 0x4D	; 77
    3b8a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <write>
            break;
    3b8e:	0b c0       	rjmp	.+22     	; 0x3ba6 <map+0xdc>
          case 6:
            write('C');
    3b90:	83 e4       	ldi	r24, 0x43	; 67
    3b92:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <write>
            break;
    3b96:	07 c0       	rjmp	.+14     	; 0x3ba6 <map+0xdc>
          case 7:
            write('H');
    3b98:	88 e4       	ldi	r24, 0x48	; 72
    3b9a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <write>
            break;
    3b9e:	03 c0       	rjmp	.+6      	; 0x3ba6 <map+0xdc>
          default:
            write('?');
    3ba0:	8f e3       	ldi	r24, 0x3F	; 63
    3ba2:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <write>
            break;
    3ba6:	2e 96       	adiw	r28, 0x0e	; 14
    print("        ");
    setCursor(P1.pos[0], 1);
    write('1');
    setCursor(P2.pos[0], 1);
    write('2');
    for(char n = 0; n < NUM_OBJ; ++n)
    3ba8:	ce 15       	cp	r28, r14
    3baa:	df 05       	cpc	r29, r15
    3bac:	09 f0       	breq	.+2      	; 0x3bb0 <map+0xe6>
    3bae:	b3 cf       	rjmp	.-154    	; 0x3b16 <map+0x4c>
    setCursor(P1.pos[0] + COL_SPACE, P1.pos[3] );
    write('1');
    setCursor(P2.pos[0] + COL_SPACE, P2.pos[3]);
    write('2');  
  }
}
    3bb0:	df 91       	pop	r29
    3bb2:	cf 91       	pop	r28
    3bb4:	1f 91       	pop	r17
    3bb6:	0f 91       	pop	r16
    3bb8:	ff 90       	pop	r15
    3bba:	ef 90       	pop	r14
    3bbc:	08 95       	ret

00003bbe <LCD_Tick>:
  return Sys_State;
} 

// LCD SM
enum LCD_States { LCD_init, LCD_update, LCD_pause } LCD_State;
int LCD_Tick(int LCD_State) {
    3bbe:	cf 93       	push	r28
    3bc0:	df 93       	push	r29
    3bc2:	ec 01       	movw	r28, r24
  static unsigned char i;
  switch(LCD_State) { // Transitions
    3bc4:	00 97       	sbiw	r24, 0x00	; 0
    3bc6:	69 f0       	breq	.+26     	; 0x3be2 <LCD_Tick+0x24>
    3bc8:	81 30       	cpi	r24, 0x01	; 1
    3bca:	91 05       	cpc	r25, r1
    3bcc:	a9 f1       	breq	.+106    	; 0x3c38 <LCD_Tick+0x7a>
    3bce:	8f ef       	ldi	r24, 0xFF	; 255
    3bd0:	cf 3f       	cpi	r28, 0xFF	; 255
    3bd2:	d8 07       	cpc	r29, r24
    3bd4:	69 f4       	brne	.+26     	; 0x3bf0 <LCD_Tick+0x32>
    case -1:
      LCD_State = LCD_init;
      cmdWrite(0x01);
    3bd6:	81 e0       	ldi	r24, 0x01	; 1
    3bd8:	0e 94 6f 02 	call	0x4de	; 0x4de <cmdWrite>
      i = 0;
    3bdc:	10 92 d4 00 	sts	0x00D4, r1
      break;
    3be0:	28 c0       	rjmp	.+80     	; 0x3c32 <LCD_Tick+0x74>
    case LCD_init:
      if (i<100)
    3be2:	80 91 d4 00 	lds	r24, 0x00D4
    3be6:	84 36       	cpi	r24, 0x64	; 100
    3be8:	20 f1       	brcs	.+72     	; 0x3c32 <LCD_Tick+0x74>
        LCD_State = LCD_init;
      else {
        LCD_State = LCD_update;
        initLCD();
    3bea:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <initLCD>
    3bee:	24 c0       	rjmp	.+72     	; 0x3c38 <LCD_Tick+0x7a>
      LCD_State = LCD_update;
      break;
    default:
      break;
  } // Transitions end
  switch(LCD_State) { // State actions
    3bf0:	20 97       	sbiw	r28, 0x00	; 0
    3bf2:	21 f0       	breq	.+8      	; 0x3bfc <LCD_Tick+0x3e>
    3bf4:	c1 30       	cpi	r28, 0x01	; 1
    3bf6:	d1 05       	cpc	r29, r1
    3bf8:	b9 f4       	brne	.+46     	; 0x3c28 <LCD_Tick+0x6a>
    3bfa:	06 c0       	rjmp	.+12     	; 0x3c08 <LCD_Tick+0x4a>
    case LCD_init:
      i++;
    3bfc:	80 91 d4 00 	lds	r24, 0x00D4
    3c00:	8f 5f       	subi	r24, 0xFF	; 255
    3c02:	80 93 d4 00 	sts	0x00D4, r24
      break;
    3c06:	10 c0       	rjmp	.+32     	; 0x3c28 <LCD_Tick+0x6a>
    case LCD_update:
      if(pause == 0) {
    3c08:	80 91 d1 00 	lds	r24, 0x00D1
    3c0c:	88 23       	and	r24, r24
    3c0e:	61 f4       	brne	.+24     	; 0x3c28 <LCD_Tick+0x6a>
        evalField();
    3c10:	0e 94 87 09 	call	0x130e	; 0x130e <evalField>
        evalStats(&P1);
    3c14:	8f e0       	ldi	r24, 0x0F	; 15
    3c16:	91 e0       	ldi	r25, 0x01	; 1
    3c18:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <evalStats>
        evalStats(&P2);
    3c1c:	89 e2       	ldi	r24, 0x29	; 41
    3c1e:	91 e0       	ldi	r25, 0x01	; 1
    3c20:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <evalStats>
        map();
    3c24:	0e 94 65 1d 	call	0x3aca	; 0x3aca <map>
      break;
    default:
      break;
  } // State actions end
  return LCD_State;
} 
    3c28:	8c 2f       	mov	r24, r28
    3c2a:	9d 2f       	mov	r25, r29
    3c2c:	df 91       	pop	r29
    3c2e:	cf 91       	pop	r28
    3c30:	08 95       	ret
  return Sys_State;
} 

// LCD SM
enum LCD_States { LCD_init, LCD_update, LCD_pause } LCD_State;
int LCD_Tick(int LCD_State) {
    3c32:	c0 e0       	ldi	r28, 0x00	; 0
    3c34:	d0 e0       	ldi	r29, 0x00	; 0
    3c36:	e2 cf       	rjmp	.-60     	; 0x3bfc <LCD_Tick+0x3e>
    3c38:	c1 e0       	ldi	r28, 0x01	; 1
    3c3a:	d0 e0       	ldi	r29, 0x00	; 0
    3c3c:	e5 cf       	rjmp	.-54     	; 0x3c08 <LCD_Tick+0x4a>

00003c3e <victory>:
    write('2');  
  }
}

void victory(char who) {
  switch(who) {
    3c3e:	81 30       	cpi	r24, 0x01	; 1
    3c40:	71 f0       	breq	.+28     	; 0x3c5e <victory+0x20>
    3c42:	81 30       	cpi	r24, 0x01	; 1
    3c44:	18 f0       	brcs	.+6      	; 0x3c4c <victory+0xe>
    3c46:	82 30       	cpi	r24, 0x02	; 2
    3c48:	d9 f4       	brne	.+54     	; 0x3c80 <victory+0x42>
    3c4a:	12 c0       	rjmp	.+36     	; 0x3c70 <victory+0x32>
    case 0:
      setCursor(0, 1);
    3c4c:	80 e0       	ldi	r24, 0x00	; 0
    3c4e:	61 e0       	ldi	r22, 0x01	; 1
    3c50:	0e 94 a9 02 	call	0x552	; 0x552 <setCursor>
      print("DRAW    ");
    3c54:	8b e7       	ldi	r24, 0x7B	; 123
    3c56:	90 e0       	ldi	r25, 0x00	; 0
    3c58:	0e 94 d6 02 	call	0x5ac	; 0x5ac <print>
      break;
    3c5c:	08 95       	ret
    case 1:
      setCursor(0, 1);
    3c5e:	80 e0       	ldi	r24, 0x00	; 0
    3c60:	61 e0       	ldi	r22, 0x01	; 1
    3c62:	0e 94 a9 02 	call	0x552	; 0x552 <setCursor>
      print("P1 WINS!");
    3c66:	84 e8       	ldi	r24, 0x84	; 132
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    3c6a:	0e 94 d6 02 	call	0x5ac	; 0x5ac <print>
      break;
    3c6e:	08 95       	ret
    case 2:
      setCursor(0, 1);
    3c70:	80 e0       	ldi	r24, 0x00	; 0
    3c72:	61 e0       	ldi	r22, 0x01	; 1
    3c74:	0e 94 a9 02 	call	0x552	; 0x552 <setCursor>
      print("P2 WINS!");
    3c78:	8d e8       	ldi	r24, 0x8D	; 141
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	0e 94 d6 02 	call	0x5ac	; 0x5ac <print>
    3c80:	08 95       	ret

00003c82 <Sys_Tick>:
// System SM, Also sets LCD_State on player win
enum Sys_States { Sys_init, Sys_boot, Sys_seed, Sys_play, Sys_reset, Sys_reset2, Sys_P1win, Sys_P2win, Sys_tie } Sys_State;
int Sys_Tick(int Sys_State) {
  static bool seeded;
  static unsigned char seed_val;
  switch(Sys_State) { // Transitions
    3c82:	83 30       	cpi	r24, 0x03	; 3
    3c84:	91 05       	cpc	r25, r1
    3c86:	09 f4       	brne	.+2      	; 0x3c8a <Sys_Tick+0x8>
    3c88:	6c c0       	rjmp	.+216    	; 0x3d62 <Sys_Tick+0xe0>
    3c8a:	84 30       	cpi	r24, 0x04	; 4
    3c8c:	91 05       	cpc	r25, r1
    3c8e:	9c f4       	brge	.+38     	; 0x3cb6 <Sys_Tick+0x34>
    3c90:	00 97       	sbiw	r24, 0x00	; 0
    3c92:	79 f1       	breq	.+94     	; 0x3cf2 <Sys_Tick+0x70>
    3c94:	18 16       	cp	r1, r24
    3c96:	19 06       	cpc	r1, r25
    3c98:	34 f0       	brlt	.+12     	; 0x3ca6 <Sys_Tick+0x24>
    3c9a:	2f ef       	ldi	r18, 0xFF	; 255
    3c9c:	8f 3f       	cpi	r24, 0xFF	; 255
    3c9e:	92 07       	cpc	r25, r18
    3ca0:	09 f0       	breq	.+2      	; 0x3ca4 <Sys_Tick+0x22>
    3ca2:	a0 c0       	rjmp	.+320    	; 0x3de4 <Sys_Tick+0x162>
    3ca4:	21 c0       	rjmp	.+66     	; 0x3ce8 <Sys_Tick+0x66>
    3ca6:	81 30       	cpi	r24, 0x01	; 1
    3ca8:	91 05       	cpc	r25, r1
    3caa:	49 f1       	breq	.+82     	; 0x3cfe <Sys_Tick+0x7c>
    3cac:	82 30       	cpi	r24, 0x02	; 2
    3cae:	91 05       	cpc	r25, r1
    3cb0:	09 f0       	breq	.+2      	; 0x3cb4 <Sys_Tick+0x32>
    3cb2:	98 c0       	rjmp	.+304    	; 0x3de4 <Sys_Tick+0x162>
    3cb4:	2d c0       	rjmp	.+90     	; 0x3d10 <Sys_Tick+0x8e>
    3cb6:	86 30       	cpi	r24, 0x06	; 6
    3cb8:	91 05       	cpc	r25, r1
    3cba:	09 f4       	brne	.+2      	; 0x3cbe <Sys_Tick+0x3c>
    3cbc:	72 c0       	rjmp	.+228    	; 0x3da2 <Sys_Tick+0x120>
    3cbe:	87 30       	cpi	r24, 0x07	; 7
    3cc0:	91 05       	cpc	r25, r1
    3cc2:	4c f4       	brge	.+18     	; 0x3cd6 <Sys_Tick+0x54>
    3cc4:	84 30       	cpi	r24, 0x04	; 4
    3cc6:	91 05       	cpc	r25, r1
    3cc8:	09 f4       	brne	.+2      	; 0x3ccc <Sys_Tick+0x4a>
    3cca:	63 c0       	rjmp	.+198    	; 0x3d92 <Sys_Tick+0x110>
    3ccc:	85 30       	cpi	r24, 0x05	; 5
    3cce:	91 05       	cpc	r25, r1
    3cd0:	09 f0       	breq	.+2      	; 0x3cd4 <Sys_Tick+0x52>
    3cd2:	88 c0       	rjmp	.+272    	; 0x3de4 <Sys_Tick+0x162>
    3cd4:	8c c0       	rjmp	.+280    	; 0x3dee <Sys_Tick+0x16c>
    3cd6:	87 30       	cpi	r24, 0x07	; 7
    3cd8:	91 05       	cpc	r25, r1
    3cda:	09 f4       	brne	.+2      	; 0x3cde <Sys_Tick+0x5c>
    3cdc:	6d c0       	rjmp	.+218    	; 0x3db8 <Sys_Tick+0x136>
    3cde:	88 30       	cpi	r24, 0x08	; 8
    3ce0:	91 05       	cpc	r25, r1
    3ce2:	09 f0       	breq	.+2      	; 0x3ce6 <Sys_Tick+0x64>
    3ce4:	7f c0       	rjmp	.+254    	; 0x3de4 <Sys_Tick+0x162>
    3ce6:	73 c0       	rjmp	.+230    	; 0x3dce <Sys_Tick+0x14c>
    case -1:
      Sys_State = Sys_boot;
      pause = 0;
      seeded = false;
    3ce8:	10 92 d2 00 	sts	0x00D2, r1
      seed_val = 0;
    3cec:	10 92 d3 00 	sts	0x00D3, r1
      break;
    3cf0:	81 c0       	rjmp	.+258    	; 0x3df4 <Sys_Tick+0x172>
    case Sys_init:
      if(pause == 0) {
    3cf2:	20 91 d1 00 	lds	r18, 0x00D1
    3cf6:	22 23       	and	r18, r18
    3cf8:	09 f4       	brne	.+2      	; 0x3cfc <Sys_Tick+0x7a>
    3cfa:	7c c0       	rjmp	.+248    	; 0x3df4 <Sys_Tick+0x172>
    3cfc:	08 95       	ret
        pause = 1;
      } else 
        Sys_State = Sys_init;
      break;
    case Sys_boot:
      if(seeded == false) {
    3cfe:	80 91 d2 00 	lds	r24, 0x00D2
    3d02:	88 23       	and	r24, r24
    3d04:	09 f0       	breq	.+2      	; 0x3d08 <Sys_Tick+0x86>
    3d06:	8b c0       	rjmp	.+278    	; 0x3e1e <Sys_Tick+0x19c>
        pause = 1;
    3d08:	81 e0       	ldi	r24, 0x01	; 1
    3d0a:	80 93 d1 00 	sts	0x00D1, r24
    3d0e:	7f c0       	rjmp	.+254    	; 0x3e0e <Sys_Tick+0x18c>
        Sys_State = Sys_play;
        pause = 0;
      }
      break;
    case Sys_seed:
      if(GetBit(~PINB,0)) {
    3d10:	86 b3       	in	r24, 0x16	; 22
    3d12:	80 95       	com	r24
    3d14:	60 e0       	ldi	r22, 0x00	; 0
    3d16:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
    3d1a:	88 23       	and	r24, r24
    3d1c:	89 f0       	breq	.+34     	; 0x3d40 <Sys_Tick+0xbe>
        Sys_State = Sys_play;
        srand(seed_val);
    3d1e:	80 91 d3 00 	lds	r24, 0x00D3
    3d22:	90 e0       	ldi	r25, 0x00	; 0
    3d24:	0e 94 a4 20 	call	0x4148	; 0x4148 <srand>
        pause = 0;
        seeded = true;
    3d28:	81 e0       	ldi	r24, 0x01	; 1
    3d2a:	80 93 d2 00 	sts	0x00D2, r24
        setCursor(0, 0);
    3d2e:	80 e0       	ldi	r24, 0x00	; 0
    3d30:	60 e0       	ldi	r22, 0x00	; 0
    3d32:	0e 94 a9 02 	call	0x552	; 0x552 <setCursor>
        print("Seeded");
    3d36:	86 e9       	ldi	r24, 0x96	; 150
    3d38:	90 e0       	ldi	r25, 0x00	; 0
    3d3a:	0e 94 d6 02 	call	0x5ac	; 0x5ac <print>
    3d3e:	6f c0       	rjmp	.+222    	; 0x3e1e <Sys_Tick+0x19c>
      }
      else {
        Sys_State = Sys_seed;
        setCursor(0, 0);
    3d40:	80 e0       	ldi	r24, 0x00	; 0
    3d42:	60 e0       	ldi	r22, 0x00	; 0
    3d44:	0e 94 a9 02 	call	0x552	; 0x552 <setCursor>
        print("Press Reset");
    3d48:	8d e9       	ldi	r24, 0x9D	; 157
    3d4a:	90 e0       	ldi	r25, 0x00	; 0
    3d4c:	0e 94 d6 02 	call	0x5ac	; 0x5ac <print>
        setCursor(0, 1);
    3d50:	80 e0       	ldi	r24, 0x00	; 0
    3d52:	61 e0       	ldi	r22, 0x01	; 1
    3d54:	0e 94 a9 02 	call	0x552	; 0x552 <setCursor>
        print("to Begin");
    3d58:	89 ea       	ldi	r24, 0xA9	; 169
    3d5a:	90 e0       	ldi	r25, 0x00	; 0
    3d5c:	0e 94 d6 02 	call	0x5ac	; 0x5ac <print>
    3d60:	56 c0       	rjmp	.+172    	; 0x3e0e <Sys_Tick+0x18c>
      }
      break;
    case Sys_play:
      if(P1.life == 0 && P2.life == 0)
    3d62:	80 91 1c 01 	lds	r24, 0x011C
    3d66:	88 23       	and	r24, r24
    3d68:	31 f4       	brne	.+12     	; 0x3d76 <Sys_Tick+0xf4>
    3d6a:	80 91 36 01 	lds	r24, 0x0136
    3d6e:	88 23       	and	r24, r24
    3d70:	09 f4       	brne	.+2      	; 0x3d74 <Sys_Tick+0xf2>
    3d72:	6c c0       	rjmp	.+216    	; 0x3e4c <Sys_Tick+0x1ca>
    3d74:	65 c0       	rjmp	.+202    	; 0x3e40 <Sys_Tick+0x1be>
        Sys_State = Sys_tie;  
      else if(P1.life == 0)
        Sys_State = Sys_P2win;  
      else if(P2.life == 0)
    3d76:	80 91 36 01 	lds	r24, 0x0136
    3d7a:	88 23       	and	r24, r24
    3d7c:	09 f4       	brne	.+2      	; 0x3d80 <Sys_Tick+0xfe>
    3d7e:	5a c0       	rjmp	.+180    	; 0x3e34 <Sys_Tick+0x1b2>
        Sys_State = Sys_P1win;  
      else if(GetBit(~PINB,0)) // if B0, start reset
    3d80:	86 b3       	in	r24, 0x16	; 22
    3d82:	80 95       	com	r24
    3d84:	60 e0       	ldi	r22, 0x00	; 0
    3d86:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
    3d8a:	88 23       	and	r24, r24
    3d8c:	09 f0       	breq	.+2      	; 0x3d90 <Sys_Tick+0x10e>
    3d8e:	4c c0       	rjmp	.+152    	; 0x3e28 <Sys_Tick+0x1a6>
    3d90:	46 c0       	rjmp	.+140    	; 0x3e1e <Sys_Tick+0x19c>
        Sys_State = Sys_reset;
      else
        Sys_State = Sys_play;
      break;
    case Sys_reset:
      if(!GetBit(~PINB,0)) // if !B0, confirm reset
    3d92:	86 b3       	in	r24, 0x16	; 22
    3d94:	80 95       	com	r24
    3d96:	60 e0       	ldi	r22, 0x00	; 0
    3d98:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
    3d9c:	88 23       	and	r24, r24
    3d9e:	11 f1       	breq	.+68     	; 0x3de4 <Sys_Tick+0x162>
    3da0:	43 c0       	rjmp	.+134    	; 0x3e28 <Sys_Tick+0x1a6>
      break;
    case Sys_reset2:
      Sys_State = Sys_init;
      break;
    case Sys_P1win:
      pause = 1;
    3da2:	81 e0       	ldi	r24, 0x01	; 1
    3da4:	80 93 d1 00 	sts	0x00D1, r24
      if(GetBit(~PINB,0)) // if B0, start reset
    3da8:	86 b3       	in	r24, 0x16	; 22
    3daa:	80 95       	com	r24
    3dac:	60 e0       	ldi	r22, 0x00	; 0
    3dae:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
    3db2:	88 23       	and	r24, r24
    3db4:	c9 f5       	brne	.+114    	; 0x3e28 <Sys_Tick+0x1a6>
    3db6:	3e c0       	rjmp	.+124    	; 0x3e34 <Sys_Tick+0x1b2>
        Sys_State = Sys_reset;
      break;
    case Sys_P2win:
      pause = 1;
    3db8:	81 e0       	ldi	r24, 0x01	; 1
    3dba:	80 93 d1 00 	sts	0x00D1, r24
      if(GetBit(~PINB,0)) // if B0, start reset
    3dbe:	86 b3       	in	r24, 0x16	; 22
    3dc0:	80 95       	com	r24
    3dc2:	60 e0       	ldi	r22, 0x00	; 0
    3dc4:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
    3dc8:	88 23       	and	r24, r24
    3dca:	71 f5       	brne	.+92     	; 0x3e28 <Sys_Tick+0x1a6>
    3dcc:	39 c0       	rjmp	.+114    	; 0x3e40 <Sys_Tick+0x1be>
        Sys_State = Sys_reset;
      break;
    case Sys_tie:
      pause = 1;
    3dce:	81 e0       	ldi	r24, 0x01	; 1
    3dd0:	80 93 d1 00 	sts	0x00D1, r24
      if(GetBit(~PINB,0)) // if B0, start reset
    3dd4:	86 b3       	in	r24, 0x16	; 22
    3dd6:	80 95       	com	r24
    3dd8:	60 e0       	ldi	r22, 0x00	; 0
    3dda:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
    3dde:	88 23       	and	r24, r24
    3de0:	19 f5       	brne	.+70     	; 0x3e28 <Sys_Tick+0x1a6>
    3de2:	34 c0       	rjmp	.+104    	; 0x3e4c <Sys_Tick+0x1ca>
      break;
    case Sys_reset:
      pause = 1;
      break;
    case Sys_reset2:
      pause = 0;
    3de4:	10 92 d1 00 	sts	0x00D1, r1
      break;
    3de8:	85 e0       	ldi	r24, 0x05	; 5
    3dea:	90 e0       	ldi	r25, 0x00	; 0
    3dec:	08 95       	ret
        Sys_State = Sys_reset2;
      else 
        Sys_State = Sys_reset;
      break;
    case Sys_reset2:
      Sys_State = Sys_init;
    3dee:	80 e0       	ldi	r24, 0x00	; 0
    3df0:	90 e0       	ldi	r25, 0x00	; 0
      break;
    default:
      break;
  } // State actions end
  return Sys_State;
} 
    3df2:	08 95       	ret
  } // Transitions end
  switch(Sys_State) { // State actions
    case Sys_init:
      break;
    case Sys_boot:
      initObjs();
    3df4:	0e 94 03 03 	call	0x606	; 0x606 <initObjs>
      initPlayers();
    3df8:	0e 94 20 03 	call	0x640	; 0x640 <initPlayers>
      setCursor(0, 0); 
    3dfc:	80 e0       	ldi	r24, 0x00	; 0
    3dfe:	60 e0       	ldi	r22, 0x00	; 0
    3e00:	0e 94 a9 02 	call	0x552	; 0x552 <setCursor>
      pause = 0;
    3e04:	10 92 d1 00 	sts	0x00D1, r1
      break;
    3e08:	81 e0       	ldi	r24, 0x01	; 1
    3e0a:	90 e0       	ldi	r25, 0x00	; 0
    3e0c:	08 95       	ret
    case Sys_seed:
      ++seed_val;
    3e0e:	80 91 d3 00 	lds	r24, 0x00D3
    3e12:	8f 5f       	subi	r24, 0xFF	; 255
    3e14:	80 93 d3 00 	sts	0x00D3, r24
      break;
    3e18:	82 e0       	ldi	r24, 0x02	; 2
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	08 95       	ret
    case Sys_play:
      pause = 0;
    3e1e:	10 92 d1 00 	sts	0x00D1, r1
      break;
    3e22:	83 e0       	ldi	r24, 0x03	; 3
    3e24:	90 e0       	ldi	r25, 0x00	; 0
    3e26:	08 95       	ret
    case Sys_reset:
      pause = 1;
    3e28:	81 e0       	ldi	r24, 0x01	; 1
    3e2a:	80 93 d1 00 	sts	0x00D1, r24
      break;
    3e2e:	84 e0       	ldi	r24, 0x04	; 4
    3e30:	90 e0       	ldi	r25, 0x00	; 0
    3e32:	08 95       	ret
    case Sys_reset2:
      pause = 0;
      break;
    case Sys_P1win:
      victory(1);
    3e34:	81 e0       	ldi	r24, 0x01	; 1
    3e36:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <victory>
      break;
    3e3a:	86 e0       	ldi	r24, 0x06	; 6
    3e3c:	90 e0       	ldi	r25, 0x00	; 0
    3e3e:	08 95       	ret
    case Sys_P2win:
      victory(2);
    3e40:	82 e0       	ldi	r24, 0x02	; 2
    3e42:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <victory>
      break;
    3e46:	87 e0       	ldi	r24, 0x07	; 7
    3e48:	90 e0       	ldi	r25, 0x00	; 0
    3e4a:	08 95       	ret
    case Sys_tie:
      victory(0);
    3e4c:	80 e0       	ldi	r24, 0x00	; 0
    3e4e:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <victory>
      break;
    3e52:	88 e0       	ldi	r24, 0x08	; 8
    3e54:	90 e0       	ldi	r25, 0x00	; 0
    3e56:	08 95       	ret

00003e58 <main>:
  return Item_State;
}

//============================================================================================================================================

int main() {
    3e58:	cf 93       	push	r28
    3e5a:	df 93       	push	r29
    3e5c:	cd b7       	in	r28, 0x3d	; 61
    3e5e:	de b7       	in	r29, 0x3e	; 62
    3e60:	2a 97       	sbiw	r28, 0x0a	; 10
    3e62:	0f b6       	in	r0, 0x3f	; 63
    3e64:	f8 94       	cli
    3e66:	de bf       	out	0x3e, r29	; 62
    3e68:	0f be       	out	0x3f, r0	; 63
    3e6a:	cd bf       	out	0x3d, r28	; 61
  DDRA = 0xF0; PORTA = 0x0F; // input from Keypad1
    3e6c:	90 ef       	ldi	r25, 0xF0	; 240
    3e6e:	9a bb       	out	0x1a, r25	; 26
    3e70:	8f e0       	ldi	r24, 0x0F	; 15
    3e72:	8b bb       	out	0x1b, r24	; 27
  DDRB = 0xFE; PORTB = 0x01; // input B0-reset, out-B1/B2-speaker(?)
    3e74:	2e ef       	ldi	r18, 0xFE	; 254
    3e76:	27 bb       	out	0x17, r18	; 23
    3e78:	21 e0       	ldi	r18, 0x01	; 1
    3e7a:	28 bb       	out	0x18, r18	; 24
  DDRC = 0xF0; PORTC = 0x0F; // input from Keypad2
    3e7c:	94 bb       	out	0x14, r25	; 20
    3e7e:	85 bb       	out	0x15, r24	; 21
  DDRD = 0xFF; PORTD = 0x00; // output to LCD
    3e80:	8f ef       	ldi	r24, 0xFF	; 255
    3e82:	81 bb       	out	0x11, r24	; 17
    3e84:	12 ba       	out	0x12, r1	; 18
  
  static task task_System, task_LCD, task_Player1, task_Player2, task_Item;
  player *player[] = {&P1, &P2};
  task *tasks[] = {&task_System, &task_Player1, &task_Player2, &task_LCD, &task_Item};
    3e86:	de 01       	movw	r26, r28
    3e88:	11 96       	adiw	r26, 0x01	; 1
    3e8a:	e2 eb       	ldi	r30, 0xB2	; 178
    3e8c:	f0 e0       	ldi	r31, 0x00	; 0
    3e8e:	8a e0       	ldi	r24, 0x0A	; 10
    3e90:	01 90       	ld	r0, Z+
    3e92:	0d 92       	st	X+, r0
    3e94:	81 50       	subi	r24, 0x01	; 1
    3e96:	e1 f7       	brne	.-8      	; 0x3e90 <main+0x38>
  int numTasks = sizeof(tasks)/sizeof(task*);

  task_System.state = -1;
    3e98:	4f ef       	ldi	r20, 0xFF	; 255
    3e9a:	40 93 d8 00 	sts	0x00D8, r20
  task_System.period = GAME_PER;
    3e9e:	88 e0       	ldi	r24, 0x08	; 8
    3ea0:	90 e0       	ldi	r25, 0x00	; 0
    3ea2:	a0 e0       	ldi	r26, 0x00	; 0
    3ea4:	b0 e0       	ldi	r27, 0x00	; 0
    3ea6:	80 93 d9 00 	sts	0x00D9, r24
    3eaa:	90 93 da 00 	sts	0x00DA, r25
    3eae:	a0 93 db 00 	sts	0x00DB, r26
    3eb2:	b0 93 dc 00 	sts	0x00DC, r27
  task_System.elapsedTime = task_System.period;
    3eb6:	80 93 dd 00 	sts	0x00DD, r24
    3eba:	90 93 de 00 	sts	0x00DE, r25
    3ebe:	a0 93 df 00 	sts	0x00DF, r26
    3ec2:	b0 93 e0 00 	sts	0x00E0, r27
  task_System.TickFct = &Sys_Tick;
    3ec6:	21 e4       	ldi	r18, 0x41	; 65
    3ec8:	3e e1       	ldi	r19, 0x1E	; 30
    3eca:	30 93 e2 00 	sts	0x00E2, r19
    3ece:	20 93 e1 00 	sts	0x00E1, r18

  task_LCD.state = -1;
    3ed2:	40 93 e3 00 	sts	0x00E3, r20
  task_LCD.period = GAME_PER;
    3ed6:	80 93 e4 00 	sts	0x00E4, r24
    3eda:	90 93 e5 00 	sts	0x00E5, r25
    3ede:	a0 93 e6 00 	sts	0x00E6, r26
    3ee2:	b0 93 e7 00 	sts	0x00E7, r27
  task_LCD.elapsedTime = task_LCD.period;
    3ee6:	80 93 e8 00 	sts	0x00E8, r24
    3eea:	90 93 e9 00 	sts	0x00E9, r25
    3eee:	a0 93 ea 00 	sts	0x00EA, r26
    3ef2:	b0 93 eb 00 	sts	0x00EB, r27
  task_LCD.TickFct = &LCD_Tick;
    3ef6:	2f ed       	ldi	r18, 0xDF	; 223
    3ef8:	3d e1       	ldi	r19, 0x1D	; 29
    3efa:	30 93 ed 00 	sts	0x00ED, r19
    3efe:	20 93 ec 00 	sts	0x00EC, r18

  task_Player1.state = -1;
    3f02:	40 93 ee 00 	sts	0x00EE, r20
  task_Player1.period = GAME_PER;
    3f06:	80 93 ef 00 	sts	0x00EF, r24
    3f0a:	90 93 f0 00 	sts	0x00F0, r25
    3f0e:	a0 93 f1 00 	sts	0x00F1, r26
    3f12:	b0 93 f2 00 	sts	0x00F2, r27
  task_Player1.elapsedTime = task_Player1.period;
    3f16:	80 93 f3 00 	sts	0x00F3, r24
    3f1a:	90 93 f4 00 	sts	0x00F4, r25
    3f1e:	a0 93 f5 00 	sts	0x00F5, r26
    3f22:	b0 93 f6 00 	sts	0x00F6, r27
  task_Player1.TickFct = &P1_Tick;
    3f26:	2f ec       	ldi	r18, 0xCF	; 207
    3f28:	3c e1       	ldi	r19, 0x1C	; 28
    3f2a:	30 93 f8 00 	sts	0x00F8, r19
    3f2e:	20 93 f7 00 	sts	0x00F7, r18

  task_Player2.state = -1;
    3f32:	40 93 f9 00 	sts	0x00F9, r20
  task_Player2.period = GAME_PER;
    3f36:	80 93 fa 00 	sts	0x00FA, r24
    3f3a:	90 93 fb 00 	sts	0x00FB, r25
    3f3e:	a0 93 fc 00 	sts	0x00FC, r26
    3f42:	b0 93 fd 00 	sts	0x00FD, r27
  task_Player2.elapsedTime = task_Player2.period;
    3f46:	80 93 fe 00 	sts	0x00FE, r24
    3f4a:	90 93 ff 00 	sts	0x00FF, r25
    3f4e:	a0 93 00 01 	sts	0x0100, r26
    3f52:	b0 93 01 01 	sts	0x0101, r27
  task_Player2.TickFct = &P2_Tick;
    3f56:	2e eb       	ldi	r18, 0xBE	; 190
    3f58:	3c e1       	ldi	r19, 0x1C	; 28
    3f5a:	30 93 03 01 	sts	0x0103, r19
    3f5e:	20 93 02 01 	sts	0x0102, r18

  task_Item.state = -1;
    3f62:	40 93 04 01 	sts	0x0104, r20
  task_Item.period = GAME_PER;
    3f66:	80 93 05 01 	sts	0x0105, r24
    3f6a:	90 93 06 01 	sts	0x0106, r25
    3f6e:	a0 93 07 01 	sts	0x0107, r26
    3f72:	b0 93 08 01 	sts	0x0108, r27
  task_Item.elapsedTime = task_Item.period;
    3f76:	80 93 09 01 	sts	0x0109, r24
    3f7a:	90 93 0a 01 	sts	0x010A, r25
    3f7e:	a0 93 0b 01 	sts	0x010B, r26
    3f82:	b0 93 0c 01 	sts	0x010C, r27
  task_Item.TickFct = &Item_Tick;
    3f86:	87 ed       	ldi	r24, 0xD7	; 215
    3f88:	9e e0       	ldi	r25, 0x0E	; 14
    3f8a:	90 93 0e 01 	sts	0x010E, r25
    3f8e:	80 93 0d 01 	sts	0x010D, r24

  //============================================================================================================================================

  TimerSet(CLK_PER);
    3f92:	68 e0       	ldi	r22, 0x08	; 8
    3f94:	70 e0       	ldi	r23, 0x00	; 0
    3f96:	80 e0       	ldi	r24, 0x00	; 0
    3f98:	90 e0       	ldi	r25, 0x00	; 0
    3f9a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <TimerSet>
  TimerOn();
    3f9e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <TimerOn>
  
  unsigned short i; // Scheduler for-loop iterator
  while(1) {
    // Scheduler code
    for ( i = 0; i < numTasks; i++ ) {
    3fa2:	00 e0       	ldi	r16, 0x00	; 0
    3fa4:	10 e0       	ldi	r17, 0x00	; 0
    3fa6:	cc 24       	eor	r12, r12
    3fa8:	dd 24       	eor	r13, r13
    3faa:	41 c0       	rjmp	.+130    	; 0x402e <main+0x1d6>
      // Task is ready to tick
      if ( tasks[i]->elapsedTime == tasks[i]->period ) {
    3fac:	f8 01       	movw	r30, r16
    3fae:	ee 0f       	add	r30, r30
    3fb0:	ff 1f       	adc	r31, r31
    3fb2:	81 e0       	ldi	r24, 0x01	; 1
    3fb4:	90 e0       	ldi	r25, 0x00	; 0
    3fb6:	8c 0f       	add	r24, r28
    3fb8:	9d 1f       	adc	r25, r29
    3fba:	e8 0f       	add	r30, r24
    3fbc:	f9 1f       	adc	r31, r25
    3fbe:	e0 80       	ld	r14, Z
    3fc0:	f1 80       	ldd	r15, Z+1	; 0x01
    3fc2:	f7 01       	movw	r30, r14
    3fc4:	85 81       	ldd	r24, Z+5	; 0x05
    3fc6:	96 81       	ldd	r25, Z+6	; 0x06
    3fc8:	a7 81       	ldd	r26, Z+7	; 0x07
    3fca:	b0 85       	ldd	r27, Z+8	; 0x08
    3fcc:	41 81       	ldd	r20, Z+1	; 0x01
    3fce:	52 81       	ldd	r21, Z+2	; 0x02
    3fd0:	63 81       	ldd	r22, Z+3	; 0x03
    3fd2:	74 81       	ldd	r23, Z+4	; 0x04
    3fd4:	84 17       	cp	r24, r20
    3fd6:	95 07       	cpc	r25, r21
    3fd8:	a6 07       	cpc	r26, r22
    3fda:	b7 07       	cpc	r27, r23
    3fdc:	d1 f4       	brne	.+52     	; 0x4012 <main+0x1ba>
        // Setting next state for task
        tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
    3fde:	80 81       	ld	r24, Z
    3fe0:	01 84       	ldd	r0, Z+9	; 0x09
    3fe2:	f2 85       	ldd	r31, Z+10	; 0x0a
    3fe4:	e0 2d       	mov	r30, r0
    3fe6:	99 27       	eor	r25, r25
    3fe8:	87 fd       	sbrc	r24, 7
    3fea:	90 95       	com	r25
    3fec:	09 95       	icall
    3fee:	d7 01       	movw	r26, r14
    3ff0:	8c 93       	st	X, r24
        // Reset the elapsed time for next tick.
        tasks[i]->elapsedTime = 0;
    3ff2:	f8 01       	movw	r30, r16
    3ff4:	ee 0f       	add	r30, r30
    3ff6:	ff 1f       	adc	r31, r31
    3ff8:	81 e0       	ldi	r24, 0x01	; 1
    3ffa:	90 e0       	ldi	r25, 0x00	; 0
    3ffc:	8c 0f       	add	r24, r28
    3ffe:	9d 1f       	adc	r25, r29
    4000:	e8 0f       	add	r30, r24
    4002:	f9 1f       	adc	r31, r25
    4004:	01 90       	ld	r0, Z+
    4006:	f0 81       	ld	r31, Z
    4008:	e0 2d       	mov	r30, r0
    400a:	15 82       	std	Z+5, r1	; 0x05
    400c:	16 82       	std	Z+6, r1	; 0x06
    400e:	17 82       	std	Z+7, r1	; 0x07
    4010:	10 86       	std	Z+8, r1	; 0x08
      }
      tasks[i]->elapsedTime += CLK_PER;
    4012:	f7 01       	movw	r30, r14
    4014:	85 81       	ldd	r24, Z+5	; 0x05
    4016:	96 81       	ldd	r25, Z+6	; 0x06
    4018:	a7 81       	ldd	r26, Z+7	; 0x07
    401a:	b0 85       	ldd	r27, Z+8	; 0x08
    401c:	08 96       	adiw	r24, 0x08	; 8
    401e:	a1 1d       	adc	r26, r1
    4020:	b1 1d       	adc	r27, r1
    4022:	85 83       	std	Z+5, r24	; 0x05
    4024:	96 83       	std	Z+6, r25	; 0x06
    4026:	a7 83       	std	Z+7, r26	; 0x07
    4028:	b0 87       	std	Z+8, r27	; 0x08
  TimerOn();
  
  unsigned short i; // Scheduler for-loop iterator
  while(1) {
    // Scheduler code
    for ( i = 0; i < numTasks; i++ ) {
    402a:	0f 5f       	subi	r16, 0xFF	; 255
    402c:	1f 4f       	sbci	r17, 0xFF	; 255
    402e:	05 30       	cpi	r16, 0x05	; 5
    4030:	11 05       	cpc	r17, r1
    4032:	08 f4       	brcc	.+2      	; 0x4036 <main+0x1de>
    4034:	bb cf       	rjmp	.-138    	; 0x3fac <main+0x154>
        // Reset the elapsed time for next tick.
        tasks[i]->elapsedTime = 0;
      }
      tasks[i]->elapsedTime += CLK_PER;
    }
    while(!TimerFlag);
    4036:	80 91 d0 00 	lds	r24, 0x00D0
    403a:	88 23       	and	r24, r24
    403c:	e1 f3       	breq	.-8      	; 0x4036 <main+0x1de>
    TimerFlag = 0;
    403e:	10 92 d0 00 	sts	0x00D0, r1
  TimerOn();
  
  unsigned short i; // Scheduler for-loop iterator
  while(1) {
    // Scheduler code
    for ( i = 0; i < numTasks; i++ ) {
    4042:	86 01       	movw	r16, r12
      }
      tasks[i]->elapsedTime += CLK_PER;
    }
    while(!TimerFlag);
    TimerFlag = 0;
  }
    4044:	f4 cf       	rjmp	.-24     	; 0x402e <main+0x1d6>

00004046 <__udivmodhi4>:
    4046:	aa 1b       	sub	r26, r26
    4048:	bb 1b       	sub	r27, r27
    404a:	51 e1       	ldi	r21, 0x11	; 17
    404c:	07 c0       	rjmp	.+14     	; 0x405c <__udivmodhi4_ep>

0000404e <__udivmodhi4_loop>:
    404e:	aa 1f       	adc	r26, r26
    4050:	bb 1f       	adc	r27, r27
    4052:	a6 17       	cp	r26, r22
    4054:	b7 07       	cpc	r27, r23
    4056:	10 f0       	brcs	.+4      	; 0x405c <__udivmodhi4_ep>
    4058:	a6 1b       	sub	r26, r22
    405a:	b7 0b       	sbc	r27, r23

0000405c <__udivmodhi4_ep>:
    405c:	88 1f       	adc	r24, r24
    405e:	99 1f       	adc	r25, r25
    4060:	5a 95       	dec	r21
    4062:	a9 f7       	brne	.-22     	; 0x404e <__udivmodhi4_loop>
    4064:	80 95       	com	r24
    4066:	90 95       	com	r25
    4068:	bc 01       	movw	r22, r24
    406a:	cd 01       	movw	r24, r26
    406c:	08 95       	ret

0000406e <__divmodhi4>:
    406e:	97 fb       	bst	r25, 7
    4070:	09 2e       	mov	r0, r25
    4072:	07 26       	eor	r0, r23
    4074:	0a d0       	rcall	.+20     	; 0x408a <__divmodhi4_neg1>
    4076:	77 fd       	sbrc	r23, 7
    4078:	04 d0       	rcall	.+8      	; 0x4082 <__divmodhi4_neg2>
    407a:	e5 df       	rcall	.-54     	; 0x4046 <__udivmodhi4>
    407c:	06 d0       	rcall	.+12     	; 0x408a <__divmodhi4_neg1>
    407e:	00 20       	and	r0, r0
    4080:	1a f4       	brpl	.+6      	; 0x4088 <__divmodhi4_exit>

00004082 <__divmodhi4_neg2>:
    4082:	70 95       	com	r23
    4084:	61 95       	neg	r22
    4086:	7f 4f       	sbci	r23, 0xFF	; 255

00004088 <__divmodhi4_exit>:
    4088:	08 95       	ret

0000408a <__divmodhi4_neg1>:
    408a:	f6 f7       	brtc	.-4      	; 0x4088 <__divmodhi4_exit>
    408c:	90 95       	com	r25
    408e:	81 95       	neg	r24
    4090:	9f 4f       	sbci	r25, 0xFF	; 255
    4092:	08 95       	ret

00004094 <do_rand>:
    4094:	8f 92       	push	r8
    4096:	9f 92       	push	r9
    4098:	af 92       	push	r10
    409a:	bf 92       	push	r11
    409c:	cf 92       	push	r12
    409e:	df 92       	push	r13
    40a0:	ef 92       	push	r14
    40a2:	ff 92       	push	r15
    40a4:	cf 93       	push	r28
    40a6:	df 93       	push	r29
    40a8:	ec 01       	movw	r28, r24
    40aa:	88 81       	ld	r24, Y
    40ac:	99 81       	ldd	r25, Y+1	; 0x01
    40ae:	aa 81       	ldd	r26, Y+2	; 0x02
    40b0:	bb 81       	ldd	r27, Y+3	; 0x03
    40b2:	00 97       	sbiw	r24, 0x00	; 0
    40b4:	a1 05       	cpc	r26, r1
    40b6:	b1 05       	cpc	r27, r1
    40b8:	21 f4       	brne	.+8      	; 0x40c2 <do_rand+0x2e>
    40ba:	84 e2       	ldi	r24, 0x24	; 36
    40bc:	99 ed       	ldi	r25, 0xD9	; 217
    40be:	ab e5       	ldi	r26, 0x5B	; 91
    40c0:	b7 e0       	ldi	r27, 0x07	; 7
    40c2:	bc 01       	movw	r22, r24
    40c4:	cd 01       	movw	r24, r26
    40c6:	2d e1       	ldi	r18, 0x1D	; 29
    40c8:	33 ef       	ldi	r19, 0xF3	; 243
    40ca:	41 e0       	ldi	r20, 0x01	; 1
    40cc:	50 e0       	ldi	r21, 0x00	; 0
    40ce:	0e 94 ce 20 	call	0x419c	; 0x419c <__divmodsi4>
    40d2:	49 01       	movw	r8, r18
    40d4:	5a 01       	movw	r10, r20
    40d6:	27 ea       	ldi	r18, 0xA7	; 167
    40d8:	31 e4       	ldi	r19, 0x41	; 65
    40da:	40 e0       	ldi	r20, 0x00	; 0
    40dc:	50 e0       	ldi	r21, 0x00	; 0
    40de:	0e 94 af 20 	call	0x415e	; 0x415e <__mulsi3>
    40e2:	6b 01       	movw	r12, r22
    40e4:	7c 01       	movw	r14, r24
    40e6:	c5 01       	movw	r24, r10
    40e8:	b4 01       	movw	r22, r8
    40ea:	2c ee       	ldi	r18, 0xEC	; 236
    40ec:	34 ef       	ldi	r19, 0xF4	; 244
    40ee:	4f ef       	ldi	r20, 0xFF	; 255
    40f0:	5f ef       	ldi	r21, 0xFF	; 255
    40f2:	0e 94 af 20 	call	0x415e	; 0x415e <__mulsi3>
    40f6:	dc 01       	movw	r26, r24
    40f8:	cb 01       	movw	r24, r22
    40fa:	c8 0e       	add	r12, r24
    40fc:	d9 1e       	adc	r13, r25
    40fe:	ea 1e       	adc	r14, r26
    4100:	fb 1e       	adc	r15, r27
    4102:	f7 fe       	sbrs	r15, 7
    4104:	08 c0       	rjmp	.+16     	; 0x4116 <do_rand+0x82>
    4106:	8f ef       	ldi	r24, 0xFF	; 255
    4108:	9f ef       	ldi	r25, 0xFF	; 255
    410a:	af ef       	ldi	r26, 0xFF	; 255
    410c:	bf e7       	ldi	r27, 0x7F	; 127
    410e:	c8 0e       	add	r12, r24
    4110:	d9 1e       	adc	r13, r25
    4112:	ea 1e       	adc	r14, r26
    4114:	fb 1e       	adc	r15, r27
    4116:	c8 82       	st	Y, r12
    4118:	d9 82       	std	Y+1, r13	; 0x01
    411a:	ea 82       	std	Y+2, r14	; 0x02
    411c:	fb 82       	std	Y+3, r15	; 0x03
    411e:	c6 01       	movw	r24, r12
    4120:	9f 77       	andi	r25, 0x7F	; 127
    4122:	df 91       	pop	r29
    4124:	cf 91       	pop	r28
    4126:	ff 90       	pop	r15
    4128:	ef 90       	pop	r14
    412a:	df 90       	pop	r13
    412c:	cf 90       	pop	r12
    412e:	bf 90       	pop	r11
    4130:	af 90       	pop	r10
    4132:	9f 90       	pop	r9
    4134:	8f 90       	pop	r8
    4136:	08 95       	ret

00004138 <rand_r>:
    4138:	0e 94 4a 20 	call	0x4094	; 0x4094 <do_rand>
    413c:	08 95       	ret

0000413e <rand>:
    413e:	88 ec       	ldi	r24, 0xC8	; 200
    4140:	90 e0       	ldi	r25, 0x00	; 0
    4142:	0e 94 4a 20 	call	0x4094	; 0x4094 <do_rand>
    4146:	08 95       	ret

00004148 <srand>:
    4148:	a0 e0       	ldi	r26, 0x00	; 0
    414a:	b0 e0       	ldi	r27, 0x00	; 0
    414c:	80 93 c8 00 	sts	0x00C8, r24
    4150:	90 93 c9 00 	sts	0x00C9, r25
    4154:	a0 93 ca 00 	sts	0x00CA, r26
    4158:	b0 93 cb 00 	sts	0x00CB, r27
    415c:	08 95       	ret

0000415e <__mulsi3>:
    415e:	62 9f       	mul	r22, r18
    4160:	d0 01       	movw	r26, r0
    4162:	73 9f       	mul	r23, r19
    4164:	f0 01       	movw	r30, r0
    4166:	82 9f       	mul	r24, r18
    4168:	e0 0d       	add	r30, r0
    416a:	f1 1d       	adc	r31, r1
    416c:	64 9f       	mul	r22, r20
    416e:	e0 0d       	add	r30, r0
    4170:	f1 1d       	adc	r31, r1
    4172:	92 9f       	mul	r25, r18
    4174:	f0 0d       	add	r31, r0
    4176:	83 9f       	mul	r24, r19
    4178:	f0 0d       	add	r31, r0
    417a:	74 9f       	mul	r23, r20
    417c:	f0 0d       	add	r31, r0
    417e:	65 9f       	mul	r22, r21
    4180:	f0 0d       	add	r31, r0
    4182:	99 27       	eor	r25, r25
    4184:	72 9f       	mul	r23, r18
    4186:	b0 0d       	add	r27, r0
    4188:	e1 1d       	adc	r30, r1
    418a:	f9 1f       	adc	r31, r25
    418c:	63 9f       	mul	r22, r19
    418e:	b0 0d       	add	r27, r0
    4190:	e1 1d       	adc	r30, r1
    4192:	f9 1f       	adc	r31, r25
    4194:	bd 01       	movw	r22, r26
    4196:	cf 01       	movw	r24, r30
    4198:	11 24       	eor	r1, r1
    419a:	08 95       	ret

0000419c <__divmodsi4>:
    419c:	97 fb       	bst	r25, 7
    419e:	09 2e       	mov	r0, r25
    41a0:	05 26       	eor	r0, r21
    41a2:	0e d0       	rcall	.+28     	; 0x41c0 <__divmodsi4_neg1>
    41a4:	57 fd       	sbrc	r21, 7
    41a6:	04 d0       	rcall	.+8      	; 0x41b0 <__divmodsi4_neg2>
    41a8:	14 d0       	rcall	.+40     	; 0x41d2 <__udivmodsi4>
    41aa:	0a d0       	rcall	.+20     	; 0x41c0 <__divmodsi4_neg1>
    41ac:	00 1c       	adc	r0, r0
    41ae:	38 f4       	brcc	.+14     	; 0x41be <__divmodsi4_exit>

000041b0 <__divmodsi4_neg2>:
    41b0:	50 95       	com	r21
    41b2:	40 95       	com	r20
    41b4:	30 95       	com	r19
    41b6:	21 95       	neg	r18
    41b8:	3f 4f       	sbci	r19, 0xFF	; 255
    41ba:	4f 4f       	sbci	r20, 0xFF	; 255
    41bc:	5f 4f       	sbci	r21, 0xFF	; 255

000041be <__divmodsi4_exit>:
    41be:	08 95       	ret

000041c0 <__divmodsi4_neg1>:
    41c0:	f6 f7       	brtc	.-4      	; 0x41be <__divmodsi4_exit>
    41c2:	90 95       	com	r25
    41c4:	80 95       	com	r24
    41c6:	70 95       	com	r23
    41c8:	61 95       	neg	r22
    41ca:	7f 4f       	sbci	r23, 0xFF	; 255
    41cc:	8f 4f       	sbci	r24, 0xFF	; 255
    41ce:	9f 4f       	sbci	r25, 0xFF	; 255
    41d0:	08 95       	ret

000041d2 <__udivmodsi4>:
    41d2:	a1 e2       	ldi	r26, 0x21	; 33
    41d4:	1a 2e       	mov	r1, r26
    41d6:	aa 1b       	sub	r26, r26
    41d8:	bb 1b       	sub	r27, r27
    41da:	fd 01       	movw	r30, r26
    41dc:	0d c0       	rjmp	.+26     	; 0x41f8 <__udivmodsi4_ep>

000041de <__udivmodsi4_loop>:
    41de:	aa 1f       	adc	r26, r26
    41e0:	bb 1f       	adc	r27, r27
    41e2:	ee 1f       	adc	r30, r30
    41e4:	ff 1f       	adc	r31, r31
    41e6:	a2 17       	cp	r26, r18
    41e8:	b3 07       	cpc	r27, r19
    41ea:	e4 07       	cpc	r30, r20
    41ec:	f5 07       	cpc	r31, r21
    41ee:	20 f0       	brcs	.+8      	; 0x41f8 <__udivmodsi4_ep>
    41f0:	a2 1b       	sub	r26, r18
    41f2:	b3 0b       	sbc	r27, r19
    41f4:	e4 0b       	sbc	r30, r20
    41f6:	f5 0b       	sbc	r31, r21

000041f8 <__udivmodsi4_ep>:
    41f8:	66 1f       	adc	r22, r22
    41fa:	77 1f       	adc	r23, r23
    41fc:	88 1f       	adc	r24, r24
    41fe:	99 1f       	adc	r25, r25
    4200:	1a 94       	dec	r1
    4202:	69 f7       	brne	.-38     	; 0x41de <__udivmodsi4_loop>
    4204:	60 95       	com	r22
    4206:	70 95       	com	r23
    4208:	80 95       	com	r24
    420a:	90 95       	com	r25
    420c:	9b 01       	movw	r18, r22
    420e:	ac 01       	movw	r20, r24
    4210:	bd 01       	movw	r22, r26
    4212:	cf 01       	movw	r24, r30
    4214:	08 95       	ret

00004216 <_exit>:
    4216:	f8 94       	cli

00004218 <__stop_program>:
    4218:	ff cf       	rjmp	.-2      	; 0x4218 <__stop_program>
